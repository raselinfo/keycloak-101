"use strict";
(self["webpackChunkstrapi_backend"] = self["webpackChunkstrapi_backend"] || []).push([[9119],{

/***/ 90765:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  af: () => (/* reexport */ af),
  ar: () => (/* reexport */ ar),
  arDZ: () => (/* reexport */ ar_DZ),
  arEG: () => (/* reexport */ ar_EG),
  arMA: () => (/* reexport */ ar_MA),
  arSA: () => (/* reexport */ ar_SA),
  arTN: () => (/* reexport */ ar_TN),
  az: () => (/* reexport */ az),
  be: () => (/* reexport */ be),
  beTarask: () => (/* reexport */ be_tarask),
  bg: () => (/* reexport */ bg),
  bn: () => (/* reexport */ bn),
  bs: () => (/* reexport */ bs),
  ca: () => (/* reexport */ ca),
  cs: () => (/* reexport */ cs),
  cy: () => (/* reexport */ cy),
  da: () => (/* reexport */ da),
  de: () => (/* reexport */ de),
  deAT: () => (/* reexport */ de_AT),
  el: () => (/* reexport */ el),
  enAU: () => (/* reexport */ en_AU),
  enCA: () => (/* reexport */ en_CA),
  enGB: () => (/* reexport */ en_GB),
  enIE: () => (/* reexport */ en_IE),
  enIN: () => (/* reexport */ en_IN),
  enNZ: () => (/* reexport */ en_NZ),
  enUS: () => (/* reexport */ en_US/* default */.Z),
  enZA: () => (/* reexport */ en_ZA),
  eo: () => (/* reexport */ eo),
  es: () => (/* reexport */ es),
  et: () => (/* reexport */ et),
  eu: () => (/* reexport */ eu),
  faIR: () => (/* reexport */ fa_IR),
  fi: () => (/* reexport */ fi),
  fr: () => (/* reexport */ fr),
  frCA: () => (/* reexport */ fr_CA),
  frCH: () => (/* reexport */ fr_CH),
  fy: () => (/* reexport */ fy),
  gd: () => (/* reexport */ gd),
  gl: () => (/* reexport */ gl),
  gu: () => (/* reexport */ gu),
  he: () => (/* reexport */ he),
  hi: () => (/* reexport */ hi),
  hr: () => (/* reexport */ hr),
  ht: () => (/* reexport */ ht),
  hu: () => (/* reexport */ hu),
  hy: () => (/* reexport */ hy),
  id: () => (/* reexport */ id),
  is: () => (/* reexport */ is),
  it: () => (/* reexport */ it),
  itCH: () => (/* reexport */ it_CH),
  ja: () => (/* reexport */ ja),
  jaHira: () => (/* reexport */ ja_Hira),
  ka: () => (/* reexport */ ka),
  kk: () => (/* reexport */ kk),
  km: () => (/* reexport */ km),
  kn: () => (/* reexport */ kn),
  ko: () => (/* reexport */ ko),
  lb: () => (/* reexport */ lb),
  lt: () => (/* reexport */ lt),
  lv: () => (/* reexport */ lv),
  mk: () => (/* reexport */ mk),
  mn: () => (/* reexport */ mn),
  ms: () => (/* reexport */ ms),
  mt: () => (/* reexport */ mt),
  nb: () => (/* reexport */ nb),
  nl: () => (/* reexport */ nl),
  nlBE: () => (/* reexport */ nl_BE),
  nn: () => (/* reexport */ nn),
  oc: () => (/* reexport */ oc),
  pl: () => (/* reexport */ pl),
  pt: () => (/* reexport */ pt),
  ptBR: () => (/* reexport */ pt_BR),
  ro: () => (/* reexport */ ro),
  ru: () => (/* reexport */ ru),
  sk: () => (/* reexport */ sk),
  sl: () => (/* reexport */ sl),
  sq: () => (/* reexport */ sq),
  sr: () => (/* reexport */ sr),
  srLatn: () => (/* reexport */ sr_Latn),
  sv: () => (/* reexport */ sv),
  ta: () => (/* reexport */ ta),
  te: () => (/* reexport */ te),
  th: () => (/* reexport */ th),
  tr: () => (/* reexport */ tr),
  ug: () => (/* reexport */ ug),
  uk: () => (/* reexport */ uk),
  uz: () => (/* reexport */ uz),
  uzCyrl: () => (/* reexport */ uz_Cyrl),
  vi: () => (/* reexport */ vi),
  zhCN: () => (/* reexport */ zh_CN),
  zhHK: () => (/* reexport */ zh_HK),
  zhTW: () => (/* reexport */ zh_TW)
});

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "minder as 'n sekonde",
    other: "minder as {{count}} sekondes"
  },
  xSeconds: {
    one: "1 sekonde",
    other: "{{count}} sekondes"
  },
  halfAMinute: "'n halwe minuut",
  lessThanXMinutes: {
    one: "minder as 'n minuut",
    other: "minder as {{count}} minute"
  },
  xMinutes: {
    one: "'n minuut",
    other: "{{count}} minute"
  },
  aboutXHours: {
    one: "ongeveer 1 uur",
    other: "ongeveer {{count}} ure"
  },
  xHours: {
    one: "1 uur",
    other: "{{count}} ure"
  },
  xDays: {
    one: "1 dag",
    other: "{{count}} dae"
  },
  aboutXWeeks: {
    one: "ongeveer 1 week",
    other: "ongeveer {{count}} weke"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weke"
  },
  aboutXMonths: {
    one: "ongeveer 1 maand",
    other: "ongeveer {{count}} maande"
  },
  xMonths: {
    one: "1 maand",
    other: "{{count}} maande"
  },
  aboutXYears: {
    one: "ongeveer 1 jaar",
    other: "ongeveer {{count}} jaar"
  },
  xYears: {
    one: "1 jaar",
    other: "{{count}} jaar"
  },
  overXYears: {
    one: "meer as 1 jaar",
    other: "meer as {{count}} jaar"
  },
  almostXYears: {
    one: "byna 1 jaar",
    other: "byna {{count}} jaar"
  }
};
var formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "oor " + result;
    } else {
      return result + " gelede";
    }
  }
  return result;
};
/* harmony default export */ const _lib_formatDistance = (formatDistance);

// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
var buildFormatLongFn = __webpack_require__(89294);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/formatLong/index.js

var dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "yyyy/MM/dd"
};
var timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var dateTimeFormats = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const _lib_formatLong = (formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'verlede' eeee 'om' p",
  yesterday: "'gister om' p",
  today: "'vandag om' p",
  tomorrow: "'m\xF4re om' p",
  nextWeek: "eeee 'om' p",
  other: "P"
};
var formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
};
/* harmony default export */ const _lib_formatRelative = (formatRelative);

// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
var buildLocalizeFn = __webpack_require__(60402);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/localize/index.js

var eraValues = {
  narrow: ["vC", "nC"],
  abbreviated: ["vC", "nC"],
  wide: ["voor Christus", "na Christus"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1ste kwartaal", "2de kwartaal", "3de kwartaal", "4de kwartaal"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mrt", "Apr", "Mei", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Des"],
  wide: ["Januarie", "Februarie", "Maart", "April", "Mei", "Junie", "Julie", "Augustus", "September", "Oktober", "November", "Desember"]
};
var dayValues = {
  narrow: ["S", "M", "D", "W", "D", "V", "S"],
  short: ["So", "Ma", "Di", "Wo", "Do", "Vr", "Sa"],
  abbreviated: ["Son", "Maa", "Din", "Woe", "Don", "Vry", "Sat"],
  wide: ["Sondag", "Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrydag", "Saterdag"]
};
var dayPeriodValues = {
  narrow: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "middaguur",
    morning: "oggend",
    afternoon: "middag",
    evening: "laat middag",
    night: "aand"
  },
  abbreviated: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "middaguur",
    morning: "oggend",
    afternoon: "middag",
    evening: "laat middag",
    night: "aand"
  },
  wide: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "middaguur",
    morning: "oggend",
    afternoon: "middag",
    evening: "laat middag",
    night: "aand"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "uur die middag",
    morning: "uur die oggend",
    afternoon: "uur die middag",
    evening: "uur die aand",
    night: "uur die aand"
  },
  abbreviated: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "uur die middag",
    morning: "uur die oggend",
    afternoon: "uur die middag",
    evening: "uur die aand",
    night: "uur die aand"
  },
  wide: {
    am: "vm",
    pm: "nm",
    midnight: "middernag",
    noon: "uur die middag",
    morning: "uur die oggend",
    afternoon: "uur die middag",
    evening: "uur die aand",
    night: "uur die aand"
  }
};
var ordinalNumber = function ordinalNumber2(dirtyNumber) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 < 20) {
    switch (rem100) {
      case 1:
      case 8:
        return number + "ste";
      default:
        return number + "de";
    }
  }
  return number + "ste";
};
var localize = {
  ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const _lib_localize = (localize);

// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
var buildMatchFn = __webpack_require__(70288);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
var buildMatchPatternFn = __webpack_require__(76031);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/_lib/match/index.js


var matchOrdinalNumberPattern = /^(\d+)(ste|de)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?C\.?)/,
  wide: /^((voor|na) Christus)/
};
var parseEraPatterns = {
  any: [/^v/, /^n/]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234](st|d)e kwartaal/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(Jan|Feb|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)\.?/i,
  wide: /^(Januarie|Februarie|Maart|April|Mei|Junie|Julie|Augustus|September|Oktober|November|Desember)/i
};
var parseMonthPatterns = {
  narrow: [/^J/i, /^F/i, /^M/i, /^A/i, /^M/i, /^J/i, /^J/i, /^A/i, /^S/i, /^O/i, /^N/i, /^D/i],
  any: [/^Jan/i, /^Feb/i, /^Mrt/i, /^Apr/i, /^Mei/i, /^Jun/i, /^Jul/i, /^Aug/i, /^Sep/i, /^Okt/i, /^Nov/i, /^Dec/i]
};
var matchDayPatterns = {
  narrow: /^[smdwv]/i,
  short: /^(So|Ma|Di|Wo|Do|Vr|Sa)/i,
  abbreviated: /^(Son|Maa|Din|Woe|Don|Vry|Sat)/i,
  wide: /^(Sondag|Maandag|Dinsdag|Woensdag|Donderdag|Vrydag|Saterdag)/i
};
var parseDayPatterns = {
  narrow: [/^S/i, /^M/i, /^D/i, /^W/i, /^D/i, /^V/i, /^S/i],
  any: [/^So/i, /^Ma/i, /^Di/i, /^Wo/i, /^Do/i, /^Vr/i, /^Sa/i]
};
var matchDayPeriodPatterns = {
  any: /^(vm|nm|middernag|(?:uur )?die (oggend|middag|aand))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^vm/i,
    pm: /^nm/i,
    midnight: /^middernag/i,
    noon: /^middaguur/i,
    morning: /oggend/i,
    afternoon: /middag/i,
    evening: /laat middag/i,
    night: /aand/i
  }
};
var match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const _lib_match = (match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/af/index.js





var locale = {
  code: "af",
  formatDistance: _lib_formatDistance,
  formatLong: _lib_formatLong,
  formatRelative: _lib_formatRelative,
  localize: _lib_localize,
  match: _lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const af = (locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/formatDistance/index.js
var formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  xSeconds: {
    one: "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u062B\u0627\u0646\u064A\u062A\u0627\u0646",
    threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  halfAMinute: "\u0646\u0635\u0641 \u062F\u0642\u064A\u0642\u0629",
  lessThanXMinutes: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u0626\u0642",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  xMinutes: {
    one: "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u062F\u0642\u064A\u0642\u062A\u0627\u0646",
    threeToTen: "{{count}} \u062F\u0642\u0627\u0626\u0642",
    other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  aboutXHours: {
    one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627",
    threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xHours: {
    one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u0633\u0627\u0639\u062A\u0627\u0646",
    threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
    other: "{{count}} \u0633\u0627\u0639\u0629"
  },
  xDays: {
    one: "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F",
    two: "\u064A\u0648\u0645\u0627\u0646",
    threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
    other: "{{count}} \u064A\u0648\u0645"
  },
  aboutXWeeks: {
    one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627",
    two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627",
    threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639 \u062A\u0642\u0631\u064A\u0628\u0627",
    other: "{{count}} \u0623\u0633\u0628\u0648\u0639\u0627 \u062A\u0642\u0631\u064A\u0628\u0627"
  },
  xWeeks: {
    one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F",
    two: "\u0623\u0633\u0628\u0648\u0639\u0627\u0646",
    threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
    other: "{{count}} \u0623\u0633\u0628\u0648\u0639\u0627"
  },
  aboutXMonths: {
    one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627",
    other: "{{count}} \u0634\u0647\u0631\u0627 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xMonths: {
    one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F",
    two: "\u0634\u0647\u0631\u0627\u0646",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
    other: "{{count}} \u0634\u0647\u0631\u0627"
  },
  aboutXYears: {
    one: "\u0633\u0646\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0633\u0646\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627",
    threeToTen: "{{count}} \u0633\u0646\u0648\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0633\u0646\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xYears: {
    one: "\u0633\u0646\u0629 \u0648\u0627\u062D\u062F",
    two: "\u0633\u0646\u062A\u0627\u0646",
    threeToTen: "{{count}} \u0633\u0646\u0648\u0627\u062A",
    other: "{{count}} \u0633\u0646\u0629"
  },
  overXYears: {
    one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0633\u0646\u0629",
    two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0633\u0646\u062A\u064A\u0646",
    threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0633\u0646\u0648\u0627\u062A",
    other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0633\u0646\u0629"
  },
  almostXYears: {
    one: "\u0645\u0627 \u064A\u0642\u0627\u0631\u0628 \u0633\u0646\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u0645\u0627 \u064A\u0642\u0627\u0631\u0628 \u0633\u0646\u062A\u064A\u0646",
    threeToTen: "\u0645\u0627 \u064A\u0642\u0627\u0631\u0628 {{count}} \u0633\u0646\u0648\u0627\u062A",
    other: "\u0645\u0627 \u064A\u0642\u0627\u0631\u0628 {{count}} \u0633\u0646\u0629"
  }
};
var formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var usageGroup = formatDistance_formatDistanceLocale[token];
  var result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace("{{count}}", String(count));
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u062E\u0644\u0627\u0644 " + result;
    } else {
      return "\u0645\u0646\u0630 " + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_lib_formatDistance = (formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/formatLong/index.js

var formatLong_dateFormats = {
  full: "EEEE\u060C do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "dd/MM/yyyy"
};
var formatLong_timeFormats = {
  full: "HH:mm:ss",
  long: "HH:mm:ss",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var formatLong_dateTimeFormats = {
  full: "{{date}} '\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' {{time}}",
  long: "{{date}} '\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ar_lib_formatLong = (formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/formatRelative/index.js
var formatRelative_formatRelativeLocale = {
  lastWeek: "eeee '\u0627\u0644\u0645\u0627\u0636\u064A \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
  yesterday: "'\u0627\u0644\u0623\u0645\u0633 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
  today: "'\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
  tomorrow: "'\u063A\u062F\u0627 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
  nextWeek: "eeee '\u0627\u0644\u0642\u0627\u062F\u0645 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
  other: "P"
};
var formatRelative_formatRelative = function formatRelative2(token) {
  return formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_lib_formatRelative = (formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/localize/index.js

var localize_eraValues = {
  narrow: ["\u0642", "\u0628"],
  abbreviated: ["\u0642.\u0645.", "\u0628.\u0645."],
  wide: ["\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F", "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"]
};
var localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u06311", "\u06312", "\u06313", "\u06314"],
  wide: ["\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"]
};
var localize_monthValues = {
  narrow: ["\u064A", "\u0641", "\u0645", "\u0623", "\u0645", "\u064A", "\u064A", "\u0623", "\u0633", "\u0623", "\u0646", "\u062F"],
  abbreviated: ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"],
  wide: ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"]
};
var localize_dayValues = {
  narrow: ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"],
  short: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  abbreviated: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  wide: ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"]
};
var localize_dayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0627\u0644\u0638\u0647\u0631",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0627\u0644\u0638\u0647\u0631",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0627\u0644\u0638\u0647\u0631",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
  }
};
var localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0627\u0644\u0638\u0647\u0631",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0627\u0644\u0638\u0647\u0631",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0627\u0644\u0638\u0647\u0631",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
  }
};
var localize_ordinalNumber = function ordinalNumber2(num) {
  return String(num);
};
var localize_localize = {
  ordinalNumber: localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ar_lib_localize = (localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/_lib/match/index.js


var match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var match_parseOrdinalNumberPattern = /\d+/i;
var match_matchEraPatterns = {
  narrow: /[قب]/,
  abbreviated: /[قب]\.م\./,
  wide: /(قبل|بعد) الميلاد/
};
var match_parseEraPatterns = {
  any: [/قبل/, /بعد/]
};
var match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /ر[1234]/,
  wide: /الربع (الأول|الثاني|الثالث|الرابع)/
};
var match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var match_matchMonthPatterns = {
  narrow: /^[أيفمسند]/,
  abbreviated: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,
  wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
};
var match_parseMonthPatterns = {
  narrow: [/^ي/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ي/i, /^ي/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^يناير/i, /^فبراير/i, /^مارس/i, /^أبريل/i, /^مايو/i, /^يونيو/i, /^يوليو/i, /^أغسطس/i, /^سبتمبر/i, /^أكتوبر/i, /^نوفمبر/i, /^ديسمبر/i]
};
var match_matchDayPatterns = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var match_parseDayPatterns = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var match_matchDayPeriodPatterns = {
  narrow: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/,
  any: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/
};
var match_parseDayPeriodPatterns = {
  any: {
    am: /^ص/,
    pm: /^م/,
    midnight: /منتصف الليل/,
    noon: /الظهر/,
    afternoon: /بعد الظهر/,
    morning: /في الصباح/,
    evening: /في المساء/,
    night: /في الليل/
  }
};
var match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: match_matchOrdinalNumberPattern,
    parsePattern: match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ar_lib_match = (match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar/index.js





var ar_locale = {
  code: "ar",
  formatDistance: ar_lib_formatDistance,
  formatLong: ar_lib_formatLong,
  formatRelative: ar_lib_formatRelative,
  localize: ar_lib_localize,
  match: ar_lib_match,
  options: {
    weekStartsOn: 6,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar = (ar_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/formatDistance/index.js
var _lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  xSeconds: {
    one: "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u062B\u0627\u0646\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  halfAMinute: "\u0646\u0635\u0641 \u062F\u0642\u064A\u0642\u0629",
  lessThanXMinutes: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u0626\u0642",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  xMinutes: {
    one: "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062F\u0642\u0627\u0626\u0642",
    other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  aboutXHours: {
    one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xHours: {
    one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646",
    threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
    other: "{{count}} \u0633\u0627\u0639\u0629"
  },
  xDays: {
    one: "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F",
    two: "\u064A\u0648\u0645\u064A\u0646",
    threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
    other: "{{count}} \u064A\u0648\u0645"
  },
  aboutXWeeks: {
    one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0623\u0633\u0628\u0648\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xWeeks: {
    one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F",
    two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
    other: "{{count}} \u0623\u0633\u0628\u0648\u0639"
  },
  aboutXMonths: {
    one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xMonths: {
    one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F",
    two: "\u0634\u0647\u0631\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
    other: "{{count}} \u0634\u0647\u0631"
  },
  aboutXYears: {
    one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xYears: {
    one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F",
    two: "\u0639\u0627\u0645\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
    other: "{{count}} \u0639\u0627\u0645"
  },
  overXYears: {
    one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645",
    two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645\u064A\u0646",
    threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0623\u0639\u0648\u0627\u0645",
    other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0639\u0627\u0645"
  },
  almostXYears: {
    one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  }
};
var _lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  options = options || {};
  var usageGroup = _lib_formatDistance_formatDistanceLocale[token];
  var result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace("{{count}}", String(count));
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0641\u064A \u062E\u0644\u0627\u0644 " + result;
    } else {
      return "\u0645\u0646\u0630 " + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_DZ_lib_formatDistance = (_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/formatLong/index.js

var _lib_formatLong_dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var _lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var _lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u0639\u0646\u062F' {{time}}",
  long: "{{date}} '\u0639\u0646\u062F' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var _lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: _lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: _lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: _lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ar_DZ_lib_formatLong = (_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/formatRelative/index.js
var _lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0623\u062E\u0631' eeee '\u0639\u0646\u062F' p",
  yesterday: "'\u0623\u0645\u0633 \u0639\u0646\u062F' p",
  today: "'\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F' p",
  tomorrow: "'\u063A\u062F\u0627\u064B \u0639\u0646\u062F' p",
  nextWeek: "eeee '\u0639\u0646\u062F' p",
  other: "P"
};
var _lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return _lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_DZ_lib_formatRelative = (_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/localize/index.js

var _lib_localize_eraValues = {
  narrow: ["\u0642", "\u0628"],
  abbreviated: ["\u0642.\u0645.", "\u0628.\u0645."],
  wide: ["\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F", "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"]
};
var _lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u06311", "\u06312", "\u06313", "\u06314"],
  wide: ["\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"]
};
var _lib_localize_monthValues = {
  narrow: ["\u062C", "\u0641", "\u0645", "\u0623", "\u0645", "\u062C", "\u062C", "\u0623", "\u0633", "\u0623", "\u0646", "\u062F"],
  abbreviated: ["\u062C\u0627\u0646\u0640", "\u0641\u064A\u0641\u0640", "\u0645\u0627\u0631\u0633", "\u0623\u0641\u0631\u064A\u0644", "\u0645\u0627\u064A\u0640", "\u062C\u0648\u0627\u0646\u0640", "\u062C\u0648\u064A\u0640", "\u0623\u0648\u062A", "\u0633\u0628\u062A\u0640", "\u0623\u0643\u062A\u0640", "\u0646\u0648\u0641\u0640", "\u062F\u064A\u0633\u0640"],
  wide: ["\u062C\u0627\u0646\u0641\u064A", "\u0641\u064A\u0641\u0631\u064A", "\u0645\u0627\u0631\u0633", "\u0623\u0641\u0631\u064A\u0644", "\u0645\u0627\u064A", "\u062C\u0648\u0627\u0646", "\u062C\u0648\u064A\u0644\u064A\u0629", "\u0623\u0648\u062A", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"]
};
var _lib_localize_dayValues = {
  narrow: ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"],
  short: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  abbreviated: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u0640", "\u062B\u0644\u0627", "\u0623\u0631\u0628\u0640", "\u062E\u0645\u064A\u0640", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  wide: ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"]
};
var _lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  }
};
var _lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  }
};
var _lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber) {
  return String(dirtyNumber);
};
var _lib_localize_localize = {
  ordinalNumber: _lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: _lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: _lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ar_DZ_lib_localize = (_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/_lib/match/index.js


var _lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var _lib_match_parseOrdinalNumberPattern = /\d+/i;
var _lib_match_matchEraPatterns = {
  narrow: /^(ق|ب)/i,
  abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
var _lib_match_parseEraPatterns = {
  any: [/^قبل/i, /^بعد/i]
};
var _lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ر[1234]/i,
  wide: /^الربع [1234]/i
};
var _lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var _lib_match_matchMonthPatterns = {
  narrow: /^[جفمأسند]/i,
  abbreviated: /^(جان|فيف|مار|أفر|ماي|جوا|جوي|أوت|سبت|أكت|نوف|ديس)/i,
  wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/i
};
var _lib_match_parseMonthPatterns = {
  narrow: [/^ج/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ج/i, /^ج/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^جان/i, /^فيف/i, /^مار/i, /^أفر/i, /^ماي/i, /^جوا/i, /^جوي/i, /^أوت/i, /^سبت/i, /^أكت/i, /^نوف/i, /^ديس/i]
};
var _lib_match_matchDayPatterns = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var _lib_match_parseDayPatterns = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var _lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var _lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var _lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: _lib_match_matchOrdinalNumberPattern,
    parsePattern: _lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: _lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: _lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return Number(index) + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: _lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: _lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: _lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: _lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ar_DZ_lib_match = (_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-DZ/index.js





var ar_DZ_locale = {
  code: "ar-DZ",
  formatDistance: ar_DZ_lib_formatDistance,
  formatLong: ar_DZ_lib_formatLong,
  formatRelative: ar_DZ_lib_formatRelative,
  localize: ar_DZ_lib_localize,
  match: ar_DZ_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_DZ = (ar_DZ_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/formatDistance/index.js
var ar_EG_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  xSeconds: {
    one: "\u062B\u0627\u0646\u064A\u0629",
    two: "\u062B\u0627\u0646\u064A\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  halfAMinute: "\u0646\u0635 \u062F\u0642\u064A\u0642\u0629",
  lessThanXMinutes: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u064A\u0642",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  xMinutes: {
    one: "\u062F\u0642\u064A\u0642\u0629",
    two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062F\u0642\u0627\u064A\u0642",
    other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  aboutXHours: {
    one: "\u062D\u0648\u0627\u0644\u064A \u0633\u0627\u0639\u0629",
    two: "\u062D\u0648\u0627\u0644\u064A \u0633\u0627\u0639\u062A\u064A\u0646",
    threeToTen: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0633\u0627\u0639\u0627\u062A",
    other: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0633\u0627\u0639\u0629"
  },
  xHours: {
    one: "\u0633\u0627\u0639\u0629",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646",
    threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
    other: "{{count}} \u0633\u0627\u0639\u0629"
  },
  xDays: {
    one: "\u064A\u0648\u0645",
    two: "\u064A\u0648\u0645\u064A\u0646",
    threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
    other: "{{count}} \u064A\u0648\u0645"
  },
  aboutXWeeks: {
    one: "\u062D\u0648\u0627\u0644\u064A \u0623\u0633\u0628\u0648\u0639",
    two: "\u062D\u0648\u0627\u0644\u064A \u0623\u0633\u0628\u0648\u0639\u064A\u0646",
    threeToTen: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
    other: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0623\u0633\u0628\u0648\u0639"
  },
  xWeeks: {
    one: "\u0623\u0633\u0628\u0648\u0639",
    two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
    other: "{{count}} \u0623\u0633\u0628\u0648\u0639"
  },
  aboutXMonths: {
    one: "\u062D\u0648\u0627\u0644\u064A \u0634\u0647\u0631",
    two: "\u062D\u0648\u0627\u0644\u064A \u0634\u0647\u0631\u064A\u0646",
    threeToTen: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0623\u0634\u0647\u0631",
    other: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0634\u0647\u0631"
  },
  xMonths: {
    one: "\u0634\u0647\u0631",
    two: "\u0634\u0647\u0631\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
    other: "{{count}} \u0634\u0647\u0631"
  },
  aboutXYears: {
    one: "\u062D\u0648\u0627\u0644\u064A \u0633\u0646\u0629",
    two: "\u062D\u0648\u0627\u0644\u064A \u0633\u0646\u062A\u064A\u0646",
    threeToTen: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0633\u0646\u064A\u0646",
    other: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0633\u0646\u0629"
  },
  xYears: {
    one: "\u0639\u0627\u0645",
    two: "\u0639\u0627\u0645\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
    other: "{{count}} \u0639\u0627\u0645"
  },
  overXYears: {
    one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0633\u0646\u0629",
    two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0633\u0646\u062A\u064A\u0646",
    threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0633\u0646\u064A\u0646",
    other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0633\u0646\u0629"
  },
  almostXYears: {
    one: "\u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u064B\u0627",
    two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u064B\u0627",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u064B\u0627",
    other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u064B\u0627"
  }
};
var ar_EG_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = ar_EG_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else if (count <= 10) {
    result = tokenValue.threeToTen.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0641\u064A \u062E\u0644\u0627\u0644 ".concat(result);
    } else {
      return "\u0645\u0646\u0630 ".concat(result);
    }
  }
  return result;
};
/* harmony default export */ const ar_EG_lib_formatDistance = (ar_EG_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/formatLong/index.js

var ar_EG_lib_formatLong_dateFormats = {
  full: "EEEE\u060C do MMMM y",
  long: "do MMMM y",
  medium: "dd/MMM/y",
  short: "d/MM/y"
};
var ar_EG_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var ar_EG_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u0627\u0644\u0633\u0627\u0639\u0629' {{time}}",
  long: "{{date}} '\u0627\u0644\u0633\u0627\u0639\u0629' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ar_EG_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_EG_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_EG_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_EG_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ar_EG_lib_formatLong = (ar_EG_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/formatRelative/index.js
var ar_EG_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee '\u0627\u0644\u0644\u064A \u062C\u0627\u064A \u0627\u0644\u0633\u0627\u0639\u0629' p",
  yesterday: "'\u0625\u0645\u0628\u0627\u0631\u062D \u0627\u0644\u0633\u0627\u0639\u0629' p",
  today: "'\u0627\u0644\u0646\u0647\u0627\u0631\u062F\u0629 \u0627\u0644\u0633\u0627\u0639\u0629' p",
  tomorrow: "'\u0628\u0643\u0631\u0629 \u0627\u0644\u0633\u0627\u0639\u0629' p",
  nextWeek: "eeee '\u0627\u0644\u0633\u0627\u0639\u0629' p",
  other: "P"
};
var ar_EG_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ar_EG_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_EG_lib_formatRelative = (ar_EG_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/localize/index.js

var ar_EG_lib_localize_eraValues = {
  narrow: ["\u0642", "\u0628"],
  abbreviated: ["\u0642.\u0645", "\u0628.\u0645"],
  wide: ["\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F", "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"]
};
var ar_EG_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u06311", "\u06312", "\u06313", "\u06314"],
  wide: ["\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"]
};
var ar_EG_lib_localize_monthValues = {
  narrow: ["\u064A", "\u0641", "\u0645", "\u0623", "\u0645", "\u064A", "\u064A", "\u0623", "\u0633", "\u0623", "\u0646", "\u062F"],
  abbreviated: ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u0640", "\u064A\u0648\u0644\u0640", "\u0623\u063A\u0633\u0640", "\u0633\u0628\u062A\u0640", "\u0623\u0643\u062A\u0640", "\u0646\u0648\u0641\u0640", "\u062F\u064A\u0633\u0640"],
  wide: ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"]
};
var ar_EG_lib_localize_dayValues = {
  narrow: ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"],
  short: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  abbreviated: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  wide: ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"]
};
var ar_EG_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631\u0627\u064B",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631\u0627\u064B",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  }
};
var ar_EG_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631\u0627\u064B",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0638\u0647\u0631\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  }
};
var ar_EG_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var ar_EG_lib_localize_localize = {
  ordinalNumber: ar_EG_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ar_EG_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ar_EG_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ar_EG_lib_localize = (ar_EG_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/_lib/match/index.js


var ar_EG_lib_match_matchOrdinalNumberPattern = /^(\d+)/;
var ar_EG_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ar_EG_lib_match_matchEraPatterns = {
  narrow: /^(ق|ب)/g,
  abbreviated: /^(ق.م|ب.م)/g,
  wide: /^(قبل الميلاد|بعد الميلاد)/g
};
var ar_EG_lib_match_parseEraPatterns = {
  any: [/^ق/g, /^ب/g]
};
var ar_EG_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/,
  abbreviated: /^ر[1234]/,
  wide: /^الربع (الأول|الثاني|الثالث|الرابع)/
};
var ar_EG_lib_match_parseQuarterPatterns = {
  wide: [/الربع الأول/, /الربع الثاني/, /الربع الثالث/, /الربع الرابع/],
  any: [/1/, /2/, /3/, /4/]
};
var ar_EG_lib_match_matchMonthPatterns = {
  narrow: /^(ي|ف|م|أ|س|ن|د)/,
  abbreviated: /^(ينا|فبر|مارس|أبريل|مايو|يونـ|يولـ|أغسـ|سبتـ|أكتـ|نوفـ|ديسـ)/,
  wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
};
var ar_EG_lib_match_parseMonthPatterns = {
  narrow: [/^ي/, /^ف/, /^م/, /^أ/, /^م/, /^ي/, /^ي/, /^أ/, /^س/, /^أ/, /^ن/, /^د/],
  any: [/^ينا/, /^فبر/, /^مارس/, /^أبريل/, /^مايو/, /^يون/, /^يول/, /^أغس/, /^سبت/, /^أكت/, /^نوف/, /^ديس/]
};
var ar_EG_lib_match_matchDayPatterns = {
  narrow: /^(ح|ن|ث|ر|خ|ج|س)/,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,
  abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/
};
var ar_EG_lib_match_parseDayPatterns = {
  narrow: [/^ح/, /^ن/, /^ث/, /^ر/, /^خ/, /^ج/, /^س/],
  any: [/أحد/, /اثنين/, /ثلاثاء/, /أربعاء/, /خميس/, /جمعة/, /سبت/]
};
var ar_EG_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ص|م|ن|ظ|في الصباح|بعد الظهر|في المساء|في الليل)/,
  abbreviated: /^(ص|م|نصف الليل|ظهراً|في الصباح|بعد الظهر|في المساء|في الليل)/,
  wide: /^(ص|م|نصف الليل|في الصباح|ظهراً|بعد الظهر|في المساء|في الليل)/,
  any: /^(ص|م|صباح|ظهر|مساء|ليل)/
};
var ar_EG_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ص/,
    pm: /^م/,
    midnight: /^ن/,
    noon: /^ظ/,
    morning: /^ص/,
    afternoon: /^بعد/,
    evening: /^م/,
    night: /^ل/
  }
};
var ar_EG_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ar_EG_lib_match_matchOrdinalNumberPattern,
    parsePattern: ar_EG_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_EG_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_EG_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_EG_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_EG_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_EG_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ar_EG_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ar_EG_lib_match = (ar_EG_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-EG/index.js





var ar_EG_locale = {
  code: "ar-EG",
  formatDistance: ar_EG_lib_formatDistance,
  formatLong: ar_EG_lib_formatLong,
  formatRelative: ar_EG_lib_formatRelative,
  localize: ar_EG_lib_localize,
  match: ar_EG_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_EG = (ar_EG_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/formatDistance/index.js
var ar_MA_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  xSeconds: {
    one: "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u062B\u0627\u0646\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  halfAMinute: "\u0646\u0635\u0641 \u062F\u0642\u064A\u0642\u0629",
  lessThanXMinutes: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u0626\u0642",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  xMinutes: {
    one: "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062F\u0642\u0627\u0626\u0642",
    other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  aboutXHours: {
    one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xHours: {
    one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646",
    threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
    other: "{{count}} \u0633\u0627\u0639\u0629"
  },
  xDays: {
    one: "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F",
    two: "\u064A\u0648\u0645\u064A\u0646",
    threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
    other: "{{count}} \u064A\u0648\u0645"
  },
  aboutXWeeks: {
    one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0623\u0633\u0628\u0648\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xWeeks: {
    one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F",
    two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
    other: "{{count}} \u0623\u0633\u0628\u0648\u0639"
  },
  aboutXMonths: {
    one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xMonths: {
    one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F",
    two: "\u0634\u0647\u0631\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
    other: "{{count}} \u0634\u0647\u0631"
  },
  aboutXYears: {
    one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xYears: {
    one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F",
    two: "\u0639\u0627\u0645\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
    other: "{{count}} \u0639\u0627\u0645"
  },
  overXYears: {
    one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645",
    two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645\u064A\u0646",
    threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0623\u0639\u0648\u0627\u0645",
    other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0639\u0627\u0645"
  },
  almostXYears: {
    one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  }
};
var ar_MA_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  options = options || {};
  var usageGroup = ar_MA_lib_formatDistance_formatDistanceLocale[token];
  var result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace("{{count}}", String(count));
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0641\u064A \u062E\u0644\u0627\u0644 " + result;
    } else {
      return "\u0645\u0646\u0630 " + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_MA_lib_formatDistance = (ar_MA_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/formatLong/index.js

var ar_MA_lib_formatLong_dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var ar_MA_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var ar_MA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u0639\u0646\u062F' {{time}}",
  long: "{{date}} '\u0639\u0646\u062F' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ar_MA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_MA_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_MA_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_MA_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ar_MA_lib_formatLong = (ar_MA_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/formatRelative/index.js
var ar_MA_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0623\u062E\u0631' eeee '\u0639\u0646\u062F' p",
  yesterday: "'\u0623\u0645\u0633 \u0639\u0646\u062F' p",
  today: "'\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F' p",
  tomorrow: "'\u063A\u062F\u0627\u064B \u0639\u0646\u062F' p",
  nextWeek: "eeee '\u0639\u0646\u062F' p",
  other: "P"
};
var ar_MA_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ar_MA_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_MA_lib_formatRelative = (ar_MA_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/localize/index.js

var ar_MA_lib_localize_eraValues = {
  narrow: ["\u0642", "\u0628"],
  abbreviated: ["\u0642.\u0645.", "\u0628.\u0645."],
  wide: ["\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F", "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"]
};
var ar_MA_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u06311", "\u06312", "\u06313", "\u06314"],
  wide: ["\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"]
};
var ar_MA_lib_localize_monthValues = {
  narrow: ["\u064A", "\u0641", "\u0645", "\u0623", "\u0645", "\u064A", "\u064A", "\u063A", "\u0634", "\u0623", "\u0646", "\u062F"],
  abbreviated: ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A", "\u064A\u0648\u0646\u0640", "\u064A\u0648\u0644\u0640", "\u063A\u0634\u062A", "\u0634\u062A\u0646\u0640", "\u0623\u0643\u062A\u0640", "\u0646\u0648\u0646\u0640", "\u062F\u062C\u0646\u0640"],
  wide: ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648\u0632", "\u063A\u0634\u062A", "\u0634\u062A\u0646\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0646\u0628\u0631", "\u062F\u062C\u0646\u0628\u0631"]
};
var ar_MA_lib_localize_dayValues = {
  narrow: ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"],
  short: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  abbreviated: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u0640", "\u062B\u0644\u0627", "\u0623\u0631\u0628\u0640", "\u062E\u0645\u064A\u0640", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  wide: ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0625\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"]
};
var ar_MA_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  }
};
var ar_MA_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  }
};
var ar_MA_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber) {
  return String(dirtyNumber);
};
var ar_MA_lib_localize_localize = {
  ordinalNumber: ar_MA_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ar_MA_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ar_MA_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ar_MA_lib_localize = (ar_MA_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/_lib/match/index.js


var ar_MA_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var ar_MA_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ar_MA_lib_match_matchEraPatterns = {
  narrow: /^(ق|ب)/i,
  abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
var ar_MA_lib_match_parseEraPatterns = {
  any: [/^قبل/i, /^بعد/i]
};
var ar_MA_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ر[1234]/i,
  wide: /^الربع [1234]/i
};
var ar_MA_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ar_MA_lib_match_matchMonthPatterns = {
  narrow: /^[يفمأمسند]/i,
  abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i,
  wide: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i
};
var ar_MA_lib_match_parseMonthPatterns = {
  narrow: [/^ي/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ي/i, /^ي/i, /^غ/i, /^ش/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^ين/i, /^فب/i, /^مار/i, /^أب/i, /^ماي/i, /^يون/i, /^يول/i, /^غشت/i, /^ش/i, /^أك/i, /^ن/i, /^د/i]
};
var ar_MA_lib_match_matchDayPatterns = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|إثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|إثن|ثلا|أرب|خمي|جمعة|سبت)/i,
  wide: /^(الأحد|الإثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var ar_MA_lib_match_parseDayPatterns = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الإثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^إث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var ar_MA_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var ar_MA_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var ar_MA_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ar_MA_lib_match_matchOrdinalNumberPattern,
    parsePattern: ar_MA_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_MA_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_MA_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return Number(index) + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_MA_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_MA_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_MA_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ar_MA_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ar_MA_lib_match = (ar_MA_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-MA/index.js





var ar_MA_locale = {
  code: "ar-MA",
  formatDistance: ar_MA_lib_formatDistance,
  formatLong: ar_MA_lib_formatLong,
  formatRelative: ar_MA_lib_formatRelative,
  localize: ar_MA_lib_localize,
  match: ar_MA_lib_match,
  options: {
    // Monday is 1
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_MA = (ar_MA_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/formatDistance/index.js
var ar_SA_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  xSeconds: {
    one: "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u062B\u0627\u0646\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  halfAMinute: "\u0646\u0635\u0641 \u062F\u0642\u064A\u0642\u0629",
  lessThanXMinutes: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u0626\u0642",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  xMinutes: {
    one: "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062F\u0642\u0627\u0626\u0642",
    other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  aboutXHours: {
    one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xHours: {
    one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646",
    threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
    other: "{{count}} \u0633\u0627\u0639\u0629"
  },
  xDays: {
    one: "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F",
    two: "\u064A\u0648\u0645\u064A\u0646",
    threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
    other: "{{count}} \u064A\u0648\u0645"
  },
  aboutXWeeks: {
    one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0623\u0633\u0628\u0648\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xWeeks: {
    one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F",
    two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
    other: "{{count}} \u0623\u0633\u0628\u0648\u0639"
  },
  aboutXMonths: {
    one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xMonths: {
    one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F",
    two: "\u0634\u0647\u0631\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
    other: "{{count}} \u0634\u0647\u0631"
  },
  aboutXYears: {
    one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  },
  xYears: {
    one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F",
    two: "\u0639\u0627\u0645\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
    other: "{{count}} \u0639\u0627\u0645"
  },
  overXYears: {
    one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645",
    two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645\u064A\u0646",
    threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0623\u0639\u0648\u0627\u0645",
    other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0639\u0627\u0645"
  },
  almostXYears: {
    one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
    other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
  }
};
var ar_SA_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = ar_SA_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else if (count <= 10) {
    result = tokenValue.threeToTen.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0641\u064A \u062E\u0644\u0627\u0644 " + result;
    } else {
      return "\u0645\u0646\u0630 " + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_SA_lib_formatDistance = (ar_SA_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/formatLong/index.js

var ar_SA_lib_formatLong_dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var ar_SA_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var ar_SA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u0639\u0646\u062F' {{time}}",
  long: "{{date}} '\u0639\u0646\u062F' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ar_SA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_SA_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_SA_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_SA_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ar_SA_lib_formatLong = (ar_SA_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/formatRelative/index.js
var ar_SA_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0623\u062E\u0631' eeee '\u0639\u0646\u062F' p",
  yesterday: "'\u0623\u0645\u0633 \u0639\u0646\u062F' p",
  today: "'\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F' p",
  tomorrow: "'\u063A\u062F\u0627\u064B \u0639\u0646\u062F' p",
  nextWeek: "eeee '\u0639\u0646\u062F' p",
  other: "P"
};
var ar_SA_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ar_SA_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_SA_lib_formatRelative = (ar_SA_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/localize/index.js

var ar_SA_lib_localize_eraValues = {
  narrow: ["\u0642", "\u0628"],
  abbreviated: ["\u0642.\u0645.", "\u0628.\u0645."],
  wide: ["\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F", "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"]
};
var ar_SA_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u06311", "\u06312", "\u06313", "\u06314"],
  wide: ["\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"]
};
var ar_SA_lib_localize_monthValues = {
  narrow: ["\u064A", "\u0641", "\u0645", "\u0623", "\u0645", "\u064A", "\u064A", "\u0623", "\u0633", "\u0623", "\u0646", "\u062F"],
  abbreviated: ["\u064A\u0646\u0627", "\u0641\u0628\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u0640", "\u064A\u0648\u0644\u0640", "\u0623\u063A\u0633\u0640", "\u0633\u0628\u062A\u0640", "\u0623\u0643\u062A\u0640", "\u0646\u0648\u0641\u0640", "\u062F\u064A\u0633\u0640"],
  wide: ["\u064A\u0646\u0627\u064A\u0631", "\u0641\u0628\u0631\u0627\u064A\u0631", "\u0645\u0627\u0631\u0633", "\u0623\u0628\u0631\u064A\u0644", "\u0645\u0627\u064A\u0648", "\u064A\u0648\u0646\u064A\u0648", "\u064A\u0648\u0644\u064A\u0648", "\u0623\u063A\u0633\u0637\u0633", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"]
};
var ar_SA_lib_localize_dayValues = {
  narrow: ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"],
  short: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  abbreviated: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u0640", "\u062B\u0644\u0627", "\u0623\u0631\u0628\u0640", "\u062E\u0645\u064A\u0640", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  wide: ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"]
};
var ar_SA_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
    night: "\u0644\u064A\u0644\u0627\u064B"
  }
};
var ar_SA_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  },
  wide: {
    am: "\u0635",
    pm: "\u0645",
    midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
    evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
  }
};
var ar_SA_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber) {
  return String(dirtyNumber);
};
var ar_SA_lib_localize_localize = {
  ordinalNumber: ar_SA_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ar_SA_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ar_SA_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ar_SA_lib_localize = (ar_SA_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/_lib/match/index.js


var ar_SA_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var ar_SA_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ar_SA_lib_match_matchEraPatterns = {
  narrow: /^(ق|ب)/i,
  abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
  wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
var ar_SA_lib_match_parseEraPatterns = {
  any: [/^قبل/i, /^بعد/i]
};
var ar_SA_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ر[1234]/i,
  wide: /^الربع [1234]/i
};
var ar_SA_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ar_SA_lib_match_matchMonthPatterns = {
  narrow: /^[يفمأمسند]/i,
  abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i,
  wide: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i
};
var ar_SA_lib_match_parseMonthPatterns = {
  narrow: [/^ي/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ي/i, /^ي/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^ين/i, /^ف/i, /^مار/i, /^أب/i, /^ماي/i, /^يون/i, /^يول/i, /^أغ/i, /^س/i, /^أك/i, /^ن/i, /^د/i]
};
var ar_SA_lib_match_matchDayPatterns = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var ar_SA_lib_match_parseDayPatterns = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var ar_SA_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var ar_SA_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var ar_SA_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ar_SA_lib_match_matchOrdinalNumberPattern,
    parsePattern: ar_SA_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_SA_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_SA_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_SA_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_SA_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_SA_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ar_SA_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ar_SA_lib_match = (ar_SA_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-SA/index.js





var ar_SA_locale = {
  code: "ar-SA",
  formatDistance: ar_SA_lib_formatDistance,
  formatLong: ar_SA_lib_formatLong,
  formatRelative: ar_SA_lib_formatRelative,
  localize: ar_SA_lib_localize,
  match: ar_SA_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_SA = (ar_SA_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/formatDistance/index.js
var ar_TN_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u0632\u0648\u0632 \u062B\u0648\u0627\u0646\u064A",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  xSeconds: {
    one: "\u062B\u0627\u0646\u064A\u0629",
    two: "\u0632\u0648\u0632 \u062B\u0648\u0627\u0646\u064A",
    threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
    other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
  },
  halfAMinute: "\u0646\u0635 \u062F\u0642\u064A\u0642\u0629",
  lessThanXMinutes: {
    one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
    two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u064A\u0642",
    other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  xMinutes: {
    one: "\u062F\u0642\u064A\u0642\u0629",
    two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062F\u0642\u0627\u064A\u0642",
    other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
  },
  aboutXHours: {
    one: "\u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
    threeToTen: "{{count}} \u0633\u0648\u0627\u064A\u0639 \u062A\u0642\u0631\u064A\u0628",
    other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628"
  },
  xHours: {
    one: "\u0633\u0627\u0639\u0629",
    two: "\u0633\u0627\u0639\u062A\u064A\u0646",
    threeToTen: "{{count}} \u0633\u0648\u0627\u064A\u0639",
    other: "{{count}} \u0633\u0627\u0639\u0629"
  },
  xDays: {
    one: "\u0646\u0647\u0627\u0631",
    two: "\u0646\u0647\u0627\u0631\u064A\u0646",
    threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
    other: "{{count}} \u064A\u0648\u0645"
  },
  aboutXWeeks: {
    one: "\u062C\u0645\u0639\u0629 \u062A\u0642\u0631\u064A\u0628",
    two: "\u062C\u0645\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
    threeToTen: "{{count}} \u062C\u0645\u0627\u0639 \u062A\u0642\u0631\u064A\u0628",
    other: "{{count}} \u062C\u0645\u0639\u0629 \u062A\u0642\u0631\u064A\u0628"
  },
  xWeeks: {
    one: "\u062C\u0645\u0639\u0629",
    two: "\u062C\u0645\u0639\u062A\u064A\u0646",
    threeToTen: "{{count}} \u062C\u0645\u0627\u0639",
    other: "{{count}} \u062C\u0645\u0639\u0629"
  },
  aboutXMonths: {
    one: "\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628",
    two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631\u0629 \u062A\u0642\u0631\u064A\u0628",
    other: "{{count}} \u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628"
  },
  xMonths: {
    one: "\u0634\u0647\u0631",
    two: "\u0634\u0647\u0631\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0634\u0647\u0631\u0629",
    other: "{{count}} \u0634\u0647\u0631"
  },
  aboutXYears: {
    one: "\u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628",
    two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628",
    other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628"
  },
  xYears: {
    one: "\u0639\u0627\u0645",
    two: "\u0639\u0627\u0645\u064A\u0646",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
    other: "{{count}} \u0639\u0627\u0645"
  },
  overXYears: {
    one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645",
    two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645\u064A\u0646",
    threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0623\u0639\u0648\u0627\u0645",
    other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0639\u0627\u0645"
  },
  almostXYears: {
    one: "\u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628",
    two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
    threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628",
    other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628"
  }
};
var ar_TN_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var usageGroup = ar_TN_lib_formatDistance_formatDistanceLocale[token];
  var result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else if (count === 2) {
    result = usageGroup.two;
  } else if (count <= 10) {
    result = usageGroup.threeToTen.replace("{{count}}", String(count));
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0641\u064A " + result;
    } else {
      return "\u0639\u0646\u062F\u0648 " + result;
    }
  }
  return result;
};
/* harmony default export */ const ar_TN_lib_formatDistance = (ar_TN_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/formatLong/index.js

var ar_TN_lib_formatLong_dateFormats = {
  full: "EEEE\u060C do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "dd/MM/yyyy"
};
var ar_TN_lib_formatLong_timeFormats = {
  full: "HH:mm:ss",
  long: "HH:mm:ss",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var ar_TN_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u0645\u0639' {{time}}",
  long: "{{date}} '\u0645\u0639' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ar_TN_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_TN_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_TN_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ar_TN_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ar_TN_lib_formatLong = (ar_TN_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/formatRelative/index.js
var ar_TN_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee '\u0625\u0644\u064A \u0641\u0627\u062A \u0645\u0639' p",
  yesterday: "'\u0627\u0644\u0628\u0627\u0631\u062D \u0645\u0639' p",
  today: "'\u0627\u0644\u064A\u0648\u0645 \u0645\u0639' p",
  tomorrow: "'\u063A\u062F\u0648\u0629 \u0645\u0639' p",
  nextWeek: "eeee '\u0627\u0644\u062C\u0645\u0639\u0629 \u0627\u0644\u062C\u0627\u064A\u0629 \u0645\u0639' p '\u0646\u0647\u0627\u0631'",
  other: "P"
};
var ar_TN_lib_formatRelative_formatRelative = function formatRelative2(token) {
  return ar_TN_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ar_TN_lib_formatRelative = (ar_TN_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/localize/index.js

var ar_TN_lib_localize_eraValues = {
  narrow: ["\u0642", "\u0628"],
  abbreviated: ["\u0642.\u0645.", "\u0628.\u0645."],
  wide: ["\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F", "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"]
};
var ar_TN_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u06311", "\u06312", "\u06313", "\u06314"],
  wide: ["\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B", "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"]
};
var ar_TN_lib_localize_monthValues = {
  narrow: ["\u062F", "\u0646", "\u0623", "\u0633", "\u0623", "\u062C", "\u062C", "\u0645", "\u0623", "\u0645", "\u0641", "\u062C"],
  abbreviated: ["\u062C\u0627\u0646\u0641\u064A", "\u0641\u064A\u0641\u0631\u064A", "\u0645\u0627\u0631\u0633", "\u0623\u0641\u0631\u064A\u0644", "\u0645\u0627\u064A", "\u062C\u0648\u0627\u0646", "\u062C\u0648\u064A\u0644\u064A\u0629", "\u0623\u0648\u062A", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"],
  wide: ["\u062C\u0627\u0646\u0641\u064A", "\u0641\u064A\u0641\u0631\u064A", "\u0645\u0627\u0631\u0633", "\u0623\u0641\u0631\u064A\u0644", "\u0645\u0627\u064A", "\u062C\u0648\u0627\u0646", "\u062C\u0648\u064A\u0644\u064A\u0629", "\u0623\u0648\u062A", "\u0633\u0628\u062A\u0645\u0628\u0631", "\u0623\u0643\u062A\u0648\u0628\u0631", "\u0646\u0648\u0641\u0645\u0628\u0631", "\u062F\u064A\u0633\u0645\u0628\u0631"]
};
var ar_TN_lib_localize_dayValues = {
  narrow: ["\u062D", "\u0646", "\u062B", "\u0631", "\u062E", "\u062C", "\u0633"],
  short: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  abbreviated: ["\u0623\u062D\u062F", "\u0627\u062B\u0646\u064A\u0646", "\u062B\u0644\u0627\u062B\u0627\u0621", "\u0623\u0631\u0628\u0639\u0627\u0621", "\u062E\u0645\u064A\u0633", "\u062C\u0645\u0639\u0629", "\u0633\u0628\u062A"],
  wide: ["\u0627\u0644\u0623\u062D\u062F", "\u0627\u0644\u0627\u062B\u0646\u064A\u0646", "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621", "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621", "\u0627\u0644\u062E\u0645\u064A\u0633", "\u0627\u0644\u062C\u0645\u0639\u0629", "\u0627\u0644\u0633\u0628\u062A"]
};
var ar_TN_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0639",
    morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    evening: "\u0627\u0644\u0639\u0634\u064A\u0629",
    night: "\u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0639",
    morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    evening: "\u0627\u0644\u0639\u0634\u064A\u0629",
    night: "\u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
  },
  wide: {
    am: "\u0635",
    pm: "\u0639",
    morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    evening: "\u0627\u0644\u0639\u0634\u064A\u0629",
    night: "\u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
  }
};
var ar_TN_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0635",
    pm: "\u0639",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0641\u064A \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    evening: "\u0641\u064A \u0627\u0644\u0639\u0634\u064A\u0629",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
  },
  abbreviated: {
    am: "\u0635",
    pm: "\u0639",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0641\u064A \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    evening: "\u0641\u064A \u0627\u0644\u0639\u0634\u064A\u0629",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
  },
  wide: {
    am: "\u0635",
    pm: "\u0639",
    morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
    noon: "\u0641\u064A \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
    evening: "\u0641\u064A \u0627\u0644\u0639\u0634\u064A\u0629",
    night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
    midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
  }
};
var ar_TN_lib_localize_ordinalNumber = function ordinalNumber2(num) {
  return String(num);
};
var ar_TN_lib_localize_localize = {
  ordinalNumber: ar_TN_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ar_TN_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ar_TN_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ar_TN_lib_localize = (ar_TN_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/_lib/match/index.js


var ar_TN_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var ar_TN_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ar_TN_lib_match_matchEraPatterns = {
  narrow: /[قب]/,
  abbreviated: /[قب]\.م\./,
  wide: /(قبل|بعد) الميلاد/
};
var ar_TN_lib_match_parseEraPatterns = {
  any: [/قبل/, /بعد/]
};
var ar_TN_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /ر[1234]/,
  wide: /الربع (الأول|الثاني|الثالث|الرابع)/
};
var ar_TN_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ar_TN_lib_match_matchMonthPatterns = {
  narrow: /^[جفمأسند]/,
  abbreviated: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,
  wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
};
var ar_TN_lib_match_parseMonthPatterns = {
  narrow: [/^ج/i, /^ف/i, /^م/i, /^أ/i, /^م/i, /^ج/i, /^ج/i, /^أ/i, /^س/i, /^أ/i, /^ن/i, /^د/i],
  any: [/^جانفي/i, /^فيفري/i, /^مارس/i, /^أفريل/i, /^ماي/i, /^جوان/i, /^جويلية/i, /^أوت/i, /^سبتمبر/i, /^أكتوبر/i, /^نوفمبر/i, /^ديسمبر/i]
};
var ar_TN_lib_match_matchDayPatterns = {
  narrow: /^[حنثرخجس]/i,
  short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
  wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
var ar_TN_lib_match_parseDayPatterns = {
  narrow: [/^ح/i, /^ن/i, /^ث/i, /^ر/i, /^خ/i, /^ج/i, /^س/i],
  wide: [/^الأحد/i, /^الاثنين/i, /^الثلاثاء/i, /^الأربعاء/i, /^الخميس/i, /^الجمعة/i, /^السبت/i],
  any: [/^أح/i, /^اث/i, /^ث/i, /^أر/i, /^خ/i, /^ج/i, /^س/i]
};
var ar_TN_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ص|ع|ن ل|ل|(في|مع) (صباح|قايلة|عشية|ليل))/,
  any: /^([صع]|نص الليل|قايلة|(في|مع) (صباح|قايلة|عشية|ليل))/
};
var ar_TN_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ص/,
    pm: /^ع/,
    midnight: /نص الليل/,
    noon: /قايلة/,
    afternoon: /بعد القايلة/,
    morning: /صباح/,
    evening: /عشية/,
    night: /ليل/
  }
};
var ar_TN_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ar_TN_lib_match_matchOrdinalNumberPattern,
    parsePattern: ar_TN_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_TN_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_TN_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_TN_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ar_TN_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ar_TN_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ar_TN_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ar_TN_lib_match = (ar_TN_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ar-TN/index.js





var ar_TN_locale = {
  code: "ar-TN",
  formatDistance: ar_TN_lib_formatDistance,
  formatLong: ar_TN_lib_formatLong,
  formatRelative: ar_TN_lib_formatRelative,
  localize: ar_TN_lib_localize,
  match: ar_TN_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ar_TN = (ar_TN_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/formatDistance/index.js
var az_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "bir saniy\u0259d\u0259n az",
    other: "{{count}} bir saniy\u0259d\u0259n az"
  },
  xSeconds: {
    one: "1 saniy\u0259",
    other: "{{count}} saniy\u0259"
  },
  halfAMinute: "yar\u0131m d\u0259qiq\u0259",
  lessThanXMinutes: {
    one: "bir d\u0259qiq\u0259d\u0259n az",
    other: "{{count}} bir d\u0259qiq\u0259d\u0259n az"
  },
  xMinutes: {
    one: "bir d\u0259qiq\u0259",
    other: "{{count}} d\u0259qiq\u0259"
  },
  aboutXHours: {
    one: "t\u0259xmin\u0259n 1 saat",
    other: "t\u0259xmin\u0259n {{count}} saat"
  },
  xHours: {
    one: "1 saat",
    other: "{{count}} saat"
  },
  xDays: {
    one: "1 g\xFCn",
    other: "{{count}} g\xFCn"
  },
  aboutXWeeks: {
    one: "t\u0259xmin\u0259n 1 h\u0259ft\u0259",
    other: "t\u0259xmin\u0259n {{count}} h\u0259ft\u0259"
  },
  xWeeks: {
    one: "1 h\u0259ft\u0259",
    other: "{{count}} h\u0259ft\u0259"
  },
  aboutXMonths: {
    one: "t\u0259xmin\u0259n 1 ay",
    other: "t\u0259xmin\u0259n {{count}} ay"
  },
  xMonths: {
    one: "1 ay",
    other: "{{count}} ay"
  },
  aboutXYears: {
    one: "t\u0259xmin\u0259n 1 il",
    other: "t\u0259xmin\u0259n {{count}} il"
  },
  xYears: {
    one: "1 il",
    other: "{{count}} il"
  },
  overXYears: {
    one: "1 ild\u0259n \xE7ox",
    other: "{{count}} ild\u0259n \xE7ox"
  },
  almostXYears: {
    one: "dem\u0259k olar ki 1 il",
    other: "dem\u0259k olar ki {{count}} il"
  }
};
var az_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = az_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " sonra";
    } else {
      return result + " \u0259vv\u0259l";
    }
  }
  return result;
};
/* harmony default export */ const az_lib_formatDistance = (az_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/formatLong/index.js

var az_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y 'il'",
  long: "do MMMM y 'il'",
  medium: "d MMM y 'il'",
  short: "dd.MM.yyyy"
};
var az_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var az_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}} - 'd\u0259'",
  long: "{{date}} {{time}} - 'd\u0259'",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var az_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: az_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: az_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: az_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const az_lib_formatLong = (az_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/formatRelative/index.js
var az_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'sonuncu' eeee p -'d\u0259'",
  yesterday: "'d\xFCn\u0259n' p -'d\u0259'",
  today: "'bug\xFCn' p -'d\u0259'",
  tomorrow: "'sabah' p -'d\u0259'",
  nextWeek: "eeee p -'d\u0259'",
  other: "P"
};
var az_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return az_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const az_lib_formatRelative = (az_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/localize/index.js

var az_lib_localize_eraValues = {
  narrow: ["e.\u0259", "b.e"],
  abbreviated: ["e.\u0259", "b.e"],
  wide: ["eram\u0131zdan \u0259vv\u0259l", "bizim era"]
};
var az_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1ci kvartal", "2ci kvartal", "3c\xFC kvartal", "4c\xFC kvartal"]
};
var az_lib_localize_monthValues = {
  narrow: ["Y", "F", "M", "A", "M", "\u0130", "\u0130", "A", "S", "O", "N", "D"],
  abbreviated: ["Yan", "Fev", "Mar", "Apr", "May", "\u0130yun", "\u0130yul", "Avq", "Sen", "Okt", "Noy", "Dek"],
  wide: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "\u0130yun", "\u0130yul", "Avqust", "Sentyabr", "Oktyabr", "Noyabr", "Dekabr"]
};
var az_lib_localize_dayValues = {
  narrow: ["B.", "B.e", "\xC7.a", "\xC7.", "C.a", "C.", "\u015E."],
  short: ["B.", "B.e", "\xC7.a", "\xC7.", "C.a", "C.", "\u015E."],
  abbreviated: ["Baz", "Baz.e", "\xC7\u0259r.a", "\xC7\u0259r", "C\xFCm.a", "C\xFCm", "\u015E\u0259"],
  wide: ["Bazar", "Bazar ert\u0259si", "\xC7\u0259r\u015F\u0259nb\u0259 ax\u015Fam\u0131", "\xC7\u0259r\u015F\u0259nb\u0259", "C\xFCm\u0259 ax\u015Fam\u0131", "C\xFCm\u0259", "\u015E\u0259nb\u0259"]
};
var az_lib_localize_dayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "gec\u0259yar\u0131",
    noon: "g\xFCn",
    morning: "s\u0259h\u0259r",
    afternoon: "g\xFCnd\xFCz",
    evening: "ax\u015Fam",
    night: "gec\u0259"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "gec\u0259yar\u0131",
    noon: "g\xFCn",
    morning: "s\u0259h\u0259r",
    afternoon: "g\xFCnd\xFCz",
    evening: "ax\u015Fam",
    night: "gec\u0259"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gec\u0259yar\u0131",
    noon: "g\xFCn",
    morning: "s\u0259h\u0259r",
    afternoon: "g\xFCnd\xFCz",
    evening: "ax\u015Fam",
    night: "gec\u0259"
  }
};
var az_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "gec\u0259yar\u0131",
    noon: "g\xFCn",
    morning: "s\u0259h\u0259r",
    afternoon: "g\xFCnd\xFCz",
    evening: "ax\u015Fam",
    night: "gec\u0259"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "gec\u0259yar\u0131",
    noon: "g\xFCn",
    morning: "s\u0259h\u0259r",
    afternoon: "g\xFCnd\xFCz",
    evening: "ax\u015Fam",
    night: "gec\u0259"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gec\u0259yar\u0131",
    noon: "g\xFCn",
    morning: "s\u0259h\u0259r",
    afternoon: "g\xFCnd\xFCz",
    evening: "ax\u015Fam",
    night: "gec\u0259"
  }
};
var suffixes = {
  1: "-inci",
  5: "-inci",
  8: "-inci",
  70: "-inci",
  80: "-inci",
  2: "-nci",
  7: "-nci",
  20: "-nci",
  50: "-nci",
  3: "-\xFCnc\xFC",
  4: "-\xFCnc\xFC",
  100: "-\xFCnc\xFC",
  6: "-nc\u0131",
  9: "-uncu",
  10: "-uncu",
  30: "-uncu",
  60: "-\u0131nc\u0131",
  90: "-\u0131nc\u0131"
};
var getSuffix = function getSuffix2(number) {
  if (number === 0) {
    return number + "-\u0131nc\u0131";
  }
  var a = number % 10;
  var b = number % 100 - a;
  var c = number >= 100 ? 100 : null;
  if (suffixes[a]) {
    return suffixes[a];
  } else if (suffixes[b]) {
    return suffixes[b];
  } else if (c !== null) {
    return suffixes[c];
  }
  return "";
};
var az_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var suffix = getSuffix(number);
  return number + suffix;
};
var az_lib_localize_localize = {
  ordinalNumber: az_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: az_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: az_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const az_lib_localize = (az_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/_lib/match/index.js


var az_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(ci|inci|nci|uncu|üncü|ncı))?/i;
var az_lib_match_parseOrdinalNumberPattern = /\d+/i;
var az_lib_match_matchEraPatterns = {
  narrow: /^(b|a)$/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)$/i,
  wide: /^(bizim eradan əvvəl|bizim era)$/i
};
var az_lib_match_parseEraPatterns = {
  any: [/^b$/i, /^(a|c)$/i]
};
var az_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]$/i,
  abbreviated: /^K[1234]$/i,
  wide: /^[1234](ci)? kvartal$/i
};
var az_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var az_lib_match_matchMonthPatterns = {
  narrow: /^[(?-i)yfmaisond]$/i,
  abbreviated: /^(Yan|Fev|Mar|Apr|May|İyun|İyul|Avq|Sen|Okt|Noy|Dek)$/i,
  wide: /^(Yanvar|Fevral|Mart|Aprel|May|İyun|İyul|Avgust|Sentyabr|Oktyabr|Noyabr|Dekabr)$/i
};
var az_lib_match_parseMonthPatterns = {
  narrow: [/^[(?-i)y]$/i, /^[(?-i)f]$/i, /^[(?-i)m]$/i, /^[(?-i)a]$/i, /^[(?-i)m]$/i, /^[(?-i)i]$/i, /^[(?-i)i]$/i, /^[(?-i)a]$/i, /^[(?-i)s]$/i, /^[(?-i)o]$/i, /^[(?-i)n]$/i, /^[(?-i)d]$/i],
  abbreviated: [/^Yan$/i, /^Fev$/i, /^Mar$/i, /^Apr$/i, /^May$/i, /^İyun$/i, /^İyul$/i, /^Avg$/i, /^Sen$/i, /^Okt$/i, /^Noy$/i, /^Dek$/i],
  wide: [/^Yanvar$/i, /^Fevral$/i, /^Mart$/i, /^Aprel$/i, /^May$/i, /^İyun$/i, /^İyul$/i, /^Avgust$/i, /^Sentyabr$/i, /^Oktyabr$/i, /^Noyabr$/i, /^Dekabr$/i]
};
var az_lib_match_matchDayPatterns = {
  narrow: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
  short: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
  abbreviated: /^(Baz\.e|Çər|Çər\.a|Cüm|Cüm\.a|Şə)$/i,
  wide: /^(Bazar|Bazar ertəsi|Çərşənbə axşamı|Çərşənbə|Cümə axşamı|Cümə|Şənbə)$/i
};
var az_lib_match_parseDayPatterns = {
  narrow: [/^B\.$/i, /^B\.e$/i, /^Ç\.a$/i, /^Ç\.$/i, /^C\.a$/i, /^C\.$/i, /^Ş\.$/i],
  abbreviated: [/^Baz$/i, /^Baz\.e$/i, /^Çər\.a$/i, /^Çər$/i, /^Cüm\.a$/i, /^Cüm$/i, /^Şə$/i],
  wide: [/^Bazar$/i, /^Bazar ertəsi$/i, /^Çərşənbə axşamı$/i, /^Çərşənbə$/i, /^Cümə axşamı$/i, /^Cümə$/i, /^Şənbə$/i],
  any: [/^B\.$/i, /^B\.e$/i, /^Ç\.a$/i, /^Ç\.$/i, /^C\.a$/i, /^C\.$/i, /^Ş\.$/i]
};
var az_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i,
  any: /^(am|pm|a\.m\.|p\.m\.|AM|PM|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i
};
var az_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /^gecəyarı$/i,
    noon: /^gün$/i,
    morning: /səhər$/i,
    afternoon: /gündüz$/i,
    evening: /axşam$/i,
    night: /gecə$/i
  }
};
var az_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: az_lib_match_matchOrdinalNumberPattern,
    parsePattern: az_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: az_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: az_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: az_lib_match_parseMonthPatterns,
    defaultParseWidth: "narrow"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: az_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: az_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: az_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const az_lib_match = (az_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/az/index.js





var az_locale = {
  code: "az",
  formatDistance: az_lib_formatDistance,
  formatLong: az_lib_formatLong,
  formatRelative: az_lib_formatRelative,
  localize: az_lib_localize,
  match: az_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const az = (az_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/formatDistance/index.js
function declension(scheme, count) {
  if (scheme.one !== void 0 && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}
function buildLocalizeTokenFn(scheme) {
  return function(count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return declension(scheme.future, count);
        } else {
          return "\u043F\u0440\u0430\u0437 " + declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return declension(scheme.past, count);
        } else {
          return declension(scheme.regular, count) + " \u0442\u0430\u043C\u0443";
        }
      }
    } else {
      return declension(scheme.regular, count);
    }
  };
}
var halfAMinute = function halfAMinute2(_, options) {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u043F\u0440\u0430\u0437 \u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B";
    } else {
      return "\u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B \u0442\u0430\u043C\u0443";
    }
  }
  return "\u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B";
};
var be_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: buildLocalizeTokenFn({
    regular: {
      one: "\u043C\u0435\u043D\u0448 \u0437\u0430 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    future: {
      one: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    }
  }),
  xSeconds: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    past: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443 \u0442\u0430\u043C\u0443",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B \u0442\u0430\u043C\u0443",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0442\u0430\u043C\u0443"
    },
    future: {
      singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    }
  }),
  halfAMinute,
  lessThanXMinutes: buildLocalizeTokenFn({
    regular: {
      one: "\u043C\u0435\u043D\u0448 \u0437\u0430 \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
    },
    future: {
      one: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
    }
  }),
  xMinutes: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0430",
      singularGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
      pluralGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
    },
    past: {
      singularNominative: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443 \u0442\u0430\u043C\u0443",
      singularGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B \u0442\u0430\u043C\u0443",
      pluralGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D \u0442\u0430\u043C\u0443"
    },
    future: {
      singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
      pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
    }
  }),
  aboutXHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
      singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D",
      pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
    },
    future: {
      singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443",
      singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
      pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
    }
  }),
  xHours: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0430",
      singularGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
      pluralGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
    },
    past: {
      singularNominative: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443 \u0442\u0430\u043C\u0443",
      singularGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B \u0442\u0430\u043C\u0443",
      pluralGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D \u0442\u0430\u043C\u0443"
    },
    future: {
      singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443",
      singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
      pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
    }
  }),
  xDays: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0434\u0437\u0435\u043D\u044C",
      singularGenitive: "{{count}} \u0434\u043D\u0456",
      pluralGenitive: "{{count}} \u0434\u0437\u0451\u043D"
    }
  }),
  aboutXWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
      // TODO
      singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E",
      // TODO
      pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
      // TODO
    },
    future: {
      singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446",
      // TODO
      singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
      // TODO
      pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
      // TODO
    }
  }),
  xWeeks: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u043C\u0435\u0441\u044F\u0446",
      singularGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
      pluralGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
    }
  }),
  aboutXMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
      singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E",
      pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
    },
    future: {
      singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446",
      singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
      pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
    }
  }),
  xMonths: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u043C\u0435\u0441\u044F\u0446",
      singularGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
      pluralGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
    }
  }),
  aboutXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0433\u043E\u0434\u0430",
      singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u043E\u045E",
      pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u043E\u045E"
    },
    future: {
      singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
    }
  }),
  xYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0433\u043E\u0434",
      singularGenitive: "{{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "{{count}} \u0433\u0430\u0434\u043E\u045E"
    }
  }),
  overXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u0430\u0434\u043E\u045E"
    },
    future: {
      singularNominative: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
    }
  }),
  almostXYears: buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u0430\u0434\u043E\u045E"
    },
    future: {
      singularNominative: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
    }
  })
};
var be_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  options = options || {};
  return be_lib_formatDistance_formatDistanceLocale[token](count, options);
};
/* harmony default export */ const be_lib_formatDistance = (be_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/formatLong/index.js

var be_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM y '\u0433.'",
  long: "d MMMM y '\u0433.'",
  medium: "d MMM y '\u0433.'",
  short: "dd.MM.y"
};
var be_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var be_lib_formatLong_dateTimeFormats = {
  any: "{{date}}, {{time}}"
};
var be_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: be_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: be_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: be_lib_formatLong_dateTimeFormats,
    defaultWidth: "any"
  })
};
/* harmony default export */ const be_lib_formatLong = (be_lib_formatLong_formatLong);

// EXTERNAL MODULE: ./node_modules/date-fns/esm/toDate/index.js
var toDate = __webpack_require__(54453);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/_lib/requiredArgs/index.js
var requiredArgs = __webpack_require__(71769);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
var startOfUTCWeek = __webpack_require__(37021);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/_lib/isSameUTCWeek/index.js


function isSameUTCWeek(dirtyDateLeft, dirtyDateRight, options) {
  (0,requiredArgs/* default */.Z)(2, arguments);
  var dateLeftStartOfWeek = (0,startOfUTCWeek/* default */.Z)(dirtyDateLeft, options);
  var dateRightStartOfWeek = (0,startOfUTCWeek/* default */.Z)(dirtyDateRight, options);
  return dateLeftStartOfWeek.getTime() === dateRightStartOfWeek.getTime();
}

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/formatRelative/index.js


var accusativeWeekdays = ["\u043D\u044F\u0434\u0437\u0435\u043B\u044E", "\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A", "\u0430\u045E\u0442\u043E\u0440\u0430\u043A", "\u0441\u0435\u0440\u0430\u0434\u0443", "\u0447\u0430\u0446\u0432\u0435\u0440", "\u043F\u044F\u0442\u043D\u0456\u0446\u0443", "\u0441\u0443\u0431\u043E\u0442\u0443"];
function lastWeek(day) {
  var weekday = accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'\u0443 \u043C\u0456\u043D\u0443\u043B\u0443\u044E " + weekday + " \u0430' p";
    case 1:
    case 2:
    case 4:
      return "'\u0443 \u043C\u0456\u043D\u0443\u043B\u044B " + weekday + " \u0430' p";
  }
}
function thisWeek(day) {
  var weekday = accusativeWeekdays[day];
  return "'\u0443 " + weekday + " \u0430' p";
}
function nextWeek(day) {
  var weekday = accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0443\u044E " + weekday + " \u0430' p";
    case 1:
    case 2:
    case 4:
      return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u044B " + weekday + " \u0430' p";
  }
}
var lastWeekFormat = function lastWeekFormat2(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek(day);
  } else {
    return lastWeek(day);
  }
};
var nextWeekFormat = function nextWeekFormat2(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return thisWeek(day);
  } else {
    return nextWeek(day);
  }
};
var be_lib_formatRelative_formatRelativeLocale = {
  lastWeek: lastWeekFormat,
  yesterday: "'\u0443\u0447\u043E\u0440\u0430 \u0430' p",
  today: "'\u0441\u0451\u043D\u043D\u044F \u0430' p",
  tomorrow: "'\u0437\u0430\u045E\u0442\u0440\u0430 \u0430' p",
  nextWeek: nextWeekFormat,
  other: "P"
};
var be_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = be_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const be_lib_formatRelative = (be_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/localize/index.js

var be_lib_localize_eraValues = {
  narrow: ["\u0434\u0430 \u043D.\u044D.", "\u043D.\u044D."],
  abbreviated: ["\u0434\u0430 \u043D. \u044D.", "\u043D. \u044D."],
  wide: ["\u0434\u0430 \u043D\u0430\u0448\u0430\u0439 \u044D\u0440\u044B", "\u043D\u0430\u0448\u0430\u0439 \u044D\u0440\u044B"]
};
var be_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-\u044B \u043A\u0432.", "2-\u0456 \u043A\u0432.", "3-\u0456 \u043A\u0432.", "4-\u044B \u043A\u0432."],
  wide: ["1-\u044B \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "2-\u0456 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "3-\u0456 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "4-\u044B \u043A\u0432\u0430\u0440\u0442\u0430\u043B"]
};
var be_lib_localize_monthValues = {
  narrow: ["\u0421", "\u041B", "\u0421", "\u041A", "\u041C", "\u0427", "\u041B", "\u0416", "\u0412", "\u041A", "\u041B", "\u0421"],
  abbreviated: ["\u0441\u0442\u0443\u0434\u0437.", "\u043B\u044E\u0442.", "\u0441\u0430\u043A.", "\u043A\u0440\u0430\u0441.", "\u043C\u0430\u0439", "\u0447\u044D\u0440\u0432.", "\u043B\u0456\u043F.", "\u0436\u043D.", "\u0432\u0435\u0440.", "\u043A\u0430\u0441\u0442\u0440.", "\u043B\u0456\u0441\u0442.", "\u0441\u043D\u0435\u0436."],
  wide: ["\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044C", "\u043B\u044E\u0442\u044B", "\u0441\u0430\u043A\u0430\u0432\u0456\u043A", "\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A", "\u043C\u0430\u0439", "\u0447\u044D\u0440\u0432\u0435\u043D\u044C", "\u043B\u0456\u043F\u0435\u043D\u044C", "\u0436\u043D\u0456\u0432\u0435\u043D\u044C", "\u0432\u0435\u0440\u0430\u0441\u0435\u043D\u044C", "\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A", "\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434", "\u0441\u043D\u0435\u0436\u0430\u043D\u044C"]
};
var formattingMonthValues = {
  narrow: ["\u0421", "\u041B", "\u0421", "\u041A", "\u041C", "\u0427", "\u041B", "\u0416", "\u0412", "\u041A", "\u041B", "\u0421"],
  abbreviated: ["\u0441\u0442\u0443\u0434\u0437.", "\u043B\u044E\u0442.", "\u0441\u0430\u043A.", "\u043A\u0440\u0430\u0441.", "\u043C\u0430\u044F", "\u0447\u044D\u0440\u0432.", "\u043B\u0456\u043F.", "\u0436\u043D.", "\u0432\u0435\u0440.", "\u043A\u0430\u0441\u0442\u0440.", "\u043B\u0456\u0441\u0442.", "\u0441\u043D\u0435\u0436."],
  wide: ["\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044F", "\u043B\u044E\u0442\u0430\u0433\u0430", "\u0441\u0430\u043A\u0430\u0432\u0456\u043A\u0430", "\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A\u0430", "\u043C\u0430\u044F", "\u0447\u044D\u0440\u0432\u0435\u043D\u044F", "\u043B\u0456\u043F\u0435\u043D\u044F", "\u0436\u043D\u0456\u045E\u043D\u044F", "\u0432\u0435\u0440\u0430\u0441\u043D\u044F", "\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A\u0430", "\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434\u0430", "\u0441\u043D\u0435\u0436\u043D\u044F"]
};
var be_lib_localize_dayValues = {
  narrow: ["\u041D", "\u041F", "\u0410", "\u0421", "\u0427", "\u041F", "\u0421"],
  short: ["\u043D\u0434", "\u043F\u043D", "\u0430\u045E", "\u0441\u0440", "\u0447\u0446", "\u043F\u0442", "\u0441\u0431"],
  abbreviated: ["\u043D\u044F\u0434\u0437", "\u043F\u0430\u043D", "\u0430\u045E\u0442", "\u0441\u0435\u0440", "\u0447\u0430\u0446", "\u043F\u044F\u0442", "\u0441\u0443\u0431"],
  wide: ["\u043D\u044F\u0434\u0437\u0435\u043B\u044F", "\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A", "\u0430\u045E\u0442\u043E\u0440\u0430\u043A", "\u0441\u0435\u0440\u0430\u0434\u0430", "\u0447\u0430\u0446\u0432\u0435\u0440", "\u043F\u044F\u0442\u043D\u0456\u0446\u0430", "\u0441\u0443\u0431\u043E\u0442\u0430"]
};
var be_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D.",
    noon: "\u043F\u043E\u045E\u0434.",
    morning: "\u0440\u0430\u043D.",
    afternoon: "\u0434\u0437\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447"
  },
  abbreviated: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D.",
    noon: "\u043F\u043E\u045E\u0434.",
    morning: "\u0440\u0430\u043D.",
    afternoon: "\u0434\u0437\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447"
  },
  wide: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D\u0430\u0447",
    noon: "\u043F\u043E\u045E\u0434\u0437\u0435\u043D\u044C",
    morning: "\u0440\u0430\u043D\u0456\u0446\u0430",
    afternoon: "\u0434\u0437\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447\u0430\u0440",
    night: "\u043D\u043E\u0447"
  }
};
var be_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D.",
    noon: "\u043F\u043E\u045E\u0434.",
    morning: "\u0440\u0430\u043D.",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u044B"
  },
  abbreviated: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D.",
    noon: "\u043F\u043E\u045E\u0434.",
    morning: "\u0440\u0430\u043D.",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u044B"
  },
  wide: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D\u0430\u0447",
    noon: "\u043F\u043E\u045E\u0434\u0437\u0435\u043D\u044C",
    morning: "\u0440\u0430\u043D\u0456\u0446\u044B",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447\u0430\u0440\u0430",
    night: "\u043D\u043E\u0447\u044B"
  }
};
var be_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var number = Number(dirtyNumber);
  var suffix;
  if (unit === "date") {
    suffix = "-\u0433\u0430";
  } else if (unit === "hour" || unit === "minute" || unit === "second") {
    suffix = "-\u044F";
  } else {
    suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? "-\u0456" : "-\u044B";
  }
  return number + suffix;
};
var be_lib_localize_localize = {
  ordinalNumber: be_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: be_lib_localize_dayPeriodValues,
    defaultWidth: "any",
    formattingValues: be_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const be_lib_localize = (be_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/_lib/match/index.js


var be_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;
var be_lib_match_parseOrdinalNumberPattern = /\d+/i;
var be_lib_match_matchEraPatterns = {
  narrow: /^((да )?н\.?\s?э\.?)/i,
  abbreviated: /^((да )?н\.?\s?э\.?)/i,
  wide: /^(да нашай эры|нашай эры|наша эра)/i
};
var be_lib_match_parseEraPatterns = {
  any: [/^д/i, /^н/i]
};
var be_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ыі]?)? кв.?/i,
  wide: /^[1234](-?[ыі]?)? квартал/i
};
var be_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var be_lib_match_matchMonthPatterns = {
  narrow: /^[слкмчжв]/i,
  abbreviated: /^(студз|лют|сак|крас|ма[йя]|чэрв|ліп|жн|вер|кастр|ліст|снеж)\.?/i,
  wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|ма[йя]|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|снеж(ань|ня))/i
};
var be_lib_match_parseMonthPatterns = {
  narrow: [/^с/i, /^л/i, /^с/i, /^к/i, /^м/i, /^ч/i, /^л/i, /^ж/i, /^в/i, /^к/i, /^л/i, /^с/i],
  any: [/^ст/i, /^лю/i, /^са/i, /^кр/i, /^ма/i, /^ч/i, /^ліп/i, /^ж/i, /^в/i, /^ка/i, /^ліс/i, /^сн/i]
};
var be_lib_match_matchDayPatterns = {
  narrow: /^[нпасч]/i,
  short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\.?/i,
  abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцв|чац|птн|пят|суб).?/i,
  wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацв(ер|ярга)|пятніц[аы]|субот[аы])/i
};
var be_lib_match_parseDayPatterns = {
  narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
};
var be_lib_match_matchDayPeriodPatterns = {
  narrow: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
  abbreviated: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
  wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i
};
var be_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^поўн/i,
    noon: /^поўд/i,
    morning: /^р/i,
    afternoon: /^д[зн]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var be_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: be_lib_match_matchOrdinalNumberPattern,
    parsePattern: be_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const be_lib_match = (be_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be/index.js





var be_locale = {
  code: "be",
  formatDistance: be_lib_formatDistance,
  formatLong: be_lib_formatLong,
  formatRelative: be_lib_formatRelative,
  localize: be_lib_localize,
  match: be_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const be = (be_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/formatDistance/index.js
function formatDistance_declension(scheme, count) {
  if (scheme.one !== void 0 && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}
function formatDistance_buildLocalizeTokenFn(scheme) {
  return function(count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return formatDistance_declension(scheme.future, count);
        } else {
          return "\u043F\u0440\u0430\u0437 " + formatDistance_declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return formatDistance_declension(scheme.past, count);
        } else {
          return formatDistance_declension(scheme.regular, count) + " \u0442\u0430\u043C\u0443";
        }
      }
    } else {
      return formatDistance_declension(scheme.regular, count);
    }
  };
}
var formatDistance_halfAMinute = function halfAMinute2(_, options) {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u043F\u0440\u0430\u0437 \u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B";
    } else {
      return "\u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B \u0442\u0430\u043C\u0443";
    }
  }
  return "\u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B";
};
var be_tarask_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: formatDistance_buildLocalizeTokenFn({
    regular: {
      one: "\u043C\u0435\u043D\u0448 \u0437\u0430 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    future: {
      one: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    }
  }),
  xSeconds: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    past: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443 \u0442\u0430\u043C\u0443",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B \u0442\u0430\u043C\u0443",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0442\u0430\u043C\u0443"
    },
    future: {
      singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    }
  }),
  halfAMinute: formatDistance_halfAMinute,
  lessThanXMinutes: formatDistance_buildLocalizeTokenFn({
    regular: {
      one: "\u043C\u0435\u043D\u0448 \u0437\u0430 \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
    },
    future: {
      one: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
    }
  }),
  xMinutes: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0430",
      singularGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
      pluralGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
    },
    past: {
      singularNominative: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443 \u0442\u0430\u043C\u0443",
      singularGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B \u0442\u0430\u043C\u0443",
      pluralGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D \u0442\u0430\u043C\u0443"
    },
    future: {
      singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
      singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
      pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
    }
  }),
  aboutXHours: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
      singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D",
      pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
    },
    future: {
      singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443",
      singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
      pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
    }
  }),
  xHours: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0430",
      singularGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
      pluralGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
    },
    past: {
      singularNominative: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443 \u0442\u0430\u043C\u0443",
      singularGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B \u0442\u0430\u043C\u0443",
      pluralGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D \u0442\u0430\u043C\u0443"
    },
    future: {
      singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443",
      singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
      pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
    }
  }),
  xDays: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0434\u0437\u0435\u043D\u044C",
      singularGenitive: "{{count}} \u0434\u043D\u0456",
      pluralGenitive: "{{count}} \u0434\u0437\u0451\u043D"
    }
  }),
  aboutXWeeks: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
      // TODO
      singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E",
      // TODO
      pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
      // TODO
    },
    future: {
      singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446",
      // TODO
      singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
      // TODO
      pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
      // TODO
    }
  }),
  xWeeks: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u043C\u0435\u0441\u044F\u0446",
      singularGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
      pluralGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
    }
  }),
  aboutXMonths: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
      singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E",
      pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
    },
    future: {
      singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446",
      singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
      pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
    }
  }),
  xMonths: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u043C\u0435\u0441\u044F\u0446",
      singularGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
      pluralGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
    }
  }),
  aboutXYears: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0433\u043E\u0434\u0430",
      singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u043E\u045E",
      pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u043E\u045E"
    },
    future: {
      singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
    }
  }),
  xYears: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0433\u043E\u0434",
      singularGenitive: "{{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "{{count}} \u0433\u0430\u0434\u043E\u045E"
    }
  }),
  overXYears: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u0430\u0434\u043E\u045E"
    },
    future: {
      singularNominative: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
    }
  }),
  almostXYears: formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u0430\u0434\u043E\u045E"
    },
    future: {
      singularNominative: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
      pluralGenitive: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
    }
  })
};
var be_tarask_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  options = options || {};
  return be_tarask_lib_formatDistance_formatDistanceLocale[token](count, options);
};
/* harmony default export */ const be_tarask_lib_formatDistance = (be_tarask_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/formatLong/index.js

var be_tarask_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM y '\u0433.'",
  long: "d MMMM y '\u0433.'",
  medium: "d MMM y '\u0433.'",
  short: "dd.MM.y"
};
var be_tarask_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var be_tarask_lib_formatLong_dateTimeFormats = {
  any: "{{date}}, {{time}}"
};
var be_tarask_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: be_tarask_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: be_tarask_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: be_tarask_lib_formatLong_dateTimeFormats,
    defaultWidth: "any"
  })
};
/* harmony default export */ const be_tarask_lib_formatLong = (be_tarask_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/formatRelative/index.js


var formatRelative_accusativeWeekdays = ["\u043D\u044F\u0434\u0437\u0435\u043B\u044E", "\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A", "\u0430\u045E\u0442\u043E\u0440\u0430\u043A", "\u0441\u0435\u0440\u0430\u0434\u0443", "\u0447\u0430\u0446\u044C\u0432\u0435\u0440", "\u043F\u044F\u0442\u043D\u0456\u0446\u0443", "\u0441\u0443\u0431\u043E\u0442\u0443"];
function formatRelative_lastWeek(day) {
  var weekday = formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'\u0443 \u043C\u0456\u043D\u0443\u043B\u0443\u044E " + weekday + " \u0430' p";
    case 1:
    case 2:
    case 4:
      return "'\u0443 \u043C\u0456\u043D\u0443\u043B\u044B " + weekday + " \u0430' p";
  }
}
function formatRelative_thisWeek(day) {
  var weekday = formatRelative_accusativeWeekdays[day];
  return "'\u0443 " + weekday + " \u0430' p";
}
function formatRelative_nextWeek(day) {
  var weekday = formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0443\u044E " + weekday + " \u0430' p";
    case 1:
    case 2:
    case 4:
      return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u044B " + weekday + " \u0430' p";
  }
}
var formatRelative_lastWeekFormat = function lastWeekFormat2(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return formatRelative_thisWeek(day);
  } else {
    return formatRelative_lastWeek(day);
  }
};
var formatRelative_nextWeekFormat = function nextWeekFormat2(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return formatRelative_thisWeek(day);
  } else {
    return formatRelative_nextWeek(day);
  }
};
var be_tarask_lib_formatRelative_formatRelativeLocale = {
  lastWeek: formatRelative_lastWeekFormat,
  yesterday: "'\u0443\u0447\u043E\u0440\u0430 \u0430' p",
  today: "'\u0441\u0451\u043D\u044C\u043D\u044F \u0430' p",
  tomorrow: "'\u0437\u0430\u045E\u0442\u0440\u0430 \u0430' p",
  nextWeek: formatRelative_nextWeekFormat,
  other: "P"
};
var be_tarask_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = be_tarask_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const be_tarask_lib_formatRelative = (be_tarask_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/localize/index.js

var be_tarask_lib_localize_eraValues = {
  narrow: ["\u0434\u0430 \u043D.\u044D.", "\u043D.\u044D."],
  abbreviated: ["\u0434\u0430 \u043D. \u044D.", "\u043D. \u044D."],
  wide: ["\u0434\u0430 \u043D\u0430\u0448\u0430\u0439 \u044D\u0440\u044B", "\u043D\u0430\u0448\u0430\u0439 \u044D\u0440\u044B"]
};
var be_tarask_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-\u044B \u043A\u0432.", "2-\u0456 \u043A\u0432.", "3-\u0456 \u043A\u0432.", "4-\u044B \u043A\u0432."],
  wide: ["1-\u044B \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "2-\u0456 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "3-\u0456 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "4-\u044B \u043A\u0432\u0430\u0440\u0442\u0430\u043B"]
};
var be_tarask_lib_localize_monthValues = {
  narrow: ["\u0421", "\u041B", "\u0421", "\u041A", "\u0422", "\u0427", "\u041B", "\u0416", "\u0412", "\u041A", "\u041B", "\u0421"],
  abbreviated: ["\u0441\u0442\u0443\u0434\u0437.", "\u043B\u044E\u0442.", "\u0441\u0430\u043A.", "\u043A\u0440\u0430\u0441.", "\u0442\u0440\u0430\u0432.", "\u0447\u044D\u0440\u0432.", "\u043B\u0456\u043F.", "\u0436\u043D.", "\u0432\u0435\u0440.", "\u043A\u0430\u0441\u0442\u0440.", "\u043B\u0456\u0441\u0442.", "\u0441\u044C\u043D\u0435\u0436."],
  wide: ["\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044C", "\u043B\u044E\u0442\u044B", "\u0441\u0430\u043A\u0430\u0432\u0456\u043A", "\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A", "\u0442\u0440\u0430\u0432\u0435\u043D\u044C", "\u0447\u044D\u0440\u0432\u0435\u043D\u044C", "\u043B\u0456\u043F\u0435\u043D\u044C", "\u0436\u043D\u0456\u0432\u0435\u043D\u044C", "\u0432\u0435\u0440\u0430\u0441\u0435\u043D\u044C", "\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A", "\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434", "\u0441\u044C\u043D\u0435\u0436\u0430\u043D\u044C"]
};
var localize_formattingMonthValues = {
  narrow: ["\u0421", "\u041B", "\u0421", "\u041A", "\u0422", "\u0427", "\u041B", "\u0416", "\u0412", "\u041A", "\u041B", "\u0421"],
  abbreviated: ["\u0441\u0442\u0443\u0434\u0437.", "\u043B\u044E\u0442.", "\u0441\u0430\u043A.", "\u043A\u0440\u0430\u0441.", "\u0442\u0440\u0430\u0432.", "\u0447\u044D\u0440\u0432.", "\u043B\u0456\u043F.", "\u0436\u043D.", "\u0432\u0435\u0440.", "\u043A\u0430\u0441\u0442\u0440.", "\u043B\u0456\u0441\u0442.", "\u0441\u044C\u043D\u0435\u0436."],
  wide: ["\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044F", "\u043B\u044E\u0442\u0430\u0433\u0430", "\u0441\u0430\u043A\u0430\u0432\u0456\u043A\u0430", "\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A\u0430", "\u0442\u0440\u0430\u045E\u043D\u044F", "\u0447\u044D\u0440\u0432\u0435\u043D\u044F", "\u043B\u0456\u043F\u0435\u043D\u044F", "\u0436\u043D\u0456\u045E\u043D\u044F", "\u0432\u0435\u0440\u0430\u0441\u043D\u044F", "\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A\u0430", "\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434\u0430", "\u0441\u044C\u043D\u0435\u0436\u043D\u044F"]
};
var be_tarask_lib_localize_dayValues = {
  narrow: ["\u041D", "\u041F", "\u0410", "\u0421", "\u0427", "\u041F", "\u0421"],
  short: ["\u043D\u0434", "\u043F\u043D", "\u0430\u045E", "\u0441\u0440", "\u0447\u0446", "\u043F\u0442", "\u0441\u0431"],
  abbreviated: ["\u043D\u044F\u0434\u0437", "\u043F\u0430\u043D", "\u0430\u045E\u0442", "\u0441\u0435\u0440", "\u0447\u0430\u0446\u044C", "\u043F\u044F\u0442", "\u0441\u0443\u0431"],
  wide: ["\u043D\u044F\u0434\u0437\u0435\u043B\u044F", "\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A", "\u0430\u045E\u0442\u043E\u0440\u0430\u043A", "\u0441\u0435\u0440\u0430\u0434\u0430", "\u0447\u0430\u0446\u044C\u0432\u0435\u0440", "\u043F\u044F\u0442\u043D\u0456\u0446\u0430", "\u0441\u0443\u0431\u043E\u0442\u0430"]
};
var be_tarask_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D.",
    noon: "\u043F\u043E\u045E\u0434.",
    morning: "\u0440\u0430\u043D.",
    afternoon: "\u0434\u0437\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447"
  },
  abbreviated: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D.",
    noon: "\u043F\u043E\u045E\u0434.",
    morning: "\u0440\u0430\u043D.",
    afternoon: "\u0434\u0437\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447"
  },
  wide: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D\u0430\u0447",
    noon: "\u043F\u043E\u045E\u0434\u0437\u0435\u043D\u044C",
    morning: "\u0440\u0430\u043D\u0456\u0446\u0430",
    afternoon: "\u0434\u0437\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447\u0430\u0440",
    night: "\u043D\u043E\u0447"
  }
};
var be_tarask_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D.",
    noon: "\u043F\u043E\u045E\u0434.",
    morning: "\u0440\u0430\u043D.",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u044B"
  },
  abbreviated: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D.",
    noon: "\u043F\u043E\u045E\u0434.",
    morning: "\u0440\u0430\u043D.",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u044B"
  },
  wide: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u045E\u043D\u0430\u0447",
    noon: "\u043F\u043E\u045E\u0434\u0437\u0435\u043D\u044C",
    morning: "\u0440\u0430\u043D\u0456\u0446\u044B",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447\u0430\u0440\u0430",
    night: "\u043D\u043E\u0447\u044B"
  }
};
var be_tarask_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var number = Number(dirtyNumber);
  var suffix;
  if (unit === "date") {
    suffix = "-\u0433\u0430";
  } else if (unit === "hour" || unit === "minute" || unit === "second") {
    suffix = "-\u044F";
  } else {
    suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? "-\u0456" : "-\u044B";
  }
  return number + suffix;
};
var be_tarask_lib_localize_localize = {
  ordinalNumber: be_tarask_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: be_tarask_lib_localize_dayPeriodValues,
    defaultWidth: "any",
    formattingValues: be_tarask_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const be_tarask_lib_localize = (be_tarask_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/_lib/match/index.js


var be_tarask_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;
var be_tarask_lib_match_parseOrdinalNumberPattern = /\d+/i;
var be_tarask_lib_match_matchEraPatterns = {
  narrow: /^((да )?н\.?\s?э\.?)/i,
  abbreviated: /^((да )?н\.?\s?э\.?)/i,
  wide: /^(да нашай эры|нашай эры|наша эра)/i
};
var be_tarask_lib_match_parseEraPatterns = {
  any: [/^д/i, /^н/i]
};
var be_tarask_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ыі]?)? кв.?/i,
  wide: /^[1234](-?[ыі]?)? квартал/i
};
var be_tarask_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var be_tarask_lib_match_matchMonthPatterns = {
  narrow: /^[слкмчжв]/i,
  abbreviated: /^(студз|лют|сак|крас|тр(ав)?|чэрв|ліп|жн|вер|кастр|ліст|сьнеж)\.?/i,
  wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|тра(вень|ўня)|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|сьнеж(ань|ня))/i
};
var be_tarask_lib_match_parseMonthPatterns = {
  narrow: [/^с/i, /^л/i, /^с/i, /^к/i, /^т/i, /^ч/i, /^л/i, /^ж/i, /^в/i, /^к/i, /^л/i, /^с/i],
  any: [/^ст/i, /^лю/i, /^са/i, /^кр/i, /^тр/i, /^ч/i, /^ліп/i, /^ж/i, /^в/i, /^ка/i, /^ліс/i, /^сн/i]
};
var be_tarask_lib_match_matchDayPatterns = {
  narrow: /^[нпасч]/i,
  short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\.?/i,
  abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцьв|чаць|птн|пят|суб).?/i,
  wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацьв(ер|ярга)|пятніц[аы]|субот[аы])/i
};
var be_tarask_lib_match_parseDayPatterns = {
  narrow: [/^н/i, /^п/i, /^а/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н/i, /^п[ан]/i, /^а/i, /^с[ер]/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
};
var be_tarask_lib_match_matchDayPeriodPatterns = {
  narrow: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
  abbreviated: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
  wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i
};
var be_tarask_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^поўн/i,
    noon: /^поўд/i,
    morning: /^р/i,
    afternoon: /^д[зн]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var be_tarask_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: be_tarask_lib_match_matchOrdinalNumberPattern,
    parsePattern: be_tarask_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_tarask_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_tarask_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_tarask_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_tarask_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: be_tarask_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: be_tarask_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const be_tarask_lib_match = (be_tarask_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/be-tarask/index.js





var be_tarask_locale = {
  code: "be-tarask",
  formatDistance: be_tarask_lib_formatDistance,
  formatLong: be_tarask_lib_formatLong,
  formatRelative: be_tarask_lib_formatRelative,
  localize: be_tarask_lib_localize,
  match: be_tarask_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const be_tarask = (be_tarask_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/formatDistance/index.js
var bg_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u043F\u043E-\u043C\u0430\u043B\u043A\u043E \u043E\u0442 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
    other: "\u043F\u043E-\u043C\u0430\u043B\u043A\u043E \u043E\u0442 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
  },
  xSeconds: {
    one: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
    other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
  },
  halfAMinute: "\u043F\u043E\u043B\u043E\u0432\u0438\u043D \u043C\u0438\u043D\u0443\u0442\u0430",
  lessThanXMinutes: {
    one: "\u043F\u043E-\u043C\u0430\u043B\u043A\u043E \u043E\u0442 \u043C\u0438\u043D\u0443\u0442\u0430",
    other: "\u043F\u043E-\u043C\u0430\u043B\u043A\u043E \u043E\u0442 {{count}} \u043C\u0438\u043D\u0443\u0442\u0438"
  },
  xMinutes: {
    one: "1 \u043C\u0438\u043D\u0443\u0442\u0430",
    other: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0438"
  },
  aboutXHours: {
    one: "\u043E\u043A\u043E\u043B\u043E \u0447\u0430\u0441",
    other: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0447\u0430\u0441\u0430"
  },
  xHours: {
    one: "1 \u0447\u0430\u0441",
    other: "{{count}} \u0447\u0430\u0441\u0430"
  },
  xDays: {
    one: "1 \u0434\u0435\u043D",
    other: "{{count}} \u0434\u043D\u0438"
  },
  aboutXWeeks: {
    one: "\u043E\u043A\u043E\u043B\u043E \u0441\u0435\u0434\u043C\u0438\u0446\u0430",
    other: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0441\u0435\u0434\u043C\u0438\u0446\u0438"
  },
  xWeeks: {
    one: "1 \u0441\u0435\u0434\u043C\u0438\u0446\u0430",
    other: "{{count}} \u0441\u0435\u0434\u043C\u0438\u0446\u0438"
  },
  aboutXMonths: {
    one: "\u043E\u043A\u043E\u043B\u043E \u043C\u0435\u0441\u0435\u0446",
    other: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043C\u0435\u0441\u0435\u0446\u0430"
  },
  xMonths: {
    one: "1 \u043C\u0435\u0441\u0435\u0446",
    other: "{{count}} \u043C\u0435\u0441\u0435\u0446\u0430"
  },
  aboutXYears: {
    one: "\u043E\u043A\u043E\u043B\u043E \u0433\u043E\u0434\u0438\u043D\u0430",
    other: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
  },
  xYears: {
    one: "1 \u0433\u043E\u0434\u0438\u043D\u0430",
    other: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
  },
  overXYears: {
    one: "\u043D\u0430\u0434 \u0433\u043E\u0434\u0438\u043D\u0430",
    other: "\u043D\u0430\u0434 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
  },
  almostXYears: {
    one: "\u043F\u043E\u0447\u0442\u0438 \u0433\u043E\u0434\u0438\u043D\u0430",
    other: "\u043F\u043E\u0447\u0442\u0438 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
  }
};
var bg_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = bg_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0441\u043B\u0435\u0434 " + result;
    } else {
      return "\u043F\u0440\u0435\u0434\u0438 " + result;
    }
  }
  return result;
};
/* harmony default export */ const bg_lib_formatDistance = (bg_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/formatLong/index.js

var bg_lib_formatLong_dateFormats = {
  full: "EEEE, dd MMMM yyyy",
  long: "dd MMMM yyyy",
  medium: "dd MMM yyyy",
  short: "dd/MM/yyyy"
};
var bg_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "H:mm"
};
var bg_lib_formatLong_dateTimeFormats = {
  any: "{{date}} {{time}}"
};
var bg_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: bg_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: bg_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: bg_lib_formatLong_dateTimeFormats,
    defaultWidth: "any"
  })
};
/* harmony default export */ const bg_lib_formatLong = (bg_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/formatRelative/index.js


var weekdays = ["\u043D\u0435\u0434\u0435\u043B\u044F", "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A", "\u0432\u0442\u043E\u0440\u043D\u0438\u043A", "\u0441\u0440\u044F\u0434\u0430", "\u0447\u0435\u0442\u0432\u044A\u0440\u0442\u044A\u043A", "\u043F\u0435\u0442\u044A\u043A", "\u0441\u044A\u0431\u043E\u0442\u0430"];
function _lib_formatRelative_lastWeek(day) {
  var weekday = weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'\u043C\u0438\u043D\u0430\u043B\u0430\u0442\u0430 " + weekday + " \u0432' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'\u043C\u0438\u043D\u0430\u043B\u0438\u044F " + weekday + " \u0432' p";
  }
}
function _lib_formatRelative_thisWeek(day) {
  var weekday = weekdays[day];
  if (day === 2) {
    return "'\u0432\u044A\u0432 " + weekday + " \u0432' p";
  } else {
    return "'\u0432 " + weekday + " \u0432' p";
  }
}
function _lib_formatRelative_nextWeek(day) {
  var weekday = weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'\u0441\u043B\u0435\u0434\u0432\u0430\u0449\u0430\u0442\u0430 " + weekday + " \u0432' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'\u0441\u043B\u0435\u0434\u0432\u0430\u0449\u0438\u044F " + weekday + " \u0432' p";
  }
}
var lastWeekFormatToken = function lastWeekFormatToken2(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return _lib_formatRelative_thisWeek(day);
  } else {
    return _lib_formatRelative_lastWeek(day);
  }
};
var nextWeekFormatToken = function nextWeekFormatToken2(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return _lib_formatRelative_thisWeek(day);
  } else {
    return _lib_formatRelative_nextWeek(day);
  }
};
var bg_lib_formatRelative_formatRelativeLocale = {
  lastWeek: lastWeekFormatToken,
  yesterday: "'\u0432\u0447\u0435\u0440\u0430 \u0432' p",
  today: "'\u0434\u043D\u0435\u0441 \u0432' p",
  tomorrow: "'\u0443\u0442\u0440\u0435 \u0432' p",
  nextWeek: nextWeekFormatToken,
  other: "P"
};
var bg_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = bg_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const bg_lib_formatRelative = (bg_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/localize/index.js

var bg_lib_localize_eraValues = {
  narrow: ["\u043F\u0440.\u043D.\u0435.", "\u043D.\u0435."],
  abbreviated: ["\u043F\u0440\u0435\u0434\u0438 \u043D. \u0435.", "\u043D. \u0435."],
  wide: ["\u043F\u0440\u0435\u0434\u0438 \u043D\u043E\u0432\u0430\u0442\u0430 \u0435\u0440\u0430", "\u043D\u043E\u0432\u0430\u0442\u0430 \u0435\u0440\u0430"]
};
var bg_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-\u0432\u043E \u0442\u0440\u0438\u043C\u0435\u0441.", "2-\u0440\u043E \u0442\u0440\u0438\u043C\u0435\u0441.", "3-\u0442\u043E \u0442\u0440\u0438\u043C\u0435\u0441.", "4-\u0442\u043E \u0442\u0440\u0438\u043C\u0435\u0441."],
  wide: ["1-\u0432\u043E \u0442\u0440\u0438\u043C\u0435\u0441\u0435\u0447\u0438\u0435", "2-\u0440\u043E \u0442\u0440\u0438\u043C\u0435\u0441\u0435\u0447\u0438\u0435", "3-\u0442\u043E \u0442\u0440\u0438\u043C\u0435\u0441\u0435\u0447\u0438\u0435", "4-\u0442\u043E \u0442\u0440\u0438\u043C\u0435\u0441\u0435\u0447\u0438\u0435"]
};
var bg_lib_localize_monthValues = {
  abbreviated: ["\u044F\u043D\u0443", "\u0444\u0435\u0432", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0439", "\u044E\u043D\u0438", "\u044E\u043B\u0438", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0435", "\u0434\u0435\u043A"],
  wide: ["\u044F\u043D\u0443\u0430\u0440\u0438", "\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0438\u043B", "\u043C\u0430\u0439", "\u044E\u043D\u0438", "\u044E\u043B\u0438", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438", "\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438", "\u043D\u043E\u0435\u043C\u0432\u0440\u0438", "\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438"]
};
var bg_lib_localize_dayValues = {
  narrow: ["\u041D", "\u041F", "\u0412", "\u0421", "\u0427", "\u041F", "\u0421"],
  short: ["\u043D\u0434", "\u043F\u043D", "\u0432\u0442", "\u0441\u0440", "\u0447\u0442", "\u043F\u0442", "\u0441\u0431"],
  abbreviated: ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0432\u0442\u043E", "\u0441\u0440\u044F", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u044A\u0431"],
  wide: ["\u043D\u0435\u0434\u0435\u043B\u044F", "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A", "\u0432\u0442\u043E\u0440\u043D\u0438\u043A", "\u0441\u0440\u044F\u0434\u0430", "\u0447\u0435\u0442\u0432\u044A\u0440\u0442\u044A\u043A", "\u043F\u0435\u0442\u044A\u043A", "\u0441\u044A\u0431\u043E\u0442\u0430"]
};
var bg_lib_localize_dayPeriodValues = {
  wide: {
    am: "\u043F\u0440\u0435\u0434\u0438 \u043E\u0431\u044F\u0434",
    pm: "\u0441\u043B\u0435\u0434 \u043E\u0431\u044F\u0434",
    midnight: "\u0432 \u043F\u043E\u043B\u0443\u043D\u043E\u0449",
    noon: "\u043D\u0430 \u043E\u0431\u044F\u0434",
    morning: "\u0441\u0443\u0442\u0440\u0438\u043D\u0442\u0430",
    afternoon: "\u0441\u043B\u0435\u0434\u043E\u0431\u0435\u0434",
    evening: "\u0432\u0435\u0447\u0435\u0440\u0442\u0430",
    night: "\u043F\u0440\u0435\u0437 \u043D\u043E\u0449\u0442\u0430"
  }
};
function isFeminine(unit) {
  return unit === "year" || unit === "week" || unit === "minute" || unit === "second";
}
function isNeuter(unit) {
  return unit === "quarter";
}
function numberWithSuffix(number, unit, masculine, feminine, neuter) {
  var suffix = isNeuter(unit) ? neuter : isFeminine(unit) ? feminine : masculine;
  return number + "-" + suffix;
}
var bg_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (number === 0) {
    return numberWithSuffix(0, unit, "\u0435\u0432", "\u0435\u0432\u0430", "\u0435\u0432\u043E");
  } else if (number % 1e3 === 0) {
    return numberWithSuffix(number, unit, "\u0435\u043D", "\u043D\u0430", "\u043D\u043E");
  } else if (number % 100 === 0) {
    return numberWithSuffix(number, unit, "\u0442\u0435\u043D", "\u0442\u043D\u0430", "\u0442\u043D\u043E");
  }
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return numberWithSuffix(number, unit, "\u0432\u0438", "\u0432\u0430", "\u0432\u043E");
      case 2:
        return numberWithSuffix(number, unit, "\u0440\u0438", "\u0440\u0430", "\u0440\u043E");
      case 7:
      case 8:
        return numberWithSuffix(number, unit, "\u043C\u0438", "\u043C\u0430", "\u043C\u043E");
    }
  }
  return numberWithSuffix(number, unit, "\u0442\u0438", "\u0442\u0430", "\u0442\u043E");
};
var bg_lib_localize_localize = {
  ordinalNumber: bg_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: bg_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const bg_lib_localize = (bg_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/_lib/match/index.js


var bg_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?[врмт][аи]|-?т?(ен|на)|-?(ев|ева))?/i;
var bg_lib_match_parseOrdinalNumberPattern = /\d+/i;
var bg_lib_match_matchEraPatterns = {
  narrow: /^((пр)?н\.?\s?е\.?)/i,
  abbreviated: /^((пр)?н\.?\s?е\.?)/i,
  wide: /^(преди новата ера|новата ера|нова ера)/i
};
var bg_lib_match_parseEraPatterns = {
  any: [/^п/i, /^н/i]
};
var bg_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[врт]?o?)? тримес.?/i,
  wide: /^[1234](-?[врт]?о?)? тримесечие/i
};
var bg_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var bg_lib_match_matchDayPatterns = {
  narrow: /^[нпвсч]/i,
  short: /^(нд|пн|вт|ср|чт|пт|сб)/i,
  abbreviated: /^(нед|пон|вто|сря|чет|пет|съб)/i,
  wide: /^(неделя|понеделник|вторник|сряда|четвъртък|петък|събота)/i
};
var bg_lib_match_parseDayPatterns = {
  narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н[ед]/i, /^п[он]/i, /^вт/i, /^ср/i, /^ч[ет]/i, /^п[ет]/i, /^с[ъб]/i]
};
var bg_lib_match_matchMonthPatterns = {
  abbreviated: /^(яну|фев|мар|апр|май|юни|юли|авг|сеп|окт|ное|дек)/i,
  wide: /^(януари|февруари|март|април|май|юни|юли|август|септември|октомври|ноември|декември)/i
};
var bg_lib_match_parseMonthPatterns = {
  any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^май/i, /^юн/i, /^юл/i, /^ав/i, /^се/i, /^окт/i, /^но/i, /^де/i]
};
var bg_lib_match_matchDayPeriodPatterns = {
  any: /^(преди о|след о|в по|на о|през|веч|сут|следо)/i
};
var bg_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^преди о/i,
    pm: /^след о/i,
    midnight: /^в пол/i,
    noon: /^на об/i,
    morning: /^сут/i,
    afternoon: /^следо/i,
    evening: /^веч/i,
    night: /^през н/i
  }
};
var bg_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: bg_lib_match_matchOrdinalNumberPattern,
    parsePattern: bg_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bg_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bg_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bg_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bg_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bg_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: bg_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const bg_lib_match = (bg_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bg/index.js





var bg_locale = {
  code: "bg",
  formatDistance: bg_lib_formatDistance,
  formatLong: bg_lib_formatLong,
  formatRelative: bg_lib_formatRelative,
  localize: bg_lib_localize,
  match: bg_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const bg = (bg_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/localize/index.js

var numberValues = {
  locale: {
    "1": "\u09E7",
    "2": "\u09E8",
    "3": "\u09E9",
    "4": "\u09EA",
    "5": "\u09EB",
    "6": "\u09EC",
    "7": "\u09ED",
    "8": "\u09EE",
    "9": "\u09EF",
    "0": "\u09E6"
  },
  number: {
    "\u09E7": "1",
    "\u09E8": "2",
    "\u09E9": "3",
    "\u09EA": "4",
    "\u09EB": "5",
    "\u09EC": "6",
    "\u09ED": "7",
    "\u09EE": "8",
    "\u09EF": "9",
    "\u09E6": "0"
  }
};
var bn_lib_localize_eraValues = {
  narrow: ["\u0996\u09CD\u09B0\u09BF\u0983\u09AA\u09C2\u0983", "\u0996\u09CD\u09B0\u09BF\u0983"],
  abbreviated: ["\u0996\u09CD\u09B0\u09BF\u0983\u09AA\u09C2\u09B0\u09CD\u09AC", "\u0996\u09CD\u09B0\u09BF\u0983"],
  wide: ["\u0996\u09CD\u09B0\u09BF\u09B8\u09CD\u099F\u09AA\u09C2\u09B0\u09CD\u09AC", "\u0996\u09CD\u09B0\u09BF\u09B8\u09CD\u099F\u09BE\u09AC\u09CD\u09A6"]
};
var bn_lib_localize_quarterValues = {
  narrow: ["\u09E7", "\u09E8", "\u09E9", "\u09EA"],
  abbreviated: ["\u09E7\u09A4\u09CD\u09B0\u09C8", "\u09E8\u09A4\u09CD\u09B0\u09C8", "\u09E9\u09A4\u09CD\u09B0\u09C8", "\u09EA\u09A4\u09CD\u09B0\u09C8"],
  wide: ["\u09E7\u09AE \u09A4\u09CD\u09B0\u09C8\u09AE\u09BE\u09B8\u09BF\u0995", "\u09E8\u09DF \u09A4\u09CD\u09B0\u09C8\u09AE\u09BE\u09B8\u09BF\u0995", "\u09E9\u09DF \u09A4\u09CD\u09B0\u09C8\u09AE\u09BE\u09B8\u09BF\u0995", "\u09EA\u09B0\u09CD\u09A5 \u09A4\u09CD\u09B0\u09C8\u09AE\u09BE\u09B8\u09BF\u0995"]
};
var bn_lib_localize_monthValues = {
  narrow: ["\u099C\u09BE\u09A8\u09C1", "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1", "\u09AE\u09BE\u09B0\u09CD\u099A", "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997\u09B8\u09CD\u099F", "\u09B8\u09C7\u09AA\u09CD\u099F", "\u0985\u0995\u09CD\u099F\u09CB", "\u09A8\u09AD\u09C7", "\u09A1\u09BF\u09B8\u09C7"],
  abbreviated: ["\u099C\u09BE\u09A8\u09C1", "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1", "\u09AE\u09BE\u09B0\u09CD\u099A", "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997\u09B8\u09CD\u099F", "\u09B8\u09C7\u09AA\u09CD\u099F", "\u0985\u0995\u09CD\u099F\u09CB", "\u09A8\u09AD\u09C7", "\u09A1\u09BF\u09B8\u09C7"],
  wide: ["\u099C\u09BE\u09A8\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1\u09DF\u09BE\u09B0\u09BF", "\u09AE\u09BE\u09B0\u09CD\u099A", "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2", "\u09AE\u09C7", "\u099C\u09C1\u09A8", "\u099C\u09C1\u09B2\u09BE\u0987", "\u0986\u0997\u09B8\u09CD\u099F", "\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0", "\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0", "\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0", "\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0"]
};
var bn_lib_localize_dayValues = {
  narrow: ["\u09B0", "\u09B8\u09CB", "\u09AE", "\u09AC\u09C1", "\u09AC\u09C3", "\u09B6\u09C1", "\u09B6"],
  short: ["\u09B0\u09AC\u09BF", "\u09B8\u09CB\u09AE", "\u09AE\u0999\u09CD\u0997\u09B2", "\u09AC\u09C1\u09A7", "\u09AC\u09C3\u09B9", "\u09B6\u09C1\u0995\u09CD\u09B0", "\u09B6\u09A8\u09BF"],
  abbreviated: ["\u09B0\u09AC\u09BF", "\u09B8\u09CB\u09AE", "\u09AE\u0999\u09CD\u0997\u09B2", "\u09AC\u09C1\u09A7", "\u09AC\u09C3\u09B9", "\u09B6\u09C1\u0995\u09CD\u09B0", "\u09B6\u09A8\u09BF"],
  wide: ["\u09B0\u09AC\u09BF\u09AC\u09BE\u09B0", "\u09B8\u09CB\u09AE\u09AC\u09BE\u09B0", "\u09AE\u0999\u09CD\u0997\u09B2\u09AC\u09BE\u09B0", "\u09AC\u09C1\u09A7\u09AC\u09BE\u09B0", "\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF\u09AC\u09BE\u09B0 ", "\u09B6\u09C1\u0995\u09CD\u09B0\u09AC\u09BE\u09B0", "\u09B6\u09A8\u09BF\u09AC\u09BE\u09B0"]
};
var bn_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u09AA\u09C2",
    pm: "\u0985\u09AA",
    midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
    noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
    morning: "\u09B8\u0995\u09BE\u09B2",
    afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
    evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
    night: "\u09B0\u09BE\u09A4"
  },
  abbreviated: {
    am: "\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A8",
    pm: "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A8",
    midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
    noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
    morning: "\u09B8\u0995\u09BE\u09B2",
    afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
    evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
    night: "\u09B0\u09BE\u09A4"
  },
  wide: {
    am: "\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A8",
    pm: "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A8",
    midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
    noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
    morning: "\u09B8\u0995\u09BE\u09B2",
    afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
    evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
    night: "\u09B0\u09BE\u09A4"
  }
};
var bn_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u09AA\u09C2",
    pm: "\u0985\u09AA",
    midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
    noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
    morning: "\u09B8\u0995\u09BE\u09B2",
    afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
    evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
    night: "\u09B0\u09BE\u09A4"
  },
  abbreviated: {
    am: "\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A8",
    pm: "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A8",
    midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
    noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
    morning: "\u09B8\u0995\u09BE\u09B2",
    afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
    evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
    night: "\u09B0\u09BE\u09A4"
  },
  wide: {
    am: "\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A8",
    pm: "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A8",
    midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
    noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
    morning: "\u09B8\u0995\u09BE\u09B2",
    afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
    evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
    night: "\u09B0\u09BE\u09A4"
  }
};
function dateOrdinalNumber(number, localeNumber) {
  if (number > 18 && number <= 31) {
    return localeNumber + "\u09B6\u09C7";
  } else {
    switch (number) {
      case 1:
        return localeNumber + "\u09B2\u09BE";
      case 2:
      case 3:
        return localeNumber + "\u09B0\u09BE";
      case 4:
        return localeNumber + "\u09A0\u09BE";
      default:
        return localeNumber + "\u0987";
    }
  }
}
var bn_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var localeNumber = numberToLocale(number);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (unit === "date") {
    return dateOrdinalNumber(number, localeNumber);
  }
  if (number > 10 || number === 0)
    return localeNumber + "\u09A4\u09AE";
  var rem10 = number % 10;
  switch (rem10) {
    case 2:
    case 3:
      return localeNumber + "\u09DF";
    case 4:
      return localeNumber + "\u09B0\u09CD\u09A5";
    case 6:
      return localeNumber + "\u09B7\u09CD\u09A0";
    default:
      return localeNumber + "\u09AE";
  }
};
function numberToLocale(enNumber) {
  return enNumber.toString().replace(/\d/g, function(match) {
    return numberValues.locale[match];
  });
}
var bn_lib_localize_localize = {
  ordinalNumber: bn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: bn_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: bn_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const bn_lib_localize = (bn_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/formatDistance/index.js

var bn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1",
    other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1"
  },
  xSeconds: {
    one: "\u09E7 \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1",
    other: "{{count}} \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1"
  },
  halfAMinute: "\u0986\u09A7 \u09AE\u09BF\u09A8\u09BF\u099F",
  lessThanXMinutes: {
    one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09AE\u09BF\u09A8\u09BF\u099F",
    other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09AE\u09BF\u09A8\u09BF\u099F"
  },
  xMinutes: {
    one: "\u09E7 \u09AE\u09BF\u09A8\u09BF\u099F",
    other: "{{count}} \u09AE\u09BF\u09A8\u09BF\u099F"
  },
  aboutXHours: {
    one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u0998\u09A8\u09CD\u099F\u09BE",
    other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u0998\u09A8\u09CD\u099F\u09BE"
  },
  xHours: {
    one: "\u09E7 \u0998\u09A8\u09CD\u099F\u09BE",
    other: "{{count}} \u0998\u09A8\u09CD\u099F\u09BE"
  },
  xDays: {
    one: "\u09E7 \u09A6\u09BF\u09A8",
    other: "{{count}} \u09A6\u09BF\u09A8"
  },
  aboutXWeeks: {
    one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09B8\u09AA\u09CD\u09A4\u09BE\u09B9",
    other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09B8\u09AA\u09CD\u09A4\u09BE\u09B9"
  },
  xWeeks: {
    one: "\u09E7 \u09B8\u09AA\u09CD\u09A4\u09BE\u09B9",
    other: "{{count}} \u09B8\u09AA\u09CD\u09A4\u09BE\u09B9"
  },
  aboutXMonths: {
    one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09AE\u09BE\u09B8",
    other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09AE\u09BE\u09B8"
  },
  xMonths: {
    one: "\u09E7 \u09AE\u09BE\u09B8",
    other: "{{count}} \u09AE\u09BE\u09B8"
  },
  aboutXYears: {
    one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09AC\u099B\u09B0",
    other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09AC\u099B\u09B0"
  },
  xYears: {
    one: "\u09E7 \u09AC\u099B\u09B0",
    other: "{{count}} \u09AC\u099B\u09B0"
  },
  overXYears: {
    one: "\u09E7 \u09AC\u099B\u09B0\u09C7\u09B0 \u09AC\u09C7\u09B6\u09BF",
    other: "{{count}} \u09AC\u099B\u09B0\u09C7\u09B0 \u09AC\u09C7\u09B6\u09BF"
  },
  almostXYears: {
    one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09AC\u099B\u09B0",
    other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09AC\u099B\u09B0"
  }
};
var bn_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = bn_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", numberToLocale(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " \u098F\u09B0 \u09AE\u09A7\u09CD\u09AF\u09C7";
    } else {
      return result + " \u0986\u0997\u09C7";
    }
  }
  return result;
};
/* harmony default export */ const bn_lib_formatDistance = (bn_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/formatLong/index.js

var bn_lib_formatLong_dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var bn_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var bn_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}} '\u09B8\u09AE\u09DF'",
  long: "{{date}} {{time}} '\u09B8\u09AE\u09DF'",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var bn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: bn_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: bn_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: bn_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const bn_lib_formatLong = (bn_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/formatRelative/index.js
var bn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0997\u09A4' eeee '\u09B8\u09AE\u09DF' p",
  yesterday: "'\u0997\u09A4\u0995\u09BE\u09B2' '\u09B8\u09AE\u09DF' p",
  today: "'\u0986\u099C' '\u09B8\u09AE\u09DF' p",
  tomorrow: "'\u0986\u0997\u09BE\u09AE\u09C0\u0995\u09BE\u09B2' '\u09B8\u09AE\u09DF' p",
  nextWeek: "eeee '\u09B8\u09AE\u09DF' p",
  other: "P"
};
var bn_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return bn_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const bn_lib_formatRelative = (bn_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/_lib/match/index.js


var bn_lib_match_matchOrdinalNumberPattern = /^(\d+)(ম|য়|র্থ|ষ্ঠ|শে|ই|তম)?/i;
var bn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var bn_lib_match_matchEraPatterns = {
  narrow: /^(খ্রিঃপূঃ|খ্রিঃ)/i,
  abbreviated: /^(খ্রিঃপূর্ব|খ্রিঃ)/i,
  wide: /^(খ্রিস্টপূর্ব|খ্রিস্টাব্দ)/i
};
var bn_lib_match_parseEraPatterns = {
  narrow: [/^খ্রিঃপূঃ/i, /^খ্রিঃ/i],
  abbreviated: [/^খ্রিঃপূর্ব/i, /^খ্রিঃ/i],
  wide: [/^খ্রিস্টপূর্ব/i, /^খ্রিস্টাব্দ/i]
};
var bn_lib_match_matchQuarterPatterns = {
  narrow: /^[১২৩৪]/i,
  abbreviated: /^[১২৩৪]ত্রৈ/i,
  wide: /^[১২৩৪](ম|য়|র্থ)? ত্রৈমাসিক/i
};
var bn_lib_match_parseQuarterPatterns = {
  any: [/১/i, /২/i, /৩/i, /৪/i]
};
var bn_lib_match_matchMonthPatterns = {
  narrow: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
  abbreviated: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
  wide: /^(জানুয়ারি|ফেব্রুয়ারি|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্টেম্বর|অক্টোবর|নভেম্বর|ডিসেম্বর)/i
};
var bn_lib_match_parseMonthPatterns = {
  any: [/^জানু/i, /^ফেব্রু/i, /^মার্চ/i, /^এপ্রিল/i, /^মে/i, /^জুন/i, /^জুলাই/i, /^আগস্ট/i, /^সেপ্ট/i, /^অক্টো/i, /^নভে/i, /^ডিসে/i]
};
var bn_lib_match_matchDayPatterns = {
  narrow: /^(র|সো|ম|বু|বৃ|শু|শ)+/i,
  short: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
  abbreviated: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
  wide: /^(রবিবার|সোমবার|মঙ্গলবার|বুধবার|বৃহস্পতিবার |শুক্রবার|শনিবার)+/i
};
var bn_lib_match_parseDayPatterns = {
  narrow: [/^র/i, /^সো/i, /^ম/i, /^বু/i, /^বৃ/i, /^শু/i, /^শ/i],
  short: [/^রবি/i, /^সোম/i, /^মঙ্গল/i, /^বুধ/i, /^বৃহ/i, /^শুক্র/i, /^শনি/i],
  abbreviated: [/^রবি/i, /^সোম/i, /^মঙ্গল/i, /^বুধ/i, /^বৃহ/i, /^শুক্র/i, /^শনি/i],
  wide: [/^রবিবার/i, /^সোমবার/i, /^মঙ্গলবার/i, /^বুধবার/i, /^বৃহস্পতিবার /i, /^শুক্রবার/i, /^শনিবার/i]
};
var bn_lib_match_matchDayPeriodPatterns = {
  narrow: /^(পূ|অপ|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
  abbreviated: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
  wide: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i
};
var bn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^পূ/i,
    pm: /^অপ/i,
    midnight: /^মধ্যরাত/i,
    noon: /^মধ্যাহ্ন/i,
    morning: /সকাল/i,
    afternoon: /বিকাল/i,
    evening: /সন্ধ্যা/i,
    night: /রাত/i
  }
};
var bn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: bn_lib_match_matchOrdinalNumberPattern,
    parsePattern: bn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bn_lib_match_parseEraPatterns,
    defaultParseWidth: "wide"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bn_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bn_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bn_lib_match_parseDayPatterns,
    defaultParseWidth: "wide"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const bn_lib_match = (bn_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bn/index.js





var bn_locale = {
  code: "bn",
  formatDistance: bn_lib_formatDistance,
  formatLong: bn_lib_formatLong,
  formatRelative: bn_lib_formatRelative,
  localize: bn_lib_localize,
  match: bn_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const bn = (bn_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/formatDistance/index.js
var bs_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      standalone: "manje od 1 sekunde",
      withPrepositionAgo: "manje od 1 sekunde",
      withPrepositionIn: "manje od 1 sekundu"
    },
    dual: "manje od {{count}} sekunde",
    other: "manje od {{count}} sekundi"
  },
  xSeconds: {
    one: {
      standalone: "1 sekunda",
      withPrepositionAgo: "1 sekunde",
      withPrepositionIn: "1 sekundu"
    },
    dual: "{{count}} sekunde",
    other: "{{count}} sekundi"
  },
  halfAMinute: "pola minute",
  lessThanXMinutes: {
    one: {
      standalone: "manje od 1 minute",
      withPrepositionAgo: "manje od 1 minute",
      withPrepositionIn: "manje od 1 minutu"
    },
    dual: "manje od {{count}} minute",
    other: "manje od {{count}} minuta"
  },
  xMinutes: {
    one: {
      standalone: "1 minuta",
      withPrepositionAgo: "1 minute",
      withPrepositionIn: "1 minutu"
    },
    dual: "{{count}} minute",
    other: "{{count}} minuta"
  },
  aboutXHours: {
    one: {
      standalone: "oko 1 sat",
      withPrepositionAgo: "oko 1 sat",
      withPrepositionIn: "oko 1 sat"
    },
    dual: "oko {{count}} sata",
    other: "oko {{count}} sati"
  },
  xHours: {
    one: {
      standalone: "1 sat",
      withPrepositionAgo: "1 sat",
      withPrepositionIn: "1 sat"
    },
    dual: "{{count}} sata",
    other: "{{count}} sati"
  },
  xDays: {
    one: {
      standalone: "1 dan",
      withPrepositionAgo: "1 dan",
      withPrepositionIn: "1 dan"
    },
    dual: "{{count}} dana",
    other: "{{count}} dana"
  },
  aboutXWeeks: {
    one: {
      standalone: "oko 1 sedmicu",
      withPrepositionAgo: "oko 1 sedmicu",
      withPrepositionIn: "oko 1 sedmicu"
    },
    dual: "oko {{count}} sedmice",
    other: "oko {{count}} sedmice"
  },
  xWeeks: {
    one: {
      standalone: "1 sedmicu",
      withPrepositionAgo: "1 sedmicu",
      withPrepositionIn: "1 sedmicu"
    },
    dual: "{{count}} sedmice",
    other: "{{count}} sedmice"
  },
  aboutXMonths: {
    one: {
      standalone: "oko 1 mjesec",
      withPrepositionAgo: "oko 1 mjesec",
      withPrepositionIn: "oko 1 mjesec"
    },
    dual: "oko {{count}} mjeseca",
    other: "oko {{count}} mjeseci"
  },
  xMonths: {
    one: {
      standalone: "1 mjesec",
      withPrepositionAgo: "1 mjesec",
      withPrepositionIn: "1 mjesec"
    },
    dual: "{{count}} mjeseca",
    other: "{{count}} mjeseci"
  },
  aboutXYears: {
    one: {
      standalone: "oko 1 godinu",
      withPrepositionAgo: "oko 1 godinu",
      withPrepositionIn: "oko 1 godinu"
    },
    dual: "oko {{count}} godine",
    other: "oko {{count}} godina"
  },
  xYears: {
    one: {
      standalone: "1 godina",
      withPrepositionAgo: "1 godine",
      withPrepositionIn: "1 godinu"
    },
    dual: "{{count}} godine",
    other: "{{count}} godina"
  },
  overXYears: {
    one: {
      standalone: "preko 1 godinu",
      withPrepositionAgo: "preko 1 godinu",
      withPrepositionIn: "preko 1 godinu"
    },
    dual: "preko {{count}} godine",
    other: "preko {{count}} godina"
  },
  almostXYears: {
    one: {
      standalone: "gotovo 1 godinu",
      withPrepositionAgo: "gotovo 1 godinu",
      withPrepositionIn: "gotovo 1 godinu"
    },
    dual: "gotovo {{count}} godine",
    other: "gotovo {{count}} godina"
  }
};
var bs_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = bs_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== "1") {
    result = tokenValue.dual.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "za " + result;
    } else {
      return "prije " + result;
    }
  }
  return result;
};
/* harmony default export */ const bs_lib_formatDistance = (bs_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/formatLong/index.js

var bs_lib_formatLong_dateFormats = {
  full: "EEEE, d. MMMM yyyy.",
  long: "d. MMMM yyyy.",
  medium: "d. MMM yy.",
  short: "dd. MM. yy."
};
var bs_lib_formatLong_timeFormats = {
  full: "HH:mm:ss (zzzz)",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var bs_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var bs_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: bs_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: bs_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: bs_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const bs_lib_formatLong = (bs_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/formatRelative/index.js
var bs_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'pro\u0161le nedjelje u' p";
      case 3:
        return "'pro\u0161le srijede u' p";
      case 6:
        return "'pro\u0161le subote u' p";
      default:
        return "'pro\u0161li' EEEE 'u' p";
    }
  },
  yesterday: "'ju\u010De u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: function nextWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'sljede\u0107e nedjelje u' p";
      case 3:
        return "'sljede\u0107u srijedu u' p";
      case 6:
        return "'sljede\u0107u subotu u' p";
      default:
        return "'sljede\u0107i' EEEE 'u' p";
    }
  },
  other: "P"
};
var bs_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  var format = bs_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const bs_lib_formatRelative = (bs_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/localize/index.js

var bs_lib_localize_eraValues = {
  narrow: ["pr.n.e.", "AD"],
  abbreviated: ["pr. Hr.", "po. Hr."],
  wide: ["Prije Hrista", "Poslije Hrista"]
};
var bs_lib_localize_quarterValues = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
};
var bs_lib_localize_monthValues = {
  narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
  abbreviated: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec"],
  wide: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar"]
};
var _lib_localize_formattingMonthValues = {
  narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
  abbreviated: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec"],
  wide: ["januar", "februar", "mart", "april", "maj", "juni", "juli", "avgust", "septembar", "oktobar", "novembar", "decembar"]
};
var bs_lib_localize_dayValues = {
  narrow: ["N", "P", "U", "S", "\u010C", "P", "S"],
  short: ["ned", "pon", "uto", "sre", "\u010Det", "pet", "sub"],
  abbreviated: ["ned", "pon", "uto", "sre", "\u010Det", "pet", "sub"],
  wide: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "\u010Detvrtak", "petak", "subota"]
};
var bs_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uve\u010De",
    night: "no\u0107u"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uve\u010De",
    night: "no\u0107u"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "poslije podne",
    evening: "uve\u010De",
    night: "no\u0107u"
  }
};
var bs_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uve\u010De",
    night: "no\u0107u"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uve\u010De",
    night: "no\u0107u"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "poslije podne",
    evening: "uve\u010De",
    night: "no\u0107u"
  }
};
var bs_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return String(number) + ".";
};
var bs_lib_localize_localize = {
  ordinalNumber: bs_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: _lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: bs_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: bs_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const bs_lib_localize = (bs_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/_lib/match/index.js


var bs_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var bs_lib_match_parseOrdinalNumberPattern = /\d+/i;
var bs_lib_match_matchEraPatterns = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
  wide: /^(Prije Hrista|prije nove ere|Poslije Hrista|nova era)/i
};
var bs_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|nova)/i]
};
var bs_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i
};
var bs_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var bs_lib_match_matchMonthPatterns = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
  wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(juni|juna)|(juli|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
};
var bs_lib_match_parseMonthPatterns = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^avg/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var bs_lib_match_matchDayPatterns = {
  narrow: /^[npusčc]/i,
  short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
  wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i
};
var bs_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var bs_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|poslije podne|ujutru)/i
};
var bs_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(poslije\s|po)+podne/i,
    evening: /(uvece|uveče)/i,
    night: /(nocu|noću)/i
  }
};
var bs_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: bs_lib_match_matchOrdinalNumberPattern,
    parsePattern: bs_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bs_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bs_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bs_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: bs_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: bs_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: bs_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const bs_lib_match = (bs_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/bs/index.js





var bs_locale = {
  code: "bs",
  formatDistance: bs_lib_formatDistance,
  formatLong: bs_lib_formatLong,
  formatRelative: bs_lib_formatRelative,
  localize: bs_lib_localize,
  match: bs_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const bs = (bs_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/formatDistance/index.js
var ca_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "menys d'un segon",
    eleven: "menys d'onze segons",
    other: "menys de {{count}} segons"
  },
  xSeconds: {
    one: "1 segon",
    other: "{{count}} segons"
  },
  halfAMinute: "mig minut",
  lessThanXMinutes: {
    one: "menys d'un minut",
    eleven: "menys d'onze minuts",
    other: "menys de {{count}} minuts"
  },
  xMinutes: {
    one: "1 minut",
    other: "{{count}} minuts"
  },
  aboutXHours: {
    one: "aproximadament una hora",
    other: "aproximadament {{count}} hores"
  },
  xHours: {
    one: "1 hora",
    other: "{{count}} hores"
  },
  xDays: {
    one: "1 dia",
    other: "{{count}} dies"
  },
  aboutXWeeks: {
    one: "aproximadament una setmana",
    other: "aproximadament {{count}} setmanes"
  },
  xWeeks: {
    one: "1 setmana",
    other: "{{count}} setmanes"
  },
  aboutXMonths: {
    one: "aproximadament un mes",
    other: "aproximadament {{count}} mesos"
  },
  xMonths: {
    one: "1 mes",
    other: "{{count}} mesos"
  },
  aboutXYears: {
    one: "aproximadament un any",
    other: "aproximadament {{count}} anys"
  },
  xYears: {
    one: "1 any",
    other: "{{count}} anys"
  },
  overXYears: {
    one: "m\xE9s d'un any",
    eleven: "m\xE9s d'onze anys",
    other: "m\xE9s de {{count}} anys"
  },
  almostXYears: {
    one: "gaireb\xE9 un any",
    other: "gaireb\xE9 {{count}} anys"
  }
};
var ca_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = ca_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 11 && tokenValue.eleven) {
    result = tokenValue.eleven;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "en " + result;
    } else {
      return "fa " + result;
    }
  }
  return result;
};
/* harmony default export */ const ca_lib_formatDistance = (ca_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/formatLong/index.js

var ca_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y"
};
var ca_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var ca_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'a les' {{time}}",
  long: "{{date}} 'a les' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ca_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ca_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ca_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ca_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ca_lib_formatLong = (ca_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/formatRelative/index.js
var ca_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'el' eeee 'passat a la' LT",
  yesterday: "'ahir a la' p",
  today: "'avui a la' p",
  tomorrow: "'dem\xE0 a la' p",
  nextWeek: "eeee 'a la' p",
  other: "P"
};
var formatRelativeLocalePlural = {
  lastWeek: "'el' eeee 'passat a les' p",
  yesterday: "'ahir a les' p",
  today: "'avui a les' p",
  tomorrow: "'dem\xE0 a les' p",
  nextWeek: "eeee 'a les' p",
  other: "P"
};
var ca_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return formatRelativeLocalePlural[token];
  }
  return ca_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ca_lib_formatRelative = (ca_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/localize/index.js

var ca_lib_localize_eraValues = {
  narrow: ["aC", "dC"],
  abbreviated: ["a. de C.", "d. de C."],
  wide: ["abans de Crist", "despr\xE9s de Crist"]
};
var ca_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1r trimestre", "2n trimestre", "3r trimestre", "4t trimestre"]
};
var ca_lib_localize_monthValues = {
  narrow: ["GN", "FB", "M\xC7", "AB", "MG", "JN", "JL", "AG", "ST", "OC", "NV", "DS"],
  /**
   * Les abreviatures dels mesos de l'any es formen seguint una de les normes generals de formació d'abreviatures.
   * S'escriu la primera síl·laba i les consonants de la síl·laba següent anteriors a la primera vocal.
   * Els mesos de març, maig i juny no s'abreugen perquè són paraules d'una sola síl·laba.
   */
  abbreviated: ["gen.", "febr.", "mar\xE7", "abr.", "maig", "juny", "jul.", "ag.", "set.", "oct.", "nov.", "des."],
  wide: ["gener", "febrer", "mar\xE7", "abril", "maig", "juny", "juliol", "agost", "setembre", "octubre", "novembre", "desembre"]
};
var ca_lib_localize_dayValues = {
  narrow: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
  short: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
  abbreviated: ["dg.", "dl.", "dt.", "dm.", "dj.", "dv.", "ds."],
  wide: ["diumenge", "dilluns", "dimarts", "dimecres", "dijous", "divendres", "dissabte"]
};
var ca_lib_localize_dayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "mitjanit",
    noon: "migdia",
    morning: "mat\xED",
    afternoon: "tarda",
    evening: "vespre",
    night: "nit"
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "mitjanit",
    noon: "migdia",
    morning: "mat\xED",
    afternoon: "tarda",
    evening: "vespre",
    night: "nit"
  },
  wide: {
    am: "ante meridiem",
    pm: "post meridiem",
    midnight: "mitjanit",
    noon: "migdia",
    morning: "mat\xED",
    afternoon: "tarda",
    evening: "vespre",
    night: "nit"
  }
};
var ca_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "de la mitjanit",
    noon: "del migdia",
    morning: "del mat\xED",
    afternoon: "de la tarda",
    evening: "del vespre",
    night: "de la nit"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "de la mitjanit",
    noon: "del migdia",
    morning: "del mat\xED",
    afternoon: "de la tarda",
    evening: "del vespre",
    night: "de la nit"
  },
  wide: {
    am: "ante meridiem",
    pm: "post meridiem",
    midnight: "de la mitjanit",
    noon: "del migdia",
    morning: "del mat\xED",
    afternoon: "de la tarda",
    evening: "del vespre",
    night: "de la nit"
  }
};
var ca_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "r";
      case 2:
        return number + "n";
      case 3:
        return number + "r";
      case 4:
        return number + "t";
    }
  }
  return number + "\xE8";
};
var ca_lib_localize_localize = {
  ordinalNumber: ca_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ca_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ca_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ca_lib_localize = (ca_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/_lib/match/index.js


var ca_lib_match_matchOrdinalNumberPattern = /^(\d+)(è|r|n|r|t)?/i;
var ca_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ca_lib_match_matchEraPatterns = {
  narrow: /^(aC|dC)/i,
  abbreviated: /^(a. de C.|d. de C.)/i,
  wide: /^(abans de Crist|despr[eé]s de Crist)/i
};
var ca_lib_match_parseEraPatterns = {
  narrow: [/^aC/i, /^dC/i],
  abbreviated: [/^(a. de C.)/i, /^(d. de C.)/i],
  wide: [/^(abans de Crist)/i, /^(despr[eé]s de Crist)/i]
};
var ca_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](è|r|n|r|t)? trimestre/i
};
var ca_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ca_lib_match_matchMonthPatterns = {
  narrow: /^(GN|FB|MÇ|AB|MG|JN|JL|AG|ST|OC|NV|DS)/i,
  abbreviated: /^(gen.|febr.|març|abr.|maig|juny|jul.|ag.|set.|oct.|nov.|des.)/i,
  wide: /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i
};
var ca_lib_match_parseMonthPatterns = {
  narrow: [/^GN/i, /^FB/i, /^MÇ/i, /^AB/i, /^MG/i, /^JN/i, /^JL/i, /^AG/i, /^ST/i, /^OC/i, /^NV/i, /^DS/i],
  abbreviated: [/^gen./i, /^febr./i, /^març/i, /^abr./i, /^maig/i, /^juny/i, /^jul./i, /^ag./i, /^set./i, /^oct./i, /^nov./i, /^des./i],
  wide: [/^gener/i, /^febrer/i, /^març/i, /^abril/i, /^maig/i, /^juny/i, /^juliol/i, /^agost/i, /^setembre/i, /^octubre/i, /^novembre/i, /^desembre/i]
};
var ca_lib_match_matchDayPatterns = {
  narrow: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  short: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  abbreviated: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
  wide: /^(diumenge|dilluns|dimarts|dimecres|dijous|divendres|dissabte)/i
};
var ca_lib_match_parseDayPatterns = {
  narrow: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
  abbreviated: [/^dg./i, /^dl./i, /^dt./i, /^dm./i, /^dj./i, /^dv./i, /^ds./i],
  wide: [/^diumenge/i, /^dilluns/i, /^dimarts/i, /^dimecres/i, /^dijous/i, /^divendres/i, /^disssabte/i]
};
var ca_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|md|(del|de la) (matí|tarda|vespre|nit))/i,
  abbreviated: /^([ap]\.?\s?m\.?|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i,
  wide: /^(ante meridiem|post meridiem|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i
};
var ca_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mitjanit/i,
    noon: /^migdia/i,
    morning: /matí/i,
    afternoon: /tarda/i,
    evening: /vespre/i,
    night: /nit/i
  }
};
var ca_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ca_lib_match_matchOrdinalNumberPattern,
    parsePattern: ca_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ca_lib_match_parseEraPatterns,
    defaultParseWidth: "wide"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ca_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ca_lib_match_parseMonthPatterns,
    defaultParseWidth: "wide"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ca_lib_match_parseDayPatterns,
    defaultParseWidth: "wide"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ca_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ca_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ca_lib_match = (ca_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ca/index.js





var ca_locale = {
  code: "ca",
  formatDistance: ca_lib_formatDistance,
  formatLong: ca_lib_formatLong,
  formatRelative: ca_lib_formatRelative,
  localize: ca_lib_localize,
  match: ca_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const ca = (ca_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/formatDistance/index.js
var cs_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      regular: "m\xE9n\u011B ne\u017E sekunda",
      past: "p\u0159ed m\xE9n\u011B ne\u017E sekundou",
      future: "za m\xE9n\u011B ne\u017E sekundu"
    },
    few: {
      regular: "m\xE9n\u011B ne\u017E {{count}} sekundy",
      past: "p\u0159ed m\xE9n\u011B ne\u017E {{count}} sekundami",
      future: "za m\xE9n\u011B ne\u017E {{count}} sekundy"
    },
    many: {
      regular: "m\xE9n\u011B ne\u017E {{count}} sekund",
      past: "p\u0159ed m\xE9n\u011B ne\u017E {{count}} sekundami",
      future: "za m\xE9n\u011B ne\u017E {{count}} sekund"
    }
  },
  xSeconds: {
    one: {
      regular: "sekunda",
      past: "p\u0159ed sekundou",
      future: "za sekundu"
    },
    few: {
      regular: "{{count}} sekundy",
      past: "p\u0159ed {{count}} sekundami",
      future: "za {{count}} sekundy"
    },
    many: {
      regular: "{{count}} sekund",
      past: "p\u0159ed {{count}} sekundami",
      future: "za {{count}} sekund"
    }
  },
  halfAMinute: {
    type: "other",
    other: {
      regular: "p\u016Fl minuty",
      past: "p\u0159ed p\u016Fl minutou",
      future: "za p\u016Fl minuty"
    }
  },
  lessThanXMinutes: {
    one: {
      regular: "m\xE9n\u011B ne\u017E minuta",
      past: "p\u0159ed m\xE9n\u011B ne\u017E minutou",
      future: "za m\xE9n\u011B ne\u017E minutu"
    },
    few: {
      regular: "m\xE9n\u011B ne\u017E {{count}} minuty",
      past: "p\u0159ed m\xE9n\u011B ne\u017E {{count}} minutami",
      future: "za m\xE9n\u011B ne\u017E {{count}} minuty"
    },
    many: {
      regular: "m\xE9n\u011B ne\u017E {{count}} minut",
      past: "p\u0159ed m\xE9n\u011B ne\u017E {{count}} minutami",
      future: "za m\xE9n\u011B ne\u017E {{count}} minut"
    }
  },
  xMinutes: {
    one: {
      regular: "minuta",
      past: "p\u0159ed minutou",
      future: "za minutu"
    },
    few: {
      regular: "{{count}} minuty",
      past: "p\u0159ed {{count}} minutami",
      future: "za {{count}} minuty"
    },
    many: {
      regular: "{{count}} minut",
      past: "p\u0159ed {{count}} minutami",
      future: "za {{count}} minut"
    }
  },
  aboutXHours: {
    one: {
      regular: "p\u0159ibli\u017En\u011B hodina",
      past: "p\u0159ibli\u017En\u011B p\u0159ed hodinou",
      future: "p\u0159ibli\u017En\u011B za hodinu"
    },
    few: {
      regular: "p\u0159ibli\u017En\u011B {{count}} hodiny",
      past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} hodinami",
      future: "p\u0159ibli\u017En\u011B za {{count}} hodiny"
    },
    many: {
      regular: "p\u0159ibli\u017En\u011B {{count}} hodin",
      past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} hodinami",
      future: "p\u0159ibli\u017En\u011B za {{count}} hodin"
    }
  },
  xHours: {
    one: {
      regular: "hodina",
      past: "p\u0159ed hodinou",
      future: "za hodinu"
    },
    few: {
      regular: "{{count}} hodiny",
      past: "p\u0159ed {{count}} hodinami",
      future: "za {{count}} hodiny"
    },
    many: {
      regular: "{{count}} hodin",
      past: "p\u0159ed {{count}} hodinami",
      future: "za {{count}} hodin"
    }
  },
  xDays: {
    one: {
      regular: "den",
      past: "p\u0159ed dnem",
      future: "za den"
    },
    few: {
      regular: "{{count}} dny",
      past: "p\u0159ed {{count}} dny",
      future: "za {{count}} dny"
    },
    many: {
      regular: "{{count}} dn\xED",
      past: "p\u0159ed {{count}} dny",
      future: "za {{count}} dn\xED"
    }
  },
  aboutXWeeks: {
    one: {
      regular: "p\u0159ibli\u017En\u011B t\xFDden",
      past: "p\u0159ibli\u017En\u011B p\u0159ed t\xFDdnem",
      future: "p\u0159ibli\u017En\u011B za t\xFDden"
    },
    few: {
      regular: "p\u0159ibli\u017En\u011B {{count}} t\xFDdny",
      past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} t\xFDdny",
      future: "p\u0159ibli\u017En\u011B za {{count}} t\xFDdny"
    },
    many: {
      regular: "p\u0159ibli\u017En\u011B {{count}} t\xFDdn\u016F",
      past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} t\xFDdny",
      future: "p\u0159ibli\u017En\u011B za {{count}} t\xFDdn\u016F"
    }
  },
  xWeeks: {
    one: {
      regular: "t\xFDden",
      past: "p\u0159ed t\xFDdnem",
      future: "za t\xFDden"
    },
    few: {
      regular: "{{count}} t\xFDdny",
      past: "p\u0159ed {{count}} t\xFDdny",
      future: "za {{count}} t\xFDdny"
    },
    many: {
      regular: "{{count}} t\xFDdn\u016F",
      past: "p\u0159ed {{count}} t\xFDdny",
      future: "za {{count}} t\xFDdn\u016F"
    }
  },
  aboutXMonths: {
    one: {
      regular: "p\u0159ibli\u017En\u011B m\u011Bs\xEDc",
      past: "p\u0159ibli\u017En\u011B p\u0159ed m\u011Bs\xEDcem",
      future: "p\u0159ibli\u017En\u011B za m\u011Bs\xEDc"
    },
    few: {
      regular: "p\u0159ibli\u017En\u011B {{count}} m\u011Bs\xEDce",
      past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} m\u011Bs\xEDci",
      future: "p\u0159ibli\u017En\u011B za {{count}} m\u011Bs\xEDce"
    },
    many: {
      regular: "p\u0159ibli\u017En\u011B {{count}} m\u011Bs\xEDc\u016F",
      past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} m\u011Bs\xEDci",
      future: "p\u0159ibli\u017En\u011B za {{count}} m\u011Bs\xEDc\u016F"
    }
  },
  xMonths: {
    one: {
      regular: "m\u011Bs\xEDc",
      past: "p\u0159ed m\u011Bs\xEDcem",
      future: "za m\u011Bs\xEDc"
    },
    few: {
      regular: "{{count}} m\u011Bs\xEDce",
      past: "p\u0159ed {{count}} m\u011Bs\xEDci",
      future: "za {{count}} m\u011Bs\xEDce"
    },
    many: {
      regular: "{{count}} m\u011Bs\xEDc\u016F",
      past: "p\u0159ed {{count}} m\u011Bs\xEDci",
      future: "za {{count}} m\u011Bs\xEDc\u016F"
    }
  },
  aboutXYears: {
    one: {
      regular: "p\u0159ibli\u017En\u011B rok",
      past: "p\u0159ibli\u017En\u011B p\u0159ed rokem",
      future: "p\u0159ibli\u017En\u011B za rok"
    },
    few: {
      regular: "p\u0159ibli\u017En\u011B {{count}} roky",
      past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} roky",
      future: "p\u0159ibli\u017En\u011B za {{count}} roky"
    },
    many: {
      regular: "p\u0159ibli\u017En\u011B {{count}} rok\u016F",
      past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} roky",
      future: "p\u0159ibli\u017En\u011B za {{count}} rok\u016F"
    }
  },
  xYears: {
    one: {
      regular: "rok",
      past: "p\u0159ed rokem",
      future: "za rok"
    },
    few: {
      regular: "{{count}} roky",
      past: "p\u0159ed {{count}} roky",
      future: "za {{count}} roky"
    },
    many: {
      regular: "{{count}} rok\u016F",
      past: "p\u0159ed {{count}} roky",
      future: "za {{count}} rok\u016F"
    }
  },
  overXYears: {
    one: {
      regular: "v\xEDce ne\u017E rok",
      past: "p\u0159ed v\xEDce ne\u017E rokem",
      future: "za v\xEDce ne\u017E rok"
    },
    few: {
      regular: "v\xEDce ne\u017E {{count}} roky",
      past: "p\u0159ed v\xEDce ne\u017E {{count}} roky",
      future: "za v\xEDce ne\u017E {{count}} roky"
    },
    many: {
      regular: "v\xEDce ne\u017E {{count}} rok\u016F",
      past: "p\u0159ed v\xEDce ne\u017E {{count}} roky",
      future: "za v\xEDce ne\u017E {{count}} rok\u016F"
    }
  },
  almostXYears: {
    one: {
      regular: "skoro rok",
      past: "skoro p\u0159ed rokem",
      future: "skoro za rok"
    },
    few: {
      regular: "skoro {{count}} roky",
      past: "skoro p\u0159ed {{count}} roky",
      future: "skoro za {{count}} roky"
    },
    many: {
      regular: "skoro {{count}} rok\u016F",
      past: "skoro p\u0159ed {{count}} roky",
      future: "skoro za {{count}} rok\u016F"
    }
  }
};
var cs_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var pluralResult;
  var tokenValue = cs_lib_formatDistance_formatDistanceLocale[token];
  if (tokenValue.type === "other") {
    pluralResult = tokenValue.other;
  } else if (count === 1) {
    pluralResult = tokenValue.one;
  } else if (count > 1 && count < 5) {
    pluralResult = tokenValue.few;
  } else {
    pluralResult = tokenValue.many;
  }
  var suffixExist = (options === null || options === void 0 ? void 0 : options.addSuffix) === true;
  var comparison = options === null || options === void 0 ? void 0 : options.comparison;
  var timeResult;
  if (suffixExist && comparison === -1) {
    timeResult = pluralResult.past;
  } else if (suffixExist && comparison === 1) {
    timeResult = pluralResult.future;
  } else {
    timeResult = pluralResult.regular;
  }
  return timeResult.replace("{{count}}", String(count));
};
/* harmony default export */ const cs_lib_formatDistance = (cs_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/formatLong/index.js

var cs_lib_formatLong_dateFormats = {
  full: "EEEE, d. MMMM yyyy",
  long: "d. MMMM yyyy",
  medium: "d. M. yyyy",
  short: "dd.MM.yyyy"
};
var cs_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var cs_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'v' {{time}}",
  long: "{{date}} 'v' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var cs_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: cs_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: cs_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: cs_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const cs_lib_formatLong = (cs_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/formatRelative/index.js
var _lib_formatRelative_accusativeWeekdays = ["ned\u011Bli", "pond\u011Bl\xED", "\xFAter\xFD", "st\u0159edu", "\u010Dtvrtek", "p\xE1tek", "sobotu"];
var cs_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'posledn\xED' eeee 've' p",
  yesterday: "'v\u010Dera v' p",
  today: "'dnes v' p",
  tomorrow: "'z\xEDtra v' p",
  nextWeek: function nextWeek(date) {
    var day = date.getUTCDay();
    return "'v " + _lib_formatRelative_accusativeWeekdays[day] + " o' p";
  },
  other: "P"
};
var cs_lib_formatRelative_formatRelative = function formatRelative2(token, date) {
  var format = cs_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const cs_lib_formatRelative = (cs_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/localize/index.js

var cs_lib_localize_eraValues = {
  narrow: ["p\u0159. n. l.", "n. l."],
  abbreviated: ["p\u0159. n. l.", "n. l."],
  wide: ["p\u0159ed na\u0161\xEDm letopo\u010Dtem", "na\u0161eho letopo\u010Dtu"]
};
var cs_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. \u010Dtvrtlet\xED", "2. \u010Dtvrtlet\xED", "3. \u010Dtvrtlet\xED", "4. \u010Dtvrtlet\xED"],
  wide: ["1. \u010Dtvrtlet\xED", "2. \u010Dtvrtlet\xED", "3. \u010Dtvrtlet\xED", "4. \u010Dtvrtlet\xED"]
};
var cs_lib_localize_monthValues = {
  narrow: ["L", "\xDA", "B", "D", "K", "\u010C", "\u010C", "S", "Z", "\u0158", "L", "P"],
  abbreviated: ["led", "\xFAno", "b\u0159e", "dub", "kv\u011B", "\u010Dvn", "\u010Dvc", "srp", "z\xE1\u0159", "\u0159\xEDj", "lis", "pro"],
  wide: ["leden", "\xFAnor", "b\u0159ezen", "duben", "kv\u011Bten", "\u010Derven", "\u010Dervenec", "srpen", "z\xE1\u0159\xED", "\u0159\xEDjen", "listopad", "prosinec"]
};
var cs_lib_localize_formattingMonthValues = {
  narrow: ["L", "\xDA", "B", "D", "K", "\u010C", "\u010C", "S", "Z", "\u0158", "L", "P"],
  abbreviated: ["led", "\xFAno", "b\u0159e", "dub", "kv\u011B", "\u010Dvn", "\u010Dvc", "srp", "z\xE1\u0159", "\u0159\xEDj", "lis", "pro"],
  wide: ["ledna", "\xFAnora", "b\u0159ezna", "dubna", "kv\u011Btna", "\u010Dervna", "\u010Dervence", "srpna", "z\xE1\u0159\xED", "\u0159\xEDjna", "listopadu", "prosince"]
};
var cs_lib_localize_dayValues = {
  narrow: ["ne", "po", "\xFAt", "st", "\u010Dt", "p\xE1", "so"],
  short: ["ne", "po", "\xFAt", "st", "\u010Dt", "p\xE1", "so"],
  abbreviated: ["ned", "pon", "\xFAte", "st\u0159", "\u010Dtv", "p\xE1t", "sob"],
  wide: ["ned\u011Ble", "pond\u011Bl\xED", "\xFAter\xFD", "st\u0159eda", "\u010Dtvrtek", "p\xE1tek", "sobota"]
};
var cs_lib_localize_dayPeriodValues = {
  narrow: {
    am: "dop.",
    pm: "odp.",
    midnight: "p\u016Flnoc",
    noon: "poledne",
    morning: "r\xE1no",
    afternoon: "odpoledne",
    evening: "ve\u010Der",
    night: "noc"
  },
  abbreviated: {
    am: "dop.",
    pm: "odp.",
    midnight: "p\u016Flnoc",
    noon: "poledne",
    morning: "r\xE1no",
    afternoon: "odpoledne",
    evening: "ve\u010Der",
    night: "noc"
  },
  wide: {
    am: "dopoledne",
    pm: "odpoledne",
    midnight: "p\u016Flnoc",
    noon: "poledne",
    morning: "r\xE1no",
    afternoon: "odpoledne",
    evening: "ve\u010Der",
    night: "noc"
  }
};
var cs_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "dop.",
    pm: "odp.",
    midnight: "p\u016Flnoc",
    noon: "poledne",
    morning: "r\xE1no",
    afternoon: "odpoledne",
    evening: "ve\u010Der",
    night: "noc"
  },
  abbreviated: {
    am: "dop.",
    pm: "odp.",
    midnight: "p\u016Flnoc",
    noon: "poledne",
    morning: "r\xE1no",
    afternoon: "odpoledne",
    evening: "ve\u010Der",
    night: "noc"
  },
  wide: {
    am: "dopoledne",
    pm: "odpoledne",
    midnight: "p\u016Flnoc",
    noon: "poledne",
    morning: "r\xE1no",
    afternoon: "odpoledne",
    evening: "ve\u010Der",
    night: "noc"
  }
};
var cs_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var cs_lib_localize_localize = {
  ordinalNumber: cs_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: cs_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: cs_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: cs_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const cs_lib_localize = (cs_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/_lib/match/index.js


var cs_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var cs_lib_match_parseOrdinalNumberPattern = /\d+/i;
var cs_lib_match_matchEraPatterns = {
  narrow: /^(p[řr](\.|ed) Kr\.|p[řr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(p[řr](\.|ed) Kr\.|p[řr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(p[řr](\.|ed) Kristem|p[řr](\.|ed) na[šs][íi]m letopo[čc]tem|po Kristu|na[šs]eho letopo[čc]tu)/i
};
var cs_lib_match_parseEraPatterns = {
  any: [/^p[řr]/i, /^(po|n)/i]
};
var cs_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\. [čc]tvrtlet[íi]/i,
  wide: /^[1234]\. [čc]tvrtlet[íi]/i
};
var cs_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var cs_lib_match_matchMonthPatterns = {
  narrow: /^[lúubdkčcszřrlp]/i,
  abbreviated: /^(led|[úu]no|b[řr]e|dub|kv[ěe]|[čc]vn|[čc]vc|srp|z[áa][řr]|[řr][íi]j|lis|pro)/i,
  wide: /^(leden|ledna|[úu]nora?|b[řr]ezen|b[řr]ezna|duben|dubna|kv[ěe]ten|kv[ěe]tna|[čc]erven(ec|ce)?|[čc]ervna|srpen|srpna|z[áa][řr][íi]|[řr][íi]jen|[řr][íi]jna|listopad(a|u)?|prosinec|prosince)/i
};
var cs_lib_match_parseMonthPatterns = {
  narrow: [/^l/i, /^[úu]/i, /^b/i, /^d/i, /^k/i, /^[čc]/i, /^[čc]/i, /^s/i, /^z/i, /^[řr]/i, /^l/i, /^p/i],
  any: [/^led/i, /^[úu]n/i, /^b[řr]e/i, /^dub/i, /^kv[ěe]/i, /^[čc]vn|[čc]erven(?!\w)|[čc]ervna/i, /^[čc]vc|[čc]erven(ec|ce)/i, /^srp/i, /^z[áa][řr]/i, /^[řr][íi]j/i, /^lis/i, /^pro/i]
};
var cs_lib_match_matchDayPatterns = {
  narrow: /^[npuúsčps]/i,
  short: /^(ne|po|[úu]t|st|[čc]t|p[áa]|so)/i,
  abbreviated: /^(ned|pon|[úu]te|st[rř]|[čc]tv|p[áa]t|sob)/i,
  wide: /^(ned[ěe]le|pond[ěe]l[íi]|[úu]ter[ýy]|st[řr]eda|[čc]tvrtek|p[áa]tek|sobota)/i
};
var cs_lib_match_parseDayPatterns = {
  narrow: [/^n/i, /^p/i, /^[úu]/i, /^s/i, /^[čc]/i, /^p/i, /^s/i],
  any: [/^ne/i, /^po/i, /^[úu]t/i, /^st/i, /^[čc]t/i, /^p[áa]/i, /^so/i]
};
var cs_lib_match_matchDayPeriodPatterns = {
  any: /^dopoledne|dop\.?|odpoledne|odp\.?|p[ůu]lnoc|poledne|r[áa]no|odpoledne|ve[čc]er|(v )?noci?/i
};
var cs_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^dop/i,
    pm: /^odp/i,
    midnight: /^p[ůu]lnoc/i,
    noon: /^poledne/i,
    morning: /r[áa]no/i,
    afternoon: /odpoledne/i,
    evening: /ve[čc]er/i,
    night: /noc/i
  }
};
var cs_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: cs_lib_match_matchOrdinalNumberPattern,
    parsePattern: cs_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: cs_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: cs_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: cs_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: cs_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cs_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: cs_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const cs_lib_match = (cs_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cs/index.js





var cs_locale = {
  code: "cs",
  formatDistance: cs_lib_formatDistance,
  formatLong: cs_lib_formatLong,
  formatRelative: cs_lib_formatRelative,
  localize: cs_lib_localize,
  match: cs_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const cs = (cs_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/formatDistance/index.js
var cy_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "llai na eiliad",
    other: "llai na {{count}} eiliad"
  },
  xSeconds: {
    one: "1 eiliad",
    other: "{{count}} eiliad"
  },
  halfAMinute: "hanner munud",
  lessThanXMinutes: {
    one: "llai na munud",
    two: "llai na 2 funud",
    other: "llai na {{count}} munud"
  },
  xMinutes: {
    one: "1 munud",
    two: "2 funud",
    other: "{{count}} munud"
  },
  aboutXHours: {
    one: "tua 1 awr",
    other: "tua {{count}} awr"
  },
  xHours: {
    one: "1 awr",
    other: "{{count}} awr"
  },
  xDays: {
    one: "1 diwrnod",
    two: "2 ddiwrnod",
    other: "{{count}} diwrnod"
  },
  aboutXWeeks: {
    one: "tua 1 wythnos",
    two: "tua pythefnos",
    other: "tua {{count}} wythnos"
  },
  xWeeks: {
    one: "1 wythnos",
    two: "pythefnos",
    other: "{{count}} wythnos"
  },
  aboutXMonths: {
    one: "tua 1 mis",
    two: "tua 2 fis",
    other: "tua {{count}} mis"
  },
  xMonths: {
    one: "1 mis",
    two: "2 fis",
    other: "{{count}} mis"
  },
  aboutXYears: {
    one: "tua 1 flwyddyn",
    two: "tua 2 flynedd",
    other: "tua {{count}} mlynedd"
  },
  xYears: {
    one: "1 flwyddyn",
    two: "2 flynedd",
    other: "{{count}} mlynedd"
  },
  overXYears: {
    one: "dros 1 flwyddyn",
    two: "dros 2 flynedd",
    other: "dros {{count}} mlynedd"
  },
  almostXYears: {
    one: "bron 1 flwyddyn",
    two: "bron 2 flynedd",
    other: "bron {{count}} mlynedd"
  }
};
var cy_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = cy_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && !!tokenValue.two) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "mewn " + result;
    } else {
      return result + " yn \xF4l";
    }
  }
  return result;
};
/* harmony default export */ const cy_lib_formatDistance = (cy_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/formatLong/index.js

var cy_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy"
};
var cy_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var cy_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'am' {{time}}",
  long: "{{date}} 'am' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var cy_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: cy_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: cy_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: cy_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const cy_lib_formatLong = (cy_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/formatRelative/index.js
var cy_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'diwethaf am' p",
  yesterday: "'ddoe am' p",
  today: "'heddiw am' p",
  tomorrow: "'yfory am' p",
  nextWeek: "eeee 'am' p",
  other: "P"
};
var cy_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return cy_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const cy_lib_formatRelative = (cy_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/localize/index.js

var cy_lib_localize_eraValues = {
  narrow: ["C", "O"],
  abbreviated: ["CC", "OC"],
  wide: ["Cyn Crist", "Ar \xF4l Crist"]
};
var cy_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Ch1", "Ch2", "Ch3", "Ch4"],
  wide: ["Chwarter 1af", "2ail chwarter", "3ydd chwarter", "4ydd chwarter"]
};
var cy_lib_localize_monthValues = {
  narrow: ["I", "Ch", "Ma", "E", "Mi", "Me", "G", "A", "Md", "H", "T", "Rh"],
  abbreviated: ["Ion", "Chwe", "Maw", "Ebr", "Mai", "Meh", "Gor", "Aws", "Med", "Hyd", "Tach", "Rhag"],
  wide: ["Ionawr", "Chwefror", "Mawrth", "Ebrill", "Mai", "Mehefin", "Gorffennaf", "Awst", "Medi", "Hydref", "Tachwedd", "Rhagfyr"]
};
var cy_lib_localize_dayValues = {
  narrow: ["S", "Ll", "M", "M", "I", "G", "S"],
  short: ["Su", "Ll", "Ma", "Me", "Ia", "Gw", "Sa"],
  abbreviated: ["Sul", "Llun", "Maw", "Mer", "Iau", "Gwe", "Sad"],
  wide: ["dydd Sul", "dydd Llun", "dydd Mawrth", "dydd Mercher", "dydd Iau", "dydd Gwener", "dydd Sadwrn"]
};
var cy_lib_localize_dayPeriodValues = {
  narrow: {
    am: "b",
    pm: "h",
    midnight: "hn",
    noon: "hd",
    morning: "bore",
    afternoon: "prynhawn",
    evening: "gyda'r nos",
    night: "nos"
  },
  abbreviated: {
    am: "yb",
    pm: "yh",
    midnight: "hanner nos",
    noon: "hanner dydd",
    morning: "bore",
    afternoon: "prynhawn",
    evening: "gyda'r nos",
    night: "nos"
  },
  wide: {
    am: "y.b.",
    pm: "y.h.",
    midnight: "hanner nos",
    noon: "hanner dydd",
    morning: "bore",
    afternoon: "prynhawn",
    evening: "gyda'r nos",
    night: "nos"
  }
};
var cy_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "b",
    pm: "h",
    midnight: "hn",
    noon: "hd",
    morning: "yn y bore",
    afternoon: "yn y prynhawn",
    evening: "gyda'r nos",
    night: "yn y nos"
  },
  abbreviated: {
    am: "yb",
    pm: "yh",
    midnight: "hanner nos",
    noon: "hanner dydd",
    morning: "yn y bore",
    afternoon: "yn y prynhawn",
    evening: "gyda'r nos",
    night: "yn y nos"
  },
  wide: {
    am: "y.b.",
    pm: "y.h.",
    midnight: "hanner nos",
    noon: "hanner dydd",
    morning: "yn y bore",
    afternoon: "yn y prynhawn",
    evening: "gyda'r nos",
    night: "yn y nos"
  }
};
var cy_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  if (number < 20) {
    switch (number) {
      case 0:
        return number + "fed";
      case 1:
        return number + "af";
      case 2:
        return number + "ail";
      case 3:
      case 4:
        return number + "ydd";
      case 5:
      case 6:
        return number + "ed";
      case 7:
      case 8:
      case 9:
      case 10:
      case 12:
      case 15:
      case 18:
        return number + "fed";
      case 11:
      case 13:
      case 14:
      case 16:
      case 17:
      case 19:
        return number + "eg";
    }
  } else if (number >= 50 && number <= 60 || number === 80 || number >= 100) {
    return number + "fed";
  }
  return number + "ain";
};
var cy_lib_localize_localize = {
  ordinalNumber: cy_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: cy_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: cy_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const cy_lib_localize = (cy_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/_lib/match/index.js


var cy_lib_match_matchOrdinalNumberPattern = /^(\d+)(af|ail|ydd|ed|fed|eg|ain)?/i;
var cy_lib_match_parseOrdinalNumberPattern = /\d+/i;
var cy_lib_match_matchEraPatterns = {
  narrow: /^(c|o)/i,
  abbreviated: /^(c\.?\s?c\.?|o\.?\s?c\.?)/i,
  wide: /^(cyn christ|ar ôl crist|ar ol crist)/i
};
var cy_lib_match_parseEraPatterns = {
  wide: [/^c/i, /^(ar ôl crist|ar ol crist)/i],
  any: [/^c/i, /^o/i]
};
var cy_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ch[1234]/i,
  wide: /^(chwarter 1af)|([234](ail|ydd)? chwarter)/i
};
var cy_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var cy_lib_match_matchMonthPatterns = {
  narrow: /^(i|ch|m|e|g|a|h|t|rh)/i,
  abbreviated: /^(ion|chwe|maw|ebr|mai|meh|gor|aws|med|hyd|tach|rhag)/i,
  wide: /^(ionawr|chwefror|mawrth|ebrill|mai|mehefin|gorffennaf|awst|medi|hydref|tachwedd|rhagfyr)/i
};
var cy_lib_match_parseMonthPatterns = {
  narrow: [/^i/i, /^ch/i, /^m/i, /^e/i, /^m/i, /^m/i, /^g/i, /^a/i, /^m/i, /^h/i, /^t/i, /^rh/i],
  any: [/^io/i, /^ch/i, /^maw/i, /^e/i, /^mai/i, /^meh/i, /^g/i, /^a/i, /^med/i, /^h/i, /^t/i, /^rh/i]
};
var cy_lib_match_matchDayPatterns = {
  narrow: /^(s|ll|m|i|g)/i,
  short: /^(su|ll|ma|me|ia|gw|sa)/i,
  abbreviated: /^(sul|llun|maw|mer|iau|gwe|sad)/i,
  wide: /^dydd (sul|llun|mawrth|mercher|iau|gwener|sadwrn)/i
};
var cy_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^ll/i, /^m/i, /^m/i, /^i/i, /^g/i, /^s/i],
  wide: [/^dydd su/i, /^dydd ll/i, /^dydd ma/i, /^dydd me/i, /^dydd i/i, /^dydd g/i, /^dydd sa/i],
  any: [/^su/i, /^ll/i, /^ma/i, /^me/i, /^i/i, /^g/i, /^sa/i]
};
var cy_lib_match_matchDayPeriodPatterns = {
  narrow: /^(b|h|hn|hd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
  any: /^(y\.?\s?[bh]\.?|hanner nos|hanner dydd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i
};
var cy_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^b|(y\.?\s?b\.?)/i,
    pm: /^h|(y\.?\s?h\.?)|(yr hwyr)/i,
    midnight: /^hn|hanner nos/i,
    noon: /^hd|hanner dydd/i,
    morning: /bore/i,
    afternoon: /prynhawn/i,
    evening: /^gyda'r nos$/i,
    night: /blah/i
  }
};
var cy_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: cy_lib_match_matchOrdinalNumberPattern,
    parsePattern: cy_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: cy_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: cy_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: cy_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: cy_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: cy_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: cy_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const cy_lib_match = (cy_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/cy/index.js





var cy_locale = {
  code: "cy",
  formatDistance: cy_lib_formatDistance,
  formatLong: cy_lib_formatLong,
  formatRelative: cy_lib_formatRelative,
  localize: cy_lib_localize,
  match: cy_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const cy = (cy_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/formatDistance/index.js
var da_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "mindre end \xE9t sekund",
    other: "mindre end {{count}} sekunder"
  },
  xSeconds: {
    one: "1 sekund",
    other: "{{count}} sekunder"
  },
  halfAMinute: "\xE9t halvt minut",
  lessThanXMinutes: {
    one: "mindre end \xE9t minut",
    other: "mindre end {{count}} minutter"
  },
  xMinutes: {
    one: "1 minut",
    other: "{{count}} minutter"
  },
  aboutXHours: {
    one: "cirka 1 time",
    other: "cirka {{count}} timer"
  },
  xHours: {
    one: "1 time",
    other: "{{count}} timer"
  },
  xDays: {
    one: "1 dag",
    other: "{{count}} dage"
  },
  aboutXWeeks: {
    one: "cirka 1 uge",
    other: "cirka {{count}} uger"
  },
  xWeeks: {
    one: "1 uge",
    other: "{{count}} uger"
  },
  aboutXMonths: {
    one: "cirka 1 m\xE5ned",
    other: "cirka {{count}} m\xE5neder"
  },
  xMonths: {
    one: "1 m\xE5ned",
    other: "{{count}} m\xE5neder"
  },
  aboutXYears: {
    one: "cirka 1 \xE5r",
    other: "cirka {{count}} \xE5r"
  },
  xYears: {
    one: "1 \xE5r",
    other: "{{count}} \xE5r"
  },
  overXYears: {
    one: "over 1 \xE5r",
    other: "over {{count}} \xE5r"
  },
  almostXYears: {
    one: "n\xE6sten 1 \xE5r",
    other: "n\xE6sten {{count}} \xE5r"
  }
};
var da_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = da_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " siden";
    }
  }
  return result;
};
/* harmony default export */ const da_lib_formatDistance = (da_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/formatLong/index.js

var da_lib_formatLong_dateFormats = {
  full: "EEEE 'den' d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd/MM/y"
};
var da_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var da_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl'. {{time}}",
  long: "{{date}} 'kl'. {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var da_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: da_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: da_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: da_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const da_lib_formatLong = (da_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/formatRelative/index.js
var da_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'sidste' eeee 'kl.' p",
  yesterday: "'i g\xE5r kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "'p\xE5' eeee 'kl.' p",
  other: "P"
};
var da_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return da_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const da_lib_formatRelative = (da_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/localize/index.js

var da_lib_localize_eraValues = {
  narrow: ["fvt", "vt"],
  abbreviated: ["f.v.t.", "v.t."],
  wide: ["f\xF8r vesterlandsk tidsregning", "vesterlandsk tidsregning"]
};
var da_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. kvt.", "2. kvt.", "3. kvt.", "4. kvt."],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
};
var da_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec."],
  wide: ["januar", "februar", "marts", "april", "maj", "juni", "juli", "august", "september", "oktober", "november", "december"]
};
var da_lib_localize_dayValues = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["s\xF8", "ma", "ti", "on", "to", "fr", "l\xF8"],
  abbreviated: ["s\xF8n.", "man.", "tir.", "ons.", "tor.", "fre.", "l\xF8r."],
  wide: ["s\xF8ndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "l\xF8rdag"]
};
var da_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnat",
    noon: "middag",
    morning: "morgen",
    afternoon: "eftermiddag",
    evening: "aften",
    night: "nat"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnat",
    noon: "middag",
    morning: "morgen",
    afternoon: "eftermiddag",
    evening: "aften",
    night: "nat"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnat",
    noon: "middag",
    morning: "morgen",
    afternoon: "eftermiddag",
    evening: "aften",
    night: "nat"
  }
};
var da_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnat",
    noon: "middag",
    morning: "om morgenen",
    afternoon: "om eftermiddagen",
    evening: "om aftenen",
    night: "om natten"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnat",
    noon: "middag",
    morning: "om morgenen",
    afternoon: "om eftermiddagen",
    evening: "om aftenen",
    night: "om natten"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnat",
    noon: "middag",
    morning: "om morgenen",
    afternoon: "om eftermiddagen",
    evening: "om aftenen",
    night: "om natten"
  }
};
var da_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var da_lib_localize_localize = {
  ordinalNumber: da_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: da_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: da_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const da_lib_localize = (da_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/_lib/match/index.js


var da_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var da_lib_match_parseOrdinalNumberPattern = /\d+/i;
var da_lib_match_matchEraPatterns = {
  narrow: /^(fKr|fvt|eKr|vt)/i,
  abbreviated: /^(f\.Kr\.?|f\.v\.t\.?|e\.Kr\.?|v\.t\.)/i,
  wide: /^(f.Kr.|før vesterlandsk tidsregning|e.Kr.|vesterlandsk tidsregning)/i
};
var da_lib_match_parseEraPatterns = {
  any: [/^f/i, /^(v|e)/i]
};
var da_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]. kvt\./i,
  wide: /^[1234]\.? kvartal/i
};
var da_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var da_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mar.|apr.|maj|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januar|februar|marts|april|maj|juni|juli|august|september|oktober|november|december)/i
};
var da_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var da_lib_match_matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(søn.|man.|tir.|ons.|tor.|fre.|lør.)/i,
  abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
  wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
var da_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^o/i, /^t/i, /^f/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var da_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
  any: /^([ap]\.?\s?m\.?|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i
};
var da_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /midnat/i,
    noon: /middag/i,
    morning: /morgen/i,
    afternoon: /eftermiddag/i,
    evening: /aften/i,
    night: /nat/i
  }
};
var da_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: da_lib_match_matchOrdinalNumberPattern,
    parsePattern: da_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: da_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: da_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: da_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: da_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: da_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: da_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const da_lib_match = (da_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/da/index.js





var da_locale = {
  code: "da",
  formatDistance: da_lib_formatDistance,
  formatLong: da_lib_formatLong,
  formatRelative: da_lib_formatRelative,
  localize: da_lib_localize,
  match: da_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const da = (da_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/formatDistance/index.js
var de_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    standalone: {
      one: "weniger als 1 Sekunde",
      other: "weniger als {{count}} Sekunden"
    },
    withPreposition: {
      one: "weniger als 1 Sekunde",
      other: "weniger als {{count}} Sekunden"
    }
  },
  xSeconds: {
    standalone: {
      one: "1 Sekunde",
      other: "{{count}} Sekunden"
    },
    withPreposition: {
      one: "1 Sekunde",
      other: "{{count}} Sekunden"
    }
  },
  halfAMinute: {
    standalone: "halbe Minute",
    withPreposition: "halben Minute"
  },
  lessThanXMinutes: {
    standalone: {
      one: "weniger als 1 Minute",
      other: "weniger als {{count}} Minuten"
    },
    withPreposition: {
      one: "weniger als 1 Minute",
      other: "weniger als {{count}} Minuten"
    }
  },
  xMinutes: {
    standalone: {
      one: "1 Minute",
      other: "{{count}} Minuten"
    },
    withPreposition: {
      one: "1 Minute",
      other: "{{count}} Minuten"
    }
  },
  aboutXHours: {
    standalone: {
      one: "etwa 1 Stunde",
      other: "etwa {{count}} Stunden"
    },
    withPreposition: {
      one: "etwa 1 Stunde",
      other: "etwa {{count}} Stunden"
    }
  },
  xHours: {
    standalone: {
      one: "1 Stunde",
      other: "{{count}} Stunden"
    },
    withPreposition: {
      one: "1 Stunde",
      other: "{{count}} Stunden"
    }
  },
  xDays: {
    standalone: {
      one: "1 Tag",
      other: "{{count}} Tage"
    },
    withPreposition: {
      one: "1 Tag",
      other: "{{count}} Tagen"
    }
  },
  aboutXWeeks: {
    standalone: {
      one: "etwa 1 Woche",
      other: "etwa {{count}} Wochen"
    },
    withPreposition: {
      one: "etwa 1 Woche",
      other: "etwa {{count}} Wochen"
    }
  },
  xWeeks: {
    standalone: {
      one: "1 Woche",
      other: "{{count}} Wochen"
    },
    withPreposition: {
      one: "1 Woche",
      other: "{{count}} Wochen"
    }
  },
  aboutXMonths: {
    standalone: {
      one: "etwa 1 Monat",
      other: "etwa {{count}} Monate"
    },
    withPreposition: {
      one: "etwa 1 Monat",
      other: "etwa {{count}} Monaten"
    }
  },
  xMonths: {
    standalone: {
      one: "1 Monat",
      other: "{{count}} Monate"
    },
    withPreposition: {
      one: "1 Monat",
      other: "{{count}} Monaten"
    }
  },
  aboutXYears: {
    standalone: {
      one: "etwa 1 Jahr",
      other: "etwa {{count}} Jahre"
    },
    withPreposition: {
      one: "etwa 1 Jahr",
      other: "etwa {{count}} Jahren"
    }
  },
  xYears: {
    standalone: {
      one: "1 Jahr",
      other: "{{count}} Jahre"
    },
    withPreposition: {
      one: "1 Jahr",
      other: "{{count}} Jahren"
    }
  },
  overXYears: {
    standalone: {
      one: "mehr als 1 Jahr",
      other: "mehr als {{count}} Jahre"
    },
    withPreposition: {
      one: "mehr als 1 Jahr",
      other: "mehr als {{count}} Jahren"
    }
  },
  almostXYears: {
    standalone: {
      one: "fast 1 Jahr",
      other: "fast {{count}} Jahre"
    },
    withPreposition: {
      one: "fast 1 Jahr",
      other: "fast {{count}} Jahren"
    }
  }
};
var de_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = options !== null && options !== void 0 && options.addSuffix ? de_lib_formatDistance_formatDistanceLocale[token].withPreposition : de_lib_formatDistance_formatDistanceLocale[token].standalone;
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return "vor " + result;
    }
  }
  return result;
};
/* harmony default export */ const de_lib_formatDistance = (de_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/formatLong/index.js

var de_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y",
  // Montag, 7. Januar 2018
  long: "do MMMM y",
  // 7. Januar 2018
  medium: "do MMM y",
  // 7. Jan. 2018
  short: "dd.MM.y"
  // 07.01.2018
};
var de_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var de_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'um' {{time}}",
  long: "{{date}} 'um' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var de_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: de_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: de_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: de_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const de_lib_formatLong = (de_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/formatRelative/index.js
var de_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'letzten' eeee 'um' p",
  yesterday: "'gestern um' p",
  today: "'heute um' p",
  tomorrow: "'morgen um' p",
  nextWeek: "eeee 'um' p",
  other: "P"
};
var de_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return de_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const de_lib_formatRelative = (de_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/localize/index.js

var de_lib_localize_eraValues = {
  narrow: ["v.Chr.", "n.Chr."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["vor Christus", "nach Christus"]
};
var de_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"]
};
var de_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "M\xE4r", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
  wide: ["Januar", "Februar", "M\xE4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"]
};
var de_lib_localize_formattingMonthValues = {
  narrow: de_lib_localize_monthValues.narrow,
  abbreviated: ["Jan.", "Feb.", "M\xE4rz", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez."],
  wide: de_lib_localize_monthValues.wide
};
var de_lib_localize_dayValues = {
  narrow: ["S", "M", "D", "M", "D", "F", "S"],
  short: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
  abbreviated: ["So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."],
  wide: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"]
};
var de_lib_localize_dayPeriodValues = {
  narrow: {
    am: "vm.",
    pm: "nm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachm.",
    evening: "Abend",
    night: "Nacht"
  },
  abbreviated: {
    am: "vorm.",
    pm: "nachm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachmittag",
    evening: "Abend",
    night: "Nacht"
  },
  wide: {
    am: "vormittags",
    pm: "nachmittags",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachmittag",
    evening: "Abend",
    night: "Nacht"
  }
};
var de_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "vm.",
    pm: "nm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachm.",
    evening: "abends",
    night: "nachts"
  },
  abbreviated: {
    am: "vorm.",
    pm: "nachm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachmittags",
    evening: "abends",
    night: "nachts"
  },
  wide: {
    am: "vormittags",
    pm: "nachmittags",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachmittags",
    evening: "abends",
    night: "nachts"
  }
};
var de_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var de_lib_localize_localize = {
  ordinalNumber: de_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_monthValues,
    formattingValues: de_lib_localize_formattingMonthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: de_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: de_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const de_lib_localize = (de_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/_lib/match/index.js


var de_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var de_lib_match_parseOrdinalNumberPattern = /\d+/i;
var de_lib_match_matchEraPatterns = {
  narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i
};
var de_lib_match_parseEraPatterns = {
  any: [/^v/i, /^n/i]
};
var de_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? Quartal/i
};
var de_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var de_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(j[aä]n|feb|mär[z]?|apr|mai|jun[i]?|jul[i]?|aug|sep|okt|nov|dez)\.?/i,
  wide: /^(januar|februar|märz|april|mai|juni|juli|august|september|oktober|november|dezember)/i
};
var de_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^j[aä]/i, /^f/i, /^mär/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var de_lib_match_matchDayPatterns = {
  narrow: /^[smdmf]/i,
  short: /^(so|mo|di|mi|do|fr|sa)/i,
  abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
  wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i
};
var de_lib_match_parseDayPatterns = {
  any: [/^so/i, /^mo/i, /^di/i, /^mi/i, /^do/i, /^f/i, /^sa/i]
};
var de_lib_match_matchDayPeriodPatterns = {
  narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  abbreviated: /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
  wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i
};
var de_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^v/i,
    pm: /^n/i,
    midnight: /^Mitte/i,
    noon: /^Mitta/i,
    morning: /morgens/i,
    afternoon: /nachmittags/i,
    // will never be matched. Afternoon is matched by `pm`
    evening: /abends/i,
    night: /nachts/i
    // will never be matched. Night is matched by `pm`
  }
};
var de_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: de_lib_match_matchOrdinalNumberPattern,
    parsePattern: de_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: de_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: de_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: de_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: de_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: de_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: de_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const de_lib_match = (de_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de/index.js





var de_locale = {
  code: "de",
  formatDistance: de_lib_formatDistance,
  formatLong: de_lib_formatLong,
  formatRelative: de_lib_formatRelative,
  localize: de_lib_localize,
  match: de_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const de = (de_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de-AT/_lib/localize/index.js

var de_AT_lib_localize_eraValues = {
  narrow: ["v.Chr.", "n.Chr."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["vor Christus", "nach Christus"]
};
var de_AT_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"]
};
var de_AT_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["J\xE4n", "Feb", "M\xE4r", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
  wide: ["J\xE4nner", "Februar", "M\xE4rz", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"]
};
var de_AT_lib_localize_formattingMonthValues = {
  narrow: de_AT_lib_localize_monthValues.narrow,
  abbreviated: ["J\xE4n.", "Feb.", "M\xE4rz", "Apr.", "Mai", "Juni", "Juli", "Aug.", "Sep.", "Okt.", "Nov.", "Dez."],
  wide: de_AT_lib_localize_monthValues.wide
};
var de_AT_lib_localize_dayValues = {
  narrow: ["S", "M", "D", "M", "D", "F", "S"],
  short: ["So", "Mo", "Di", "Mi", "Do", "Fr", "Sa"],
  abbreviated: ["So.", "Mo.", "Di.", "Mi.", "Do.", "Fr.", "Sa."],
  wide: ["Sonntag", "Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag"]
};
var de_AT_lib_localize_dayPeriodValues = {
  narrow: {
    am: "vm.",
    pm: "nm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachm.",
    evening: "Abend",
    night: "Nacht"
  },
  abbreviated: {
    am: "vorm.",
    pm: "nachm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachmittag",
    evening: "Abend",
    night: "Nacht"
  },
  wide: {
    am: "vormittags",
    pm: "nachmittags",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "Morgen",
    afternoon: "Nachmittag",
    evening: "Abend",
    night: "Nacht"
  }
};
var de_AT_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "vm.",
    pm: "nm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachm.",
    evening: "abends",
    night: "nachts"
  },
  abbreviated: {
    am: "vorm.",
    pm: "nachm.",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachmittags",
    evening: "abends",
    night: "nachts"
  },
  wide: {
    am: "vormittags",
    pm: "nachmittags",
    midnight: "Mitternacht",
    noon: "Mittag",
    morning: "morgens",
    afternoon: "nachmittags",
    evening: "abends",
    night: "nachts"
  }
};
var de_AT_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var de_AT_lib_localize_localize = {
  ordinalNumber: de_AT_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_monthValues,
    formattingValues: de_AT_lib_localize_formattingMonthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: de_AT_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: de_AT_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const de_AT_lib_localize = (de_AT_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/de-AT/index.js





var de_AT_locale = {
  code: "de-AT",
  formatDistance: de_lib_formatDistance,
  formatLong: de_lib_formatLong,
  formatRelative: de_lib_formatRelative,
  localize: de_AT_lib_localize,
  match: de_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const de_AT = (de_AT_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/formatDistance/index.js
var el_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u03BB\u03B9\u03B3\u03CC\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC \u03AD\u03BD\u03B1 \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03BF",
    other: "\u03BB\u03B9\u03B3\u03CC\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC {{count}} \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03B1"
  },
  xSeconds: {
    one: "1 \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03BF",
    other: "{{count}} \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03B1"
  },
  halfAMinute: "\u03BC\u03B9\u03C3\u03CC \u03BB\u03B5\u03C0\u03C4\u03CC",
  lessThanXMinutes: {
    one: "\u03BB\u03B9\u03B3\u03CC\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC \u03AD\u03BD\u03B1 \u03BB\u03B5\u03C0\u03C4\u03CC",
    other: "\u03BB\u03B9\u03B3\u03CC\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC {{count}} \u03BB\u03B5\u03C0\u03C4\u03AC"
  },
  xMinutes: {
    one: "1 \u03BB\u03B5\u03C0\u03C4\u03CC",
    other: "{{count}} \u03BB\u03B5\u03C0\u03C4\u03AC"
  },
  aboutXHours: {
    one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03CE\u03C1\u03B1",
    other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03CE\u03C1\u03B5\u03C2"
  },
  xHours: {
    one: "1 \u03CE\u03C1\u03B1",
    other: "{{count}} \u03CE\u03C1\u03B5\u03C2"
  },
  xDays: {
    one: "1 \u03B7\u03BC\u03AD\u03C1\u03B1",
    other: "{{count}} \u03B7\u03BC\u03AD\u03C1\u03B5\u03C2"
  },
  aboutXWeeks: {
    one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B1",
    other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B5\u03C2"
  },
  xWeeks: {
    one: "1 \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B1",
    other: "{{count}} \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B5\u03C2"
  },
  aboutXMonths: {
    one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03BC\u03AE\u03BD\u03B1\u03C2",
    other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03BC\u03AE\u03BD\u03B5\u03C2"
  },
  xMonths: {
    one: "1 \u03BC\u03AE\u03BD\u03B1\u03C2",
    other: "{{count}} \u03BC\u03AE\u03BD\u03B5\u03C2"
  },
  aboutXYears: {
    one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03C7\u03C1\u03CC\u03BD\u03BF",
    other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1"
  },
  xYears: {
    one: "1 \u03C7\u03C1\u03CC\u03BD\u03BF",
    other: "{{count}} \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1"
  },
  overXYears: {
    one: "\u03C0\u03AC\u03BD\u03C9 \u03B1\u03C0\u03CC 1 \u03C7\u03C1\u03CC\u03BD\u03BF",
    other: "\u03C0\u03AC\u03BD\u03C9 \u03B1\u03C0\u03CC {{count}} \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1"
  },
  almostXYears: {
    one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03C7\u03C1\u03CC\u03BD\u03BF",
    other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1"
  }
};
var el_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = el_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u03C3\u03B5 " + result;
    } else {
      return result + " \u03C0\u03C1\u03B9\u03BD";
    }
  }
  return result;
};
/* harmony default export */ const el_lib_formatDistance = (el_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/formatLong/index.js

var el_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "d/M/yy"
};
var el_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var el_lib_formatLong_dateTimeFormats = {
  full: "{{date}} - {{time}}",
  long: "{{date}} - {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var el_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: el_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: el_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: el_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const el_lib_formatLong = (el_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/formatRelative/index.js
var el_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 6:
        return "'\u03C4\u03BF \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03BF' eeee '\u03C3\u03C4\u03B9\u03C2' p";
      default:
        return "'\u03C4\u03B7\u03BD \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03B7' eeee '\u03C3\u03C4\u03B9\u03C2' p";
    }
  },
  yesterday: "'\u03C7\u03B8\u03B5\u03C2 \u03C3\u03C4\u03B9\u03C2' p",
  today: "'\u03C3\u03AE\u03BC\u03B5\u03C1\u03B1 \u03C3\u03C4\u03B9\u03C2' p",
  tomorrow: "'\u03B1\u03CD\u03C1\u03B9\u03BF \u03C3\u03C4\u03B9\u03C2' p",
  nextWeek: "eeee '\u03C3\u03C4\u03B9\u03C2' p",
  other: "P"
};
var el_lib_formatRelative_formatRelative = function formatRelative2(token, date) {
  var format = el_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function")
    return format(date);
  return format;
};
/* harmony default export */ const el_lib_formatRelative = (el_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/localize/index.js

var el_lib_localize_eraValues = {
  narrow: ["\u03C0\u03A7", "\u03BC\u03A7"],
  abbreviated: ["\u03C0.\u03A7.", "\u03BC.\u03A7."],
  wide: ["\u03C0\u03C1\u03BF \u03A7\u03C1\u03B9\u03C3\u03C4\u03BF\u03CD", "\u03BC\u03B5\u03C4\u03AC \u03A7\u03C1\u03B9\u03C3\u03C4\u03CC\u03BD"]
};
var el_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u03A41", "\u03A42", "\u03A43", "\u03A44"],
  wide: ["1\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF", "2\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF", "3\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF", "4\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF"]
};
var el_lib_localize_monthValues = {
  narrow: ["\u0399", "\u03A6", "\u039C", "\u0391", "\u039C", "\u0399", "\u0399", "\u0391", "\u03A3", "\u039F", "\u039D", "\u0394"],
  abbreviated: ["\u0399\u03B1\u03BD", "\u03A6\u03B5\u03B2", "\u039C\u03AC\u03C1", "\u0391\u03C0\u03C1", "\u039C\u03AC\u03B9", "\u0399\u03BF\u03CD\u03BD", "\u0399\u03BF\u03CD\u03BB", "\u0391\u03CD\u03B3", "\u03A3\u03B5\u03C0", "\u039F\u03BA\u03C4", "\u039D\u03BF\u03AD", "\u0394\u03B5\u03BA"],
  wide: ["\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2", "\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2", "\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2", "\u039C\u03AC\u03B9\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2", "\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2", "\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2", "\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2", "\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2", "\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2"]
};
var el_lib_localize_formattingMonthValues = {
  narrow: ["\u0399", "\u03A6", "\u039C", "\u0391", "\u039C", "\u0399", "\u0399", "\u0391", "\u03A3", "\u039F", "\u039D", "\u0394"],
  abbreviated: ["\u0399\u03B1\u03BD", "\u03A6\u03B5\u03B2", "\u039C\u03B1\u03C1", "\u0391\u03C0\u03C1", "\u039C\u03B1\u0390", "\u0399\u03BF\u03C5\u03BD", "\u0399\u03BF\u03C5\u03BB", "\u0391\u03C5\u03B3", "\u03A3\u03B5\u03C0", "\u039F\u03BA\u03C4", "\u039D\u03BF\u03B5", "\u0394\u03B5\u03BA"],
  wide: ["\u0399\u03B1\u03BD\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5", "\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5", "\u039C\u03B1\u03C1\u03C4\u03AF\u03BF\u03C5", "\u0391\u03C0\u03C1\u03B9\u03BB\u03AF\u03BF\u03C5", "\u039C\u03B1\u0390\u03BF\u03C5", "\u0399\u03BF\u03C5\u03BD\u03AF\u03BF\u03C5", "\u0399\u03BF\u03C5\u03BB\u03AF\u03BF\u03C5", "\u0391\u03C5\u03B3\u03BF\u03CD\u03C3\u03C4\u03BF\u03C5", "\u03A3\u03B5\u03C0\u03C4\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5", "\u039F\u03BA\u03C4\u03C9\u03B2\u03C1\u03AF\u03BF\u03C5", "\u039D\u03BF\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5", "\u0394\u03B5\u03BA\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5"]
};
var el_lib_localize_dayValues = {
  narrow: ["\u039A", "\u0394", "T", "\u03A4", "\u03A0", "\u03A0", "\u03A3"],
  short: ["\u039A\u03C5", "\u0394\u03B5", "\u03A4\u03C1", "\u03A4\u03B5", "\u03A0\u03AD", "\u03A0\u03B1", "\u03A3\u03AC"],
  abbreviated: ["\u039A\u03C5\u03C1", "\u0394\u03B5\u03C5", "\u03A4\u03C1\u03AF", "\u03A4\u03B5\u03C4", "\u03A0\u03AD\u03BC", "\u03A0\u03B1\u03C1", "\u03A3\u03AC\u03B2"],
  wide: ["\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE", "\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1", "\u03A4\u03C1\u03AF\u03C4\u03B7", "\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7", "\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7", "\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE", "\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF"]
};
var el_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u03C0\u03BC",
    pm: "\u03BC\u03BC",
    midnight: "\u03BC\u03B5\u03C3\u03AC\u03BD\u03C5\u03C7\u03C4\u03B1",
    noon: "\u03BC\u03B5\u03C3\u03B7\u03BC\u03AD\u03C1\u03B9",
    morning: "\u03C0\u03C1\u03C9\u03AF",
    afternoon: "\u03B1\u03C0\u03CC\u03B3\u03B5\u03C5\u03BC\u03B1",
    evening: "\u03B2\u03C1\u03AC\u03B4\u03C5",
    night: "\u03BD\u03CD\u03C7\u03C4\u03B1"
  },
  abbreviated: {
    am: "\u03C0.\u03BC.",
    pm: "\u03BC.\u03BC.",
    midnight: "\u03BC\u03B5\u03C3\u03AC\u03BD\u03C5\u03C7\u03C4\u03B1",
    noon: "\u03BC\u03B5\u03C3\u03B7\u03BC\u03AD\u03C1\u03B9",
    morning: "\u03C0\u03C1\u03C9\u03AF",
    afternoon: "\u03B1\u03C0\u03CC\u03B3\u03B5\u03C5\u03BC\u03B1",
    evening: "\u03B2\u03C1\u03AC\u03B4\u03C5",
    night: "\u03BD\u03CD\u03C7\u03C4\u03B1"
  },
  wide: {
    am: "\u03C0.\u03BC.",
    pm: "\u03BC.\u03BC.",
    midnight: "\u03BC\u03B5\u03C3\u03AC\u03BD\u03C5\u03C7\u03C4\u03B1",
    noon: "\u03BC\u03B5\u03C3\u03B7\u03BC\u03AD\u03C1\u03B9",
    morning: "\u03C0\u03C1\u03C9\u03AF",
    afternoon: "\u03B1\u03C0\u03CC\u03B3\u03B5\u03C5\u03BC\u03B1",
    evening: "\u03B2\u03C1\u03AC\u03B4\u03C5",
    night: "\u03BD\u03CD\u03C7\u03C4\u03B1"
  }
};
var el_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  var suffix;
  if (unit === "year" || unit === "month") {
    suffix = "\u03BF\u03C2";
  } else if (unit === "week" || unit === "dayOfYear" || unit === "day" || unit === "hour" || unit === "date") {
    suffix = "\u03B7";
  } else {
    suffix = "\u03BF";
  }
  return number + suffix;
};
var el_lib_localize_localize = {
  ordinalNumber: el_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: el_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: el_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const el_lib_localize = (el_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/_lib/match/index.js


var el_lib_match_matchOrdinalNumberPattern = /^(\d+)(ος|η|ο)?/i;
var el_lib_match_parseOrdinalNumberPattern = /\d+/i;
var el_lib_match_matchEraPatterns = {
  narrow: /^(πΧ|μΧ)/i,
  abbreviated: /^(π\.?\s?χ\.?|π\.?\s?κ\.?\s?χ\.?|μ\.?\s?χ\.?|κ\.?\s?χ\.?)/i,
  wide: /^(προ Χριστο(ύ|υ)|πριν απ(ό|ο) την Κοιν(ή|η) Χρονολογ(ί|ι)α|μετ(ά|α) Χριστ(ό|ο)ν|Κοιν(ή|η) Χρονολογ(ί|ι)α)/i
};
var el_lib_match_parseEraPatterns = {
  any: [/^π/i, /^(μ|κ)/i]
};
var el_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^τ[1234]/i,
  wide: /^[1234]ο? τρ(ί|ι)μηνο/i
};
var el_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var el_lib_match_matchMonthPatterns = {
  narrow: /^[ιφμαμιιασονδ]/i,
  abbreviated: /^(ιαν|φεβ|μ[άα]ρ|απρ|μ[άα][ιΐ]|ιο[ύυ]ν|ιο[ύυ]λ|α[ύυ]γ|σεπ|οκτ|νο[έε]|δεκ)/i,
  wide: /^(μ[άα][ιΐ]|α[ύυ]γο[υύ]στ)(ος|ου)|(ιανου[άα]ρ|φεβρου[άα]ρ|μ[άα]ρτ|απρ[ίι]λ|ιο[ύυ]ν|ιο[ύυ]λ|σεπτ[έε]μβρ|οκτ[ώω]βρ|νο[έε]μβρ|δεκ[έε]μβρ)(ιος|ίου)/i
};
var el_lib_match_parseMonthPatterns = {
  narrow: [/^ι/i, /^φ/i, /^μ/i, /^α/i, /^μ/i, /^ι/i, /^ι/i, /^α/i, /^σ/i, /^ο/i, /^ν/i, /^δ/i],
  any: [/^ια/i, /^φ/i, /^μ[άα]ρ/i, /^απ/i, /^μ[άα][ιΐ]/i, /^ιο[ύυ]ν/i, /^ιο[ύυ]λ/i, /^α[ύυ]/i, /^σ/i, /^ο/i, /^ν/i, /^δ/i]
};
var el_lib_match_matchDayPatterns = {
  narrow: /^[κδτπσ]/i,
  short: /^(κυ|δε|τρ|τε|π[εέ]|π[αά]|σ[αά])/i,
  abbreviated: /^(κυρ|δευ|τρι|τετ|πεμ|παρ|σαβ)/i,
  wide: /^(κυριακ(ή|η)|δευτ(έ|ε)ρα|τρ(ί|ι)τη|τετ(ά|α)ρτη|π(έ|ε)μπτη|παρασκευ(ή|η)|σ(ά|α)ββατο)/i
};
var el_lib_match_parseDayPatterns = {
  narrow: [/^κ/i, /^δ/i, /^τ/i, /^τ/i, /^π/i, /^π/i, /^σ/i],
  any: [/^κ/i, /^δ/i, /^τρ/i, /^τε/i, /^π[εέ]/i, /^π[αά]/i, /^σ/i]
};
var el_lib_match_matchDayPeriodPatterns = {
  narrow: /^(πμ|μμ|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i,
  any: /^([πμ]\.?\s?μ\.?|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i
};
var el_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^πμ|π\.\s?μ\./i,
    pm: /^μμ|μ\.\s?μ\./i,
    midnight: /^μεσάν/i,
    noon: /^μεσημ(έ|ε)/i,
    morning: /πρω(ί|ι)/i,
    afternoon: /απ(ό|ο)γευμα/i,
    evening: /βρ(ά|α)δυ/i,
    night: /ν(ύ|υ)χτα/i
  }
};
var el_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: el_lib_match_matchOrdinalNumberPattern,
    parsePattern: el_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: el_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: el_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: el_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: el_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: el_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: el_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const el_lib_match = (el_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/el/index.js





var el_locale = {
  code: "el",
  formatDistance: el_lib_formatDistance,
  formatLong: el_lib_formatLong,
  formatRelative: el_lib_formatRelative,
  localize: el_lib_localize,
  match: el_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const el = (el_locale);

// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var en_US_lib_formatDistance = __webpack_require__(37168);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-AU/_lib/formatLong/index.js

var en_AU_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy"
};
var en_AU_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var en_AU_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var en_AU_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_AU_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_AU_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_AU_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const en_AU_lib_formatLong = (en_AU_lib_formatLong_formatLong);

// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var en_US_lib_formatRelative = __webpack_require__(28139);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var en_US_lib_localize = __webpack_require__(21808);
// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var en_US_lib_match = __webpack_require__(11462);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-AU/index.js





var en_AU_locale = {
  code: "en-AU",
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_AU_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const en_AU = (en_AU_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-CA/_lib/formatDistance/index.js
var en_CA_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "a second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "a minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about an hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "an hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "a day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about a week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "a week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about a month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "a month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about a year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "a year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over a year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost a year",
    other: "almost {{count}} years"
  }
};
var en_CA_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = en_CA_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};
/* harmony default export */ const en_CA_lib_formatDistance = (en_CA_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-CA/_lib/formatLong/index.js

var en_CA_lib_formatLong_dateFormats = {
  full: "EEEE, MMMM do, yyyy",
  long: "MMMM do, yyyy",
  medium: "MMM d, yyyy",
  short: "yyyy-MM-dd"
};
var en_CA_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var en_CA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var en_CA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_CA_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_CA_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_CA_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const en_CA_lib_formatLong = (en_CA_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-CA/index.js





var en_CA_locale = {
  code: "en-CA",
  formatDistance: en_CA_lib_formatDistance,
  formatLong: en_CA_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const en_CA = (en_CA_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-GB/_lib/formatLong/index.js

var en_GB_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy"
};
var en_GB_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var en_GB_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var en_GB_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_GB_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_GB_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_GB_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const en_GB_lib_formatLong = (en_GB_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-GB/index.js





var en_GB_locale = {
  code: "en-GB",
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_GB_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const en_GB = (en_GB_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-IE/index.js





var en_IE_locale = {
  code: "en-IE",
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_GB_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const en_IE = (en_IE_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-IN/_lib/formatLong/index.js

var en_IN_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM, yyyy",
  medium: "d MMM, yyyy",
  short: "dd/MM/yyyy"
};
var en_IN_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var en_IN_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var en_IN_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_IN_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_IN_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_IN_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const en_IN_lib_formatLong = (en_IN_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-IN/index.js





var en_IN_locale = {
  code: "en-IN",
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_IN_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1,
    // Monday is the first day of the week.
    firstWeekContainsDate: 4
    // The week that contains Jan 4th is the first week of the year.
  }
};
/* harmony default export */ const en_IN = (en_IN_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-NZ/_lib/formatLong/index.js

var en_NZ_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy"
};
var en_NZ_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var en_NZ_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var en_NZ_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_NZ_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_NZ_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_NZ_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const en_NZ_lib_formatLong = (en_NZ_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-NZ/index.js





var en_NZ_locale = {
  code: "en-NZ",
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_NZ_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const en_NZ = (en_NZ_locale);

// EXTERNAL MODULE: ./node_modules/date-fns/esm/locale/en-US/index.js + 1 modules
var en_US = __webpack_require__(16918);
;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-ZA/_lib/formatLong/index.js

var en_ZA_lib_formatLong_dateFormats = {
  full: "EEEE, dd MMMM yyyy",
  long: "dd MMMM yyyy",
  medium: "dd MMM yyyy",
  short: "yyyy/MM/dd"
};
var en_ZA_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var en_ZA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var en_ZA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: en_ZA_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: en_ZA_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: en_ZA_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const en_ZA_lib_formatLong = (en_ZA_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/en-ZA/index.js





var en_ZA_locale = {
  code: "en-ZA",
  formatDistance: en_US_lib_formatDistance/* default */.Z,
  formatLong: en_ZA_lib_formatLong,
  formatRelative: en_US_lib_formatRelative/* default */.Z,
  localize: en_US_lib_localize/* default */.Z,
  match: en_US_lib_match/* default */.Z,
  options: {
    weekStartsOn: 0,
    // Sunday is the first day of the week.
    firstWeekContainsDate: 1
    // The week that contains Jan 1st is the first week of the year.
  }
};
/* harmony default export */ const en_ZA = (en_ZA_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/formatDistance/index.js
var eo_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "malpli ol sekundo",
    other: "malpli ol {{count}} sekundoj"
  },
  xSeconds: {
    one: "1 sekundo",
    other: "{{count}} sekundoj"
  },
  halfAMinute: "duonminuto",
  lessThanXMinutes: {
    one: "malpli ol minuto",
    other: "malpli ol {{count}} minutoj"
  },
  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutoj"
  },
  aboutXHours: {
    one: "proksimume 1 horo",
    other: "proksimume {{count}} horoj"
  },
  xHours: {
    one: "1 horo",
    other: "{{count}} horoj"
  },
  xDays: {
    one: "1 tago",
    other: "{{count}} tagoj"
  },
  aboutXMonths: {
    one: "proksimume 1 monato",
    other: "proksimume {{count}} monatoj"
  },
  xWeeks: {
    one: "1 semajno",
    other: "{{count}} semajnoj"
  },
  aboutXWeeks: {
    one: "proksimume 1 semajno",
    other: "proksimume {{count}} semajnoj"
  },
  xMonths: {
    one: "1 monato",
    other: "{{count}} monatoj"
  },
  aboutXYears: {
    one: "proksimume 1 jaro",
    other: "proksimume {{count}} jaroj"
  },
  xYears: {
    one: "1 jaro",
    other: "{{count}} jaroj"
  },
  overXYears: {
    one: "pli ol 1 jaro",
    other: "pli ol {{count}} jaroj"
  },
  almostXYears: {
    one: "preska\u016D 1 jaro",
    other: "preska\u016D {{count}} jaroj"
  }
};
var eo_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = eo_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options !== null && options !== void 0 && options.comparison && options.comparison > 0) {
      return "post " + result;
    } else {
      return "anta\u016D " + result;
    }
  }
  return result;
};
/* harmony default export */ const eo_lib_formatDistance = (eo_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/formatLong/index.js

var eo_lib_formatLong_dateFormats = {
  full: "EEEE, do 'de' MMMM y",
  long: "y-MMMM-dd",
  medium: "y-MMM-dd",
  short: "yyyy-MM-dd"
};
var eo_lib_formatLong_timeFormats = {
  full: "Ho 'horo kaj' m:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var eo_lib_formatLong_dateTimeFormats = {
  any: "{{date}} {{time}}"
};
var eo_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: eo_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: eo_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: eo_lib_formatLong_dateTimeFormats,
    defaultWidth: "any"
  })
};
/* harmony default export */ const eo_lib_formatLong = (eo_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/formatRelative/index.js
var eo_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'pasinta' eeee 'je' p",
  yesterday: "'hiera\u016D je' p",
  today: "'hodia\u016D je' p",
  tomorrow: "'morga\u016D je' p",
  nextWeek: "eeee 'je' p",
  other: "P"
};
var eo_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return eo_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const eo_lib_formatRelative = (eo_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/localize/index.js

var eo_lib_localize_eraValues = {
  narrow: ["aK", "pK"],
  abbreviated: ["a.K.E.", "p.K.E."],
  wide: ["anta\u016D Komuna Erao", "Komuna Erao"]
};
var eo_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1-a kvaronjaro", "2-a kvaronjaro", "3-a kvaronjaro", "4-a kvaronjaro"]
};
var eo_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "a\u016Dg", "sep", "okt", "nov", "dec"],
  wide: ["januaro", "februaro", "marto", "aprilo", "majo", "junio", "julio", "a\u016Dgusto", "septembro", "oktobro", "novembro", "decembro"]
};
var eo_lib_localize_dayValues = {
  narrow: ["D", "L", "M", "M", "\u0134", "V", "S"],
  short: ["di", "lu", "ma", "me", "\u0135a", "ve", "sa"],
  abbreviated: ["dim", "lun", "mar", "mer", "\u0135a\u016D", "ven", "sab"],
  wide: ["diman\u0109o", "lundo", "mardo", "merkredo", "\u0135a\u016Ddo", "vendredo", "sabato"]
};
var eo_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "noktomezo",
    noon: "tagmezo",
    morning: "matene",
    afternoon: "posttagmeze",
    evening: "vespere",
    night: "nokte"
  },
  abbreviated: {
    am: "a.t.m.",
    pm: "p.t.m.",
    midnight: "noktomezo",
    noon: "tagmezo",
    morning: "matene",
    afternoon: "posttagmeze",
    evening: "vespere",
    night: "nokte"
  },
  wide: {
    am: "anta\u016Dtagmeze",
    pm: "posttagmeze",
    midnight: "noktomezo",
    noon: "tagmezo",
    morning: "matene",
    afternoon: "posttagmeze",
    evening: "vespere",
    night: "nokte"
  }
};
var eo_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber) {
  var number = Number(dirtyNumber);
  return number + "-a";
};
var eo_lib_localize_localize = {
  ordinalNumber: eo_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: eo_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const eo_lib_localize = (eo_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/_lib/match/index.js


var eo_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?a)?/i;
var eo_lib_match_parseOrdinalNumberPattern = /\d+/i;
var eo_lib_match_matchEraPatterns = {
  narrow: /^([ap]k)/i,
  abbreviated: /^([ap]\.?\s?k\.?\s?e\.?)/i,
  wide: /^((antaǔ |post )?komuna erao)/i
};
var eo_lib_match_parseEraPatterns = {
  any: [/^a/i, /^[kp]/i]
};
var eo_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^k[1234]/i,
  wide: /^[1234](-?a)? kvaronjaro/i
};
var eo_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var eo_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|a(ŭ|ux|uh|u)g|sep|okt|nov|dec)/i,
  wide: /^(januaro|februaro|marto|aprilo|majo|junio|julio|a(ŭ|ux|uh|u)gusto|septembro|oktobro|novembro|decembro)/i
};
var eo_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^a(u|ŭ)/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var eo_lib_match_matchDayPatterns = {
  narrow: /^[dlmĵjvs]/i,
  short: /^(di|lu|ma|me|(ĵ|jx|jh|j)a|ve|sa)/i,
  abbreviated: /^(dim|lun|mar|mer|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)|ven|sab)/i,
  wide: /^(diman(ĉ|cx|ch|c)o|lundo|mardo|merkredo|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)do|vendredo|sabato)/i
};
var eo_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^(j|ĵ)/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^(j|ĵ)/i, /^v/i, /^s/i]
};
var eo_lib_match_matchDayPeriodPatterns = {
  narrow: /^([ap]|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
  abbreviated: /^([ap][.\s]?t[.\s]?m[.\s]?|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
  wide: /^(anta(ŭ|ux)tagmez|posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo]/i
};
var eo_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^noktom/i,
    noon: /^t/i,
    morning: /^m/i,
    afternoon: /^posttagmeze/i,
    evening: /^v/i,
    night: /^n/i
  }
};
var eo_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: eo_lib_match_matchOrdinalNumberPattern,
    parsePattern: eo_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: eo_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: eo_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: eo_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: eo_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eo_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: eo_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const eo_lib_match = (eo_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eo/index.js





var eo_locale = {
  code: "eo",
  formatDistance: eo_lib_formatDistance,
  formatLong: eo_lib_formatLong,
  formatRelative: eo_lib_formatRelative,
  localize: eo_lib_localize,
  match: eo_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const eo = (eo_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/formatDistance/index.js
var es_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "menos de un segundo",
    other: "menos de {{count}} segundos"
  },
  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundos"
  },
  halfAMinute: "medio minuto",
  lessThanXMinutes: {
    one: "menos de un minuto",
    other: "menos de {{count}} minutos"
  },
  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutos"
  },
  aboutXHours: {
    one: "alrededor de 1 hora",
    other: "alrededor de {{count}} horas"
  },
  xHours: {
    one: "1 hora",
    other: "{{count}} horas"
  },
  xDays: {
    one: "1 d\xEDa",
    other: "{{count}} d\xEDas"
  },
  aboutXWeeks: {
    one: "alrededor de 1 semana",
    other: "alrededor de {{count}} semanas"
  },
  xWeeks: {
    one: "1 semana",
    other: "{{count}} semanas"
  },
  aboutXMonths: {
    one: "alrededor de 1 mes",
    other: "alrededor de {{count}} meses"
  },
  xMonths: {
    one: "1 mes",
    other: "{{count}} meses"
  },
  aboutXYears: {
    one: "alrededor de 1 a\xF1o",
    other: "alrededor de {{count}} a\xF1os"
  },
  xYears: {
    one: "1 a\xF1o",
    other: "{{count}} a\xF1os"
  },
  overXYears: {
    one: "m\xE1s de 1 a\xF1o",
    other: "m\xE1s de {{count}} a\xF1os"
  },
  almostXYears: {
    one: "casi 1 a\xF1o",
    other: "casi {{count}} a\xF1os"
  }
};
var es_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = es_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "en " + result;
    } else {
      return "hace " + result;
    }
  }
  return result;
};
/* harmony default export */ const es_lib_formatDistance = (es_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/formatLong/index.js

var es_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: "d MMM y",
  short: "dd/MM/y"
};
var es_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var es_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'a las' {{time}}",
  long: "{{date}} 'a las' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var es_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: es_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: es_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: es_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const es_lib_formatLong = (es_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/formatRelative/index.js
var es_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'el' eeee 'pasado a la' p",
  yesterday: "'ayer a la' p",
  today: "'hoy a la' p",
  tomorrow: "'ma\xF1ana a la' p",
  nextWeek: "eeee 'a la' p",
  other: "P"
};
var formatRelative_formatRelativeLocalePlural = {
  lastWeek: "'el' eeee 'pasado a las' p",
  yesterday: "'ayer a las' p",
  today: "'hoy a las' p",
  tomorrow: "'ma\xF1ana a las' p",
  nextWeek: "eeee 'a las' p",
  other: "P"
};
var es_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return formatRelative_formatRelativeLocalePlural[token];
  } else {
    return es_lib_formatRelative_formatRelativeLocale[token];
  }
};
/* harmony default export */ const es_lib_formatRelative = (es_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/localize/index.js

var es_lib_localize_eraValues = {
  narrow: ["AC", "DC"],
  abbreviated: ["AC", "DC"],
  wide: ["antes de cristo", "despu\xE9s de cristo"]
};
var es_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1\xBA trimestre", "2\xBA trimestre", "3\xBA trimestre", "4\xBA trimestre"]
};
var es_lib_localize_monthValues = {
  narrow: ["e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: ["ene", "feb", "mar", "abr", "may", "jun", "jul", "ago", "sep", "oct", "nov", "dic"],
  wide: ["enero", "febrero", "marzo", "abril", "mayo", "junio", "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
};
var es_lib_localize_dayValues = {
  narrow: ["d", "l", "m", "m", "j", "v", "s"],
  short: ["do", "lu", "ma", "mi", "ju", "vi", "s\xE1"],
  abbreviated: ["dom", "lun", "mar", "mi\xE9", "jue", "vie", "s\xE1b"],
  wide: ["domingo", "lunes", "martes", "mi\xE9rcoles", "jueves", "viernes", "s\xE1bado"]
};
var es_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "ma\xF1ana",
    afternoon: "tarde",
    evening: "tarde",
    night: "noche"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "medianoche",
    noon: "mediodia",
    morning: "ma\xF1ana",
    afternoon: "tarde",
    evening: "tarde",
    night: "noche"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "medianoche",
    noon: "mediodia",
    morning: "ma\xF1ana",
    afternoon: "tarde",
    evening: "tarde",
    night: "noche"
  }
};
var es_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "de la ma\xF1ana",
    afternoon: "de la tarde",
    evening: "de la tarde",
    night: "de la noche"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "medianoche",
    noon: "mediodia",
    morning: "de la ma\xF1ana",
    afternoon: "de la tarde",
    evening: "de la tarde",
    night: "de la noche"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "medianoche",
    noon: "mediodia",
    morning: "de la ma\xF1ana",
    afternoon: "de la tarde",
    evening: "de la tarde",
    night: "de la noche"
  }
};
var es_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "\xBA";
};
var es_lib_localize_localize = {
  ordinalNumber: es_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: es_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: es_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const es_lib_localize = (es_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/_lib/match/index.js


var es_lib_match_matchOrdinalNumberPattern = /^(\d+)(º)?/i;
var es_lib_match_parseOrdinalNumberPattern = /\d+/i;
var es_lib_match_matchEraPatterns = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes de la era com[uú]n|despu[eé]s de cristo|era com[uú]n)/i
};
var es_lib_match_parseEraPatterns = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes de la era com[uú]n)/i, /^(despu[eé]s de cristo|era com[uú]n)/i]
};
var es_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var es_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var es_lib_match_matchMonthPatterns = {
  narrow: /^[efmajsond]/i,
  abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
  wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
};
var es_lib_match_parseMonthPatterns = {
  narrow: [/^e/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^en/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i]
};
var es_lib_match_matchDayPatterns = {
  narrow: /^[dlmjvs]/i,
  short: /^(do|lu|ma|mi|ju|vi|s[áa])/i,
  abbreviated: /^(dom|lun|mar|mi[ée]|jue|vie|s[áa]b)/i,
  wide: /^(domingo|lunes|martes|mi[ée]rcoles|jueves|viernes|s[áa]bado)/i
};
var es_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^do/i, /^lu/i, /^ma/i, /^mi/i, /^ju/i, /^vi/i, /^sa/i]
};
var es_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|md|(de la|a las) (mañana|tarde|noche))/i,
  any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (mañana|tarde|noche))/i
};
var es_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /^md/i,
    morning: /mañana/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noche/i
  }
};
var es_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: es_lib_match_matchOrdinalNumberPattern,
    parsePattern: es_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: es_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: es_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: es_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: es_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: es_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: es_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const es_lib_match = (es_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/es/index.js





var es_locale = {
  code: "es",
  formatDistance: es_lib_formatDistance,
  formatLong: es_lib_formatLong,
  formatRelative: es_lib_formatRelative,
  localize: es_lib_localize,
  match: es_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const es = (es_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/formatDistance/index.js
var et_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    standalone: {
      one: "v\xE4hem kui \xFCks sekund",
      other: "v\xE4hem kui {{count}} sekundit"
    },
    withPreposition: {
      one: "v\xE4hem kui \xFChe sekundi",
      other: "v\xE4hem kui {{count}} sekundi"
    }
  },
  xSeconds: {
    standalone: {
      one: "\xFCks sekund",
      other: "{{count}} sekundit"
    },
    withPreposition: {
      one: "\xFChe sekundi",
      other: "{{count}} sekundi"
    }
  },
  halfAMinute: {
    standalone: "pool minutit",
    withPreposition: "poole minuti"
  },
  lessThanXMinutes: {
    standalone: {
      one: "v\xE4hem kui \xFCks minut",
      other: "v\xE4hem kui {{count}} minutit"
    },
    withPreposition: {
      one: "v\xE4hem kui \xFChe minuti",
      other: "v\xE4hem kui {{count}} minuti"
    }
  },
  xMinutes: {
    standalone: {
      one: "\xFCks minut",
      other: "{{count}} minutit"
    },
    withPreposition: {
      one: "\xFChe minuti",
      other: "{{count}} minuti"
    }
  },
  aboutXHours: {
    standalone: {
      one: "umbes \xFCks tund",
      other: "umbes {{count}} tundi"
    },
    withPreposition: {
      one: "umbes \xFChe tunni",
      other: "umbes {{count}} tunni"
    }
  },
  xHours: {
    standalone: {
      one: "\xFCks tund",
      other: "{{count}} tundi"
    },
    withPreposition: {
      one: "\xFChe tunni",
      other: "{{count}} tunni"
    }
  },
  xDays: {
    standalone: {
      one: "\xFCks p\xE4ev",
      other: "{{count}} p\xE4eva"
    },
    withPreposition: {
      one: "\xFChe p\xE4eva",
      other: "{{count}} p\xE4eva"
    }
  },
  aboutXWeeks: {
    standalone: {
      one: "umbes \xFCks n\xE4dal",
      other: "umbes {{count}} n\xE4dalat"
    },
    withPreposition: {
      one: "umbes \xFChe n\xE4dala",
      other: "umbes {{count}} n\xE4dala"
    }
  },
  xWeeks: {
    standalone: {
      one: "\xFCks n\xE4dal",
      other: "{{count}} n\xE4dalat"
    },
    withPreposition: {
      one: "\xFChe n\xE4dala",
      other: "{{count}} n\xE4dala"
    }
  },
  aboutXMonths: {
    standalone: {
      one: "umbes \xFCks kuu",
      other: "umbes {{count}} kuud"
    },
    withPreposition: {
      one: "umbes \xFChe kuu",
      other: "umbes {{count}} kuu"
    }
  },
  xMonths: {
    standalone: {
      one: "\xFCks kuu",
      other: "{{count}} kuud"
    },
    withPreposition: {
      one: "\xFChe kuu",
      other: "{{count}} kuu"
    }
  },
  aboutXYears: {
    standalone: {
      one: "umbes \xFCks aasta",
      other: "umbes {{count}} aastat"
    },
    withPreposition: {
      one: "umbes \xFChe aasta",
      other: "umbes {{count}} aasta"
    }
  },
  xYears: {
    standalone: {
      one: "\xFCks aasta",
      other: "{{count}} aastat"
    },
    withPreposition: {
      one: "\xFChe aasta",
      other: "{{count}} aasta"
    }
  },
  overXYears: {
    standalone: {
      one: "rohkem kui \xFCks aasta",
      other: "rohkem kui {{count}} aastat"
    },
    withPreposition: {
      one: "rohkem kui \xFChe aasta",
      other: "rohkem kui {{count}} aasta"
    }
  },
  almostXYears: {
    standalone: {
      one: "peaaegu \xFCks aasta",
      other: "peaaegu {{count}} aastat"
    },
    withPreposition: {
      one: "peaaegu \xFChe aasta",
      other: "peaaegu {{count}} aasta"
    }
  }
};
var et_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var usageGroup = options !== null && options !== void 0 && options.addSuffix ? et_lib_formatDistance_formatDistanceLocale[token].withPreposition : et_lib_formatDistance_formatDistanceLocale[token].standalone;
  var result;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " p\xE4rast";
    } else {
      return result + " eest";
    }
  }
  return result;
};
/* harmony default export */ const et_lib_formatDistance = (et_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/formatLong/index.js

var et_lib_formatLong_dateFormats = {
  full: "EEEE, d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd.MM.y"
};
var et_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var et_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kell' {{time}}",
  long: "{{date}} 'kell' {{time}}",
  medium: "{{date}}. {{time}}",
  short: "{{date}}. {{time}}"
};
var et_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: et_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: et_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: et_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const et_lib_formatLong = (et_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/formatRelative/index.js
var et_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'eelmine' eeee 'kell' p",
  yesterday: "'eile kell' p",
  today: "'t\xE4na kell' p",
  tomorrow: "'homme kell' p",
  nextWeek: "'j\xE4rgmine' eeee 'kell' p",
  other: "P"
};
var et_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return et_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const et_lib_formatRelative = (et_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/localize/index.js

var et_lib_localize_eraValues = {
  narrow: ["e.m.a", "m.a.j"],
  abbreviated: ["e.m.a", "m.a.j"],
  wide: ["enne meie ajaarvamist", "meie ajaarvamise j\xE4rgi"]
};
var et_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
};
var et_lib_localize_monthValues = {
  narrow: ["J", "V", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jaan", "veebr", "m\xE4rts", "apr", "mai", "juuni", "juuli", "aug", "sept", "okt", "nov", "dets"],
  wide: ["jaanuar", "veebruar", "m\xE4rts", "aprill", "mai", "juuni", "juuli", "august", "september", "oktoober", "november", "detsember"]
};
var et_lib_localize_dayValues = {
  narrow: ["P", "E", "T", "K", "N", "R", "L"],
  short: ["P", "E", "T", "K", "N", "R", "L"],
  abbreviated: ["p\xFChap.", "esmasp.", "teisip.", "kolmap.", "neljap.", "reede.", "laup."],
  wide: ["p\xFChap\xE4ev", "esmasp\xE4ev", "teisip\xE4ev", "kolmap\xE4ev", "neljap\xE4ev", "reede", "laup\xE4ev"]
};
var et_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "kesk\xF6\xF6",
    noon: "keskp\xE4ev",
    morning: "hommik",
    afternoon: "p\xE4rastl\xF5una",
    evening: "\xF5htu",
    night: "\xF6\xF6"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "kesk\xF6\xF6",
    noon: "keskp\xE4ev",
    morning: "hommik",
    afternoon: "p\xE4rastl\xF5una",
    evening: "\xF5htu",
    night: "\xF6\xF6"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "kesk\xF6\xF6",
    noon: "keskp\xE4ev",
    morning: "hommik",
    afternoon: "p\xE4rastl\xF5una",
    evening: "\xF5htu",
    night: "\xF6\xF6"
  }
};
var et_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "kesk\xF6\xF6l",
    noon: "keskp\xE4eval",
    morning: "hommikul",
    afternoon: "p\xE4rastl\xF5unal",
    evening: "\xF5htul",
    night: "\xF6\xF6sel"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "kesk\xF6\xF6l",
    noon: "keskp\xE4eval",
    morning: "hommikul",
    afternoon: "p\xE4rastl\xF5unal",
    evening: "\xF5htul",
    night: "\xF6\xF6sel"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "kesk\xF6\xF6l",
    noon: "keskp\xE4eval",
    morning: "hommikul",
    afternoon: "p\xE4rastl\xF5unal",
    evening: "\xF5htul",
    night: "\xF6\xF6sel"
  }
};
var et_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var et_lib_localize_localize = {
  ordinalNumber: et_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: et_lib_localize_monthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_dayValues,
    defaultWidth: "wide",
    formattingValues: et_lib_localize_dayValues,
    defaultFormattingWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: et_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: et_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const et_lib_localize = (et_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/_lib/match/index.js


var et_lib_match_matchOrdinalNumberPattern = /^\d+\./i;
var et_lib_match_parseOrdinalNumberPattern = /\d+/i;
var et_lib_match_matchEraPatterns = {
  narrow: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
  abbreviated: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
  wide: /^(enne meie ajaarvamist|meie ajaarvamise järgi|enne Kristust|pärast Kristust)/i
};
var et_lib_match_parseEraPatterns = {
  any: [/^e/i, /^(m|p)/i]
};
var et_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var et_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var et_lib_match_matchMonthPatterns = {
  narrow: /^[jvmasond]/i,
  abbreviated: /^(jaan|veebr|märts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets)/i,
  wide: /^(jaanuar|veebruar|märts|aprill|mai|juuni|juuli|august|september|oktoober|november|detsember)/i
};
var et_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^v/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^v/i, /^mär/i, /^ap/i, /^mai/i, /^juun/i, /^juul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var et_lib_match_matchDayPatterns = {
  narrow: /^[petknrl]/i,
  short: /^[petknrl]/i,
  abbreviated: /^(püh?|esm?|tei?|kolm?|nel?|ree?|laup?)\.?/i,
  wide: /^(pühapäev|esmaspäev|teisipäev|kolmapäev|neljapäev|reede|laupäev)/i
};
var et_lib_match_parseDayPatterns = {
  any: [/^p/i, /^e/i, /^t/i, /^k/i, /^n/i, /^r/i, /^l/i]
};
var et_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|keskööl?|keskpäev(al)?|hommik(ul)?|pärastlõunal?|õhtul?|öö(sel)?)/i
};
var et_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^keskö/i,
    noon: /^keskp/i,
    morning: /hommik/i,
    afternoon: /pärastlõuna/i,
    evening: /õhtu/i,
    night: /öö/i
  }
};
var et_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: et_lib_match_matchOrdinalNumberPattern,
    parsePattern: et_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: et_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: et_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: et_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: et_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: et_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: et_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const et_lib_match = (et_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/et/index.js





var et_locale = {
  code: "et",
  formatDistance: et_lib_formatDistance,
  formatLong: et_lib_formatLong,
  formatRelative: et_lib_formatRelative,
  localize: et_lib_localize,
  match: et_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const et = (et_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/formatDistance/index.js
var eu_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "segundo bat baino gutxiago",
    other: "{{count}} segundo baino gutxiago"
  },
  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundo"
  },
  halfAMinute: "minutu erdi",
  lessThanXMinutes: {
    one: "minutu bat baino gutxiago",
    other: "{{count}} minutu baino gutxiago"
  },
  xMinutes: {
    one: "1 minutu",
    other: "{{count}} minutu"
  },
  aboutXHours: {
    one: "1 ordu gutxi gorabehera",
    other: "{{count}} ordu gutxi gorabehera"
  },
  xHours: {
    one: "1 ordu",
    other: "{{count}} ordu"
  },
  xDays: {
    one: "1 egun",
    other: "{{count}} egun"
  },
  aboutXWeeks: {
    one: "aste 1 inguru",
    other: "{{count}} aste inguru"
  },
  xWeeks: {
    one: "1 aste",
    other: "{{count}} astean"
  },
  aboutXMonths: {
    one: "1 hilabete gutxi gorabehera",
    other: "{{count}} hilabete gutxi gorabehera"
  },
  xMonths: {
    one: "1 hilabete",
    other: "{{count}} hilabete"
  },
  aboutXYears: {
    one: "1 urte gutxi gorabehera",
    other: "{{count}} urte gutxi gorabehera"
  },
  xYears: {
    one: "1 urte",
    other: "{{count}} urte"
  },
  overXYears: {
    one: "1 urte baino gehiago",
    other: "{{count}} urte baino gehiago"
  },
  almostXYears: {
    one: "ia 1 urte",
    other: "ia {{count}} urte"
  }
};
var eu_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = eu_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "en " + result;
    } else {
      return "duela " + result;
    }
  }
  return result;
};
/* harmony default export */ const eu_lib_formatDistance = (eu_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/formatLong/index.js

var eu_lib_formatLong_dateFormats = {
  full: "EEEE, y'ko' MMMM'ren' d'a' y'ren'",
  long: "y'ko' MMMM'ren' d'a'",
  medium: "y MMM d",
  short: "yy/MM/dd"
};
var eu_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var eu_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'tan' {{time}}",
  long: "{{date}} 'tan' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var eu_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: eu_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: eu_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: eu_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const eu_lib_formatLong = (eu_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/formatRelative/index.js
var eu_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'joan den' eeee, LT",
  yesterday: "'atzo,' p",
  today: "'gaur,' p",
  tomorrow: "'bihar,' p",
  nextWeek: "eeee, p",
  other: "P"
};
var _lib_formatRelative_formatRelativeLocalePlural = {
  lastWeek: "'joan den' eeee, p",
  yesterday: "'atzo,' p",
  today: "'gaur,' p",
  tomorrow: "'bihar,' p",
  nextWeek: "eeee, p",
  other: "P"
};
var eu_lib_formatRelative_formatRelative = function formatRelative2(token, date) {
  if (date.getUTCHours() !== 1) {
    return _lib_formatRelative_formatRelativeLocalePlural[token];
  }
  return eu_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const eu_lib_formatRelative = (eu_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/localize/index.js

var eu_lib_localize_eraValues = {
  narrow: ["k.a.", "k.o."],
  abbreviated: ["k.a.", "k.o."],
  wide: ["kristo aurretik", "kristo ondoren"]
};
var eu_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1H", "2H", "3H", "4H"],
  wide: ["1. hiruhilekoa", "2. hiruhilekoa", "3. hiruhilekoa", "4. hiruhilekoa"]
};
var eu_lib_localize_monthValues = {
  narrow: ["u", "o", "m", "a", "m", "e", "u", "a", "i", "u", "a", "a"],
  abbreviated: ["urt", "ots", "mar", "api", "mai", "eka", "uzt", "abu", "ira", "urr", "aza", "abe"],
  wide: ["urtarrila", "otsaila", "martxoa", "apirila", "maiatza", "ekaina", "uztaila", "abuztua", "iraila", "urria", "azaroa", "abendua"]
};
var eu_lib_localize_dayValues = {
  narrow: ["i", "a", "a", "a", "o", "o", "l"],
  short: ["ig", "al", "as", "az", "og", "or", "lr"],
  abbreviated: ["iga", "ast", "ast", "ast", "ost", "ost", "lar"],
  wide: ["igandea", "astelehena", "asteartea", "asteazkena", "osteguna", "ostirala", "larunbata"]
};
var eu_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "ge",
    noon: "eg",
    morning: "goiza",
    afternoon: "arratsaldea",
    evening: "arratsaldea",
    night: "gaua"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "gauerdia",
    noon: "eguerdia",
    morning: "goiza",
    afternoon: "arratsaldea",
    evening: "arratsaldea",
    night: "gaua"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gauerdia",
    noon: "eguerdia",
    morning: "goiza",
    afternoon: "arratsaldea",
    evening: "arratsaldea",
    night: "gaua"
  }
};
var eu_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "ge",
    noon: "eg",
    morning: "goizean",
    afternoon: "arratsaldean",
    evening: "arratsaldean",
    night: "gauean"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "gauerdia",
    noon: "eguerdia",
    morning: "goizean",
    afternoon: "arratsaldean",
    evening: "arratsaldean",
    night: "gauean"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "gauerdia",
    noon: "eguerdia",
    morning: "goizean",
    afternoon: "arratsaldean",
    evening: "arratsaldean",
    night: "gauean"
  }
};
var eu_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var eu_lib_localize_localize = {
  ordinalNumber: eu_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: eu_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: eu_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const eu_lib_localize = (eu_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/_lib/match/index.js


var eu_lib_match_matchOrdinalNumberPattern = /^(\d+)(.)?/i;
var eu_lib_match_parseOrdinalNumberPattern = /\d+/i;
var eu_lib_match_matchEraPatterns = {
  narrow: /^(k.a.|k.o.)/i,
  abbreviated: /^(k.a.|k.o.)/i,
  wide: /^(kristo aurretik|kristo ondoren)/i
};
var eu_lib_match_parseEraPatterns = {
  narrow: [/^k.a./i, /^k.o./i],
  abbreviated: [/^(k.a.)/i, /^(k.o.)/i],
  wide: [/^(kristo aurretik)/i, /^(kristo ondoren)/i]
};
var eu_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]H/i,
  wide: /^[1234](.)? hiruhilekoa/i
};
var eu_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var eu_lib_match_matchMonthPatterns = {
  narrow: /^[uomaei]/i,
  abbreviated: /^(urt|ots|mar|api|mai|eka|uzt|abu|ira|urr|aza|abe)/i,
  wide: /^(urtarrila|otsaila|martxoa|apirila|maiatza|ekaina|uztaila|abuztua|iraila|urria|azaroa|abendua)/i
};
var eu_lib_match_parseMonthPatterns = {
  narrow: [/^u/i, /^o/i, /^m/i, /^a/i, /^m/i, /^e/i, /^u/i, /^a/i, /^i/i, /^u/i, /^a/i, /^a/i],
  any: [/^urt/i, /^ots/i, /^mar/i, /^api/i, /^mai/i, /^eka/i, /^uzt/i, /^abu/i, /^ira/i, /^urr/i, /^aza/i, /^abe/i]
};
var eu_lib_match_matchDayPatterns = {
  narrow: /^[iaol]/i,
  short: /^(ig|al|as|az|og|or|lr)/i,
  abbreviated: /^(iga|ast|ast|ast|ost|ost|lar)/i,
  wide: /^(igandea|astelehena|asteartea|asteazkena|osteguna|ostirala|larunbata)/i
};
var eu_lib_match_parseDayPatterns = {
  narrow: [/^i/i, /^a/i, /^a/i, /^a/i, /^o/i, /^o/i, /^l/i],
  short: [/^ig/i, /^al/i, /^as/i, /^az/i, /^og/i, /^or/i, /^lr/i],
  abbreviated: [/^iga/i, /^ast/i, /^ast/i, /^ast/i, /^ost/i, /^ost/i, /^lar/i],
  wide: [/^igandea/i, /^astelehena/i, /^asteartea/i, /^asteazkena/i, /^osteguna/i, /^ostirala/i, /^larunbata/i]
};
var eu_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|ge|eg|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i,
  any: /^([ap]\.?\s?m\.?|gauerdia|eguerdia|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i
};
var eu_lib_match_parseDayPeriodPatterns = {
  narrow: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^ge/i,
    noon: /^eg/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i
  },
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^gauerdia/i,
    noon: /^eguerdia/i,
    morning: /goiz/i,
    afternoon: /arratsaldea/i,
    evening: /arratsaldea/i,
    night: /gau/i
  }
};
var eu_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: eu_lib_match_matchOrdinalNumberPattern,
    parsePattern: eu_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: eu_lib_match_parseEraPatterns,
    defaultParseWidth: "wide"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: eu_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: eu_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: eu_lib_match_parseDayPatterns,
    defaultParseWidth: "wide"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: eu_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: eu_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const eu_lib_match = (eu_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/eu/index.js





var eu_locale = {
  code: "eu",
  formatDistance: eu_lib_formatDistance,
  formatLong: eu_lib_formatLong,
  formatRelative: eu_lib_formatRelative,
  localize: eu_lib_localize,
  match: eu_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const eu = (eu_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/formatDistance/index.js
var fa_IR_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u06A9\u0645\u062A\u0631 \u0627\u0632 \u06CC\u06A9 \u062B\u0627\u0646\u06CC\u0647",
    other: "\u06A9\u0645\u062A\u0631 \u0627\u0632 {{count}} \u062B\u0627\u0646\u06CC\u0647"
  },
  xSeconds: {
    one: "1 \u062B\u0627\u0646\u06CC\u0647",
    other: "{{count}} \u062B\u0627\u0646\u06CC\u0647"
  },
  halfAMinute: "\u0646\u06CC\u0645 \u062F\u0642\u06CC\u0642\u0647",
  lessThanXMinutes: {
    one: "\u06A9\u0645\u062A\u0631 \u0627\u0632 \u06CC\u06A9 \u062F\u0642\u06CC\u0642\u0647",
    other: "\u06A9\u0645\u062A\u0631 \u0627\u0632 {{count}} \u062F\u0642\u06CC\u0642\u0647"
  },
  xMinutes: {
    one: "1 \u062F\u0642\u06CC\u0642\u0647",
    other: "{{count}} \u062F\u0642\u06CC\u0642\u0647"
  },
  aboutXHours: {
    one: "\u062D\u062F\u0648\u062F 1 \u0633\u0627\u0639\u062A",
    other: "\u062D\u062F\u0648\u062F {{count}} \u0633\u0627\u0639\u062A"
  },
  xHours: {
    one: "1 \u0633\u0627\u0639\u062A",
    other: "{{count}} \u0633\u0627\u0639\u062A"
  },
  xDays: {
    one: "1 \u0631\u0648\u0632",
    other: "{{count}} \u0631\u0648\u0632"
  },
  aboutXWeeks: {
    one: "\u062D\u062F\u0648\u062F 1 \u0647\u0641\u062A\u0647",
    other: "\u062D\u062F\u0648\u062F {{count}} \u0647\u0641\u062A\u0647"
  },
  xWeeks: {
    one: "1 \u0647\u0641\u062A\u0647",
    other: "{{count}} \u0647\u0641\u062A\u0647"
  },
  aboutXMonths: {
    one: "\u062D\u062F\u0648\u062F 1 \u0645\u0627\u0647",
    other: "\u062D\u062F\u0648\u062F {{count}} \u0645\u0627\u0647"
  },
  xMonths: {
    one: "1 \u0645\u0627\u0647",
    other: "{{count}} \u0645\u0627\u0647"
  },
  aboutXYears: {
    one: "\u062D\u062F\u0648\u062F 1 \u0633\u0627\u0644",
    other: "\u062D\u062F\u0648\u062F {{count}} \u0633\u0627\u0644"
  },
  xYears: {
    one: "1 \u0633\u0627\u0644",
    other: "{{count}} \u0633\u0627\u0644"
  },
  overXYears: {
    one: "\u0628\u06CC\u0634\u062A\u0631 \u0627\u0632 1 \u0633\u0627\u0644",
    other: "\u0628\u06CC\u0634\u062A\u0631 \u0627\u0632 {{count}} \u0633\u0627\u0644"
  },
  almostXYears: {
    one: "\u0646\u0632\u062F\u06CC\u06A9 1 \u0633\u0627\u0644",
    other: "\u0646\u0632\u062F\u06CC\u06A9 {{count}} \u0633\u0627\u0644"
  }
};
var fa_IR_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = fa_IR_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u062F\u0631 " + result;
    } else {
      return result + " \u0642\u0628\u0644";
    }
  }
  return result;
};
/* harmony default export */ const fa_IR_lib_formatDistance = (fa_IR_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/formatLong/index.js

var fa_IR_lib_formatLong_dateFormats = {
  full: "EEEE do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "yyyy/MM/dd"
};
var fa_IR_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var fa_IR_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u062F\u0631' {{time}}",
  long: "{{date}} '\u062F\u0631' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var fa_IR_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fa_IR_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fa_IR_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fa_IR_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const fa_IR_lib_formatLong = (fa_IR_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/formatRelative/index.js
var fa_IR_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee '\u06AF\u0630\u0634\u062A\u0647 \u062F\u0631' p",
  yesterday: "'\u062F\u06CC\u0631\u0648\u0632 \u062F\u0631' p",
  today: "'\u0627\u0645\u0631\u0648\u0632 \u062F\u0631' p",
  tomorrow: "'\u0641\u0631\u062F\u0627 \u062F\u0631' p",
  nextWeek: "eeee '\u062F\u0631' p",
  other: "P"
};
var fa_IR_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return fa_IR_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fa_IR_lib_formatRelative = (fa_IR_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/localize/index.js

var fa_IR_lib_localize_eraValues = {
  narrow: ["\u0642", "\u0628"],
  abbreviated: ["\u0642.\u0645.", "\u0628.\u0645."],
  wide: ["\u0642\u0628\u0644 \u0627\u0632 \u0645\u06CC\u0644\u0627\u062F", "\u0628\u0639\u062F \u0627\u0632 \u0645\u06CC\u0644\u0627\u062F"]
};
var fa_IR_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u0633\u200C\u06451", "\u0633\u200C\u06452", "\u0633\u200C\u06453", "\u0633\u200C\u06454"],
  wide: ["\u0633\u0647\u200C\u0645\u0627\u0647\u0647 1", "\u0633\u0647\u200C\u0645\u0627\u0647\u0647 2", "\u0633\u0647\u200C\u0645\u0627\u0647\u0647 3", "\u0633\u0647\u200C\u0645\u0627\u0647\u0647 4"]
};
var fa_IR_lib_localize_monthValues = {
  narrow: ["\u0698", "\u0641", "\u0645", "\u0622", "\u0645", "\u062C", "\u062C", "\u0622", "\u0633", "\u0627", "\u0646", "\u062F"],
  abbreviated: ["\u0698\u0627\u0646\u0640", "\u0641\u0648\u0631", "\u0645\u0627\u0631\u0633", "\u0622\u067E\u0631", "\u0645\u06CC", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0640", "\u0622\u06AF\u0648", "\u0633\u067E\u062A\u0640", "\u0627\u06A9\u062A\u0640", "\u0646\u0648\u0627\u0645\u0640", "\u062F\u0633\u0627\u0645\u0640"],
  wide: ["\u0698\u0627\u0646\u0648\u06CC\u0647", "\u0641\u0648\u0631\u06CC\u0647", "\u0645\u0627\u0631\u0633", "\u0622\u067E\u0631\u06CC\u0644", "\u0645\u06CC", "\u062C\u0648\u0646", "\u062C\u0648\u0644\u0627\u06CC", "\u0622\u06AF\u0648\u0633\u062A", "\u0633\u067E\u062A\u0627\u0645\u0628\u0631", "\u0627\u06A9\u062A\u0628\u0631", "\u0646\u0648\u0627\u0645\u0628\u0631", "\u062F\u0633\u0627\u0645\u0628\u0631"]
};
var fa_IR_lib_localize_dayValues = {
  narrow: ["\u06CC", "\u062F", "\u0633", "\u0686", "\u067E", "\u062C", "\u0634"],
  short: ["1\u0634", "2\u0634", "3\u0634", "4\u0634", "5\u0634", "\u062C", "\u0634"],
  abbreviated: ["\u06CC\u06A9\u0634\u0646\u0628\u0647", "\u062F\u0648\u0634\u0646\u0628\u0647", "\u0633\u0647\u200C\u0634\u0646\u0628\u0647", "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647", "\u067E\u0646\u062C\u0634\u0646\u0628\u0647", "\u062C\u0645\u0639\u0647", "\u0634\u0646\u0628\u0647"],
  wide: ["\u06CC\u06A9\u0634\u0646\u0628\u0647", "\u062F\u0648\u0634\u0646\u0628\u0647", "\u0633\u0647\u200C\u0634\u0646\u0628\u0647", "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647", "\u067E\u0646\u062C\u0634\u0646\u0628\u0647", "\u062C\u0645\u0639\u0647", "\u0634\u0646\u0628\u0647"]
};
var fa_IR_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0642",
    pm: "\u0628",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0635",
    afternoon: "\u0628.\u0638.",
    evening: "\u0639",
    night: "\u0634"
  },
  abbreviated: {
    am: "\u0642.\u0638.",
    pm: "\u0628.\u0638.",
    midnight: "\u0646\u06CC\u0645\u0647\u200C\u0634\u0628",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u062D",
    afternoon: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
    evening: "\u0639\u0635\u0631",
    night: "\u0634\u0628"
  },
  wide: {
    am: "\u0642\u0628\u0644\u200C\u0627\u0632\u0638\u0647\u0631",
    pm: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
    midnight: "\u0646\u06CC\u0645\u0647\u200C\u0634\u0628",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u062D",
    afternoon: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
    evening: "\u0639\u0635\u0631",
    night: "\u0634\u0628"
  }
};
var fa_IR_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0642",
    pm: "\u0628",
    midnight: "\u0646",
    noon: "\u0638",
    morning: "\u0635",
    afternoon: "\u0628.\u0638.",
    evening: "\u0639",
    night: "\u0634"
  },
  abbreviated: {
    am: "\u0642.\u0638.",
    pm: "\u0628.\u0638.",
    midnight: "\u0646\u06CC\u0645\u0647\u200C\u0634\u0628",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u062D",
    afternoon: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
    evening: "\u0639\u0635\u0631",
    night: "\u0634\u0628"
  },
  wide: {
    am: "\u0642\u0628\u0644\u200C\u0627\u0632\u0638\u0647\u0631",
    pm: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
    midnight: "\u0646\u06CC\u0645\u0647\u200C\u0634\u0628",
    noon: "\u0638\u0647\u0631",
    morning: "\u0635\u0628\u062D",
    afternoon: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
    evening: "\u0639\u0635\u0631",
    night: "\u0634\u0628"
  }
};
var fa_IR_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var fa_IR_lib_localize_localize = {
  ordinalNumber: fa_IR_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: fa_IR_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: fa_IR_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const fa_IR_lib_localize = (fa_IR_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/_lib/match/index.js


var fa_IR_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var fa_IR_lib_match_parseOrdinalNumberPattern = /\d+/i;
var fa_IR_lib_match_matchEraPatterns = {
  narrow: /^(ق|ب)/i,
  abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?د\.?\s?م\.?|م\.?\s?|د\.?\s?م\.?)/i,
  wide: /^(قبل از میلاد|قبل از دوران مشترک|میلادی|دوران مشترک|بعد از میلاد)/i
};
var fa_IR_lib_match_parseEraPatterns = {
  any: [/^قبل/i, /^بعد/i]
};
var fa_IR_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^س‌م[1234]/i,
  wide: /^سه‌ماهه [1234]/i
};
var fa_IR_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var fa_IR_lib_match_matchMonthPatterns = {
  narrow: /^[جژفمآاماسند]/i,
  abbreviated: /^(جنو|ژانـ|ژانویه|فوریه|فور|مارس|آوریل|آپر|مه|می|ژوئن|جون|جول|جولـ|ژوئیه|اوت|آگو|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نوامـ|دسامبر|دسامـ|دسم)/i,
  wide: /^(ژانویه|جنوری|فبروری|فوریه|مارچ|مارس|آپریل|اپریل|ایپریل|آوریل|مه|می|ژوئن|جون|جولای|ژوئیه|آگست|اگست|آگوست|اوت|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نومبر|دسامبر|دسمبر)/i
};
var fa_IR_lib_match_parseMonthPatterns = {
  narrow: [/^(ژ|ج)/i, /^ف/i, /^م/i, /^(آ|ا)/i, /^م/i, /^(ژ|ج)/i, /^(ج|ژ)/i, /^(آ|ا)/i, /^س/i, /^ا/i, /^ن/i, /^د/i],
  any: [/^ژا/i, /^ف/i, /^ما/i, /^آپ/i, /^(می|مه)/i, /^(ژوئن|جون)/i, /^(ژوئی|جول)/i, /^(اوت|آگ)/i, /^س/i, /^(اوک|اک)/i, /^ن/i, /^د/i]
};
var fa_IR_lib_match_matchDayPatterns = {
  narrow: /^[شیدسچپج]/i,
  short: /^(ش|ج|1ش|2ش|3ش|4ش|5ش)/i,
  abbreviated: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i,
  wide: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i
};
var fa_IR_lib_match_parseDayPatterns = {
  narrow: [/^ی/i, /^دو/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i],
  any: [/^(ی|1ش|یکشنبه)/i, /^(د|2ش|دوشنبه)/i, /^(س|3ش|سه‌شنبه)/i, /^(چ|4ش|چهارشنبه)/i, /^(پ|5ش|پنجشنبه)/i, /^(ج|جمعه)/i, /^(ش|شنبه)/i]
};
var fa_IR_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ب|ق|ن|ظ|ص|ب.ظ.|ع|ش)/i,
  abbreviated: /^(ق.ظ.|ب.ظ.|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i,
  wide: /^(قبل‌ازظهر|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i
};
var fa_IR_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(ق|ق.ظ.|قبل‌ازظهر)/i,
    pm: /^(ب|ب.ظ.|بعدازظهر)/i,
    midnight: /^(‌نیمه‌شب|ن)/i,
    noon: /^(ظ|ظهر)/i,
    morning: /(ص|صبح)/i,
    afternoon: /(ب|ب.ظ.|بعدازظهر)/i,
    evening: /(ع|عصر)/i,
    night: /(ش|شب)/i
  }
};
var fa_IR_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: fa_IR_lib_match_matchOrdinalNumberPattern,
    parsePattern: fa_IR_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fa_IR_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fa_IR_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fa_IR_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fa_IR_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fa_IR_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fa_IR_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const fa_IR_lib_match = (fa_IR_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fa-IR/index.js





var fa_IR_locale = {
  code: "fa-IR",
  formatDistance: fa_IR_lib_formatDistance,
  formatLong: fa_IR_lib_formatLong,
  formatRelative: fa_IR_lib_formatRelative,
  localize: fa_IR_lib_localize,
  match: fa_IR_lib_match,
  options: {
    weekStartsOn: 6,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const fa_IR = (fa_IR_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/formatDistance/index.js
function futureSeconds(text) {
  return text.replace(/sekuntia?/, "sekunnin");
}
function futureMinutes(text) {
  return text.replace(/minuuttia?/, "minuutin");
}
function futureHours(text) {
  return text.replace(/tuntia?/, "tunnin");
}
function futureDays(text) {
  return text.replace(/päivää?/, "p\xE4iv\xE4n");
}
function futureWeeks(text) {
  return text.replace(/(viikko|viikkoa)/, "viikon");
}
function futureMonths(text) {
  return text.replace(/(kuukausi|kuukautta)/, "kuukauden");
}
function futureYears(text) {
  return text.replace(/(vuosi|vuotta)/, "vuoden");
}
var fi_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "alle sekunti",
    other: "alle {{count}} sekuntia",
    futureTense: futureSeconds
  },
  xSeconds: {
    one: "sekunti",
    other: "{{count}} sekuntia",
    futureTense: futureSeconds
  },
  halfAMinute: {
    one: "puoli minuuttia",
    other: "puoli minuuttia",
    futureTense: function futureTense(_text) {
      return "puolen minuutin";
    }
  },
  lessThanXMinutes: {
    one: "alle minuutti",
    other: "alle {{count}} minuuttia",
    futureTense: futureMinutes
  },
  xMinutes: {
    one: "minuutti",
    other: "{{count}} minuuttia",
    futureTense: futureMinutes
  },
  aboutXHours: {
    one: "noin tunti",
    other: "noin {{count}} tuntia",
    futureTense: futureHours
  },
  xHours: {
    one: "tunti",
    other: "{{count}} tuntia",
    futureTense: futureHours
  },
  xDays: {
    one: "p\xE4iv\xE4",
    other: "{{count}} p\xE4iv\xE4\xE4",
    futureTense: futureDays
  },
  aboutXWeeks: {
    one: "noin viikko",
    other: "noin {{count}} viikkoa",
    futureTense: futureWeeks
  },
  xWeeks: {
    one: "viikko",
    other: "{{count}} viikkoa",
    futureTense: futureWeeks
  },
  aboutXMonths: {
    one: "noin kuukausi",
    other: "noin {{count}} kuukautta",
    futureTense: futureMonths
  },
  xMonths: {
    one: "kuukausi",
    other: "{{count}} kuukautta",
    futureTense: futureMonths
  },
  aboutXYears: {
    one: "noin vuosi",
    other: "noin {{count}} vuotta",
    futureTense: futureYears
  },
  xYears: {
    one: "vuosi",
    other: "{{count}} vuotta",
    futureTense: futureYears
  },
  overXYears: {
    one: "yli vuosi",
    other: "yli {{count}} vuotta",
    futureTense: futureYears
  },
  almostXYears: {
    one: "l\xE4hes vuosi",
    other: "l\xE4hes {{count}} vuotta",
    futureTense: futureYears
  }
};
var fi_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var tokenValue = fi_lib_formatDistance_formatDistanceLocale[token];
  var result = count === 1 ? tokenValue.one : tokenValue.other.replace("{{count}}", String(count));
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return tokenValue.futureTense(result) + " kuluttua";
    } else {
      return result + " sitten";
    }
  }
  return result;
};
/* harmony default export */ const fi_lib_formatDistance = (fi_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/formatLong/index.js

var fi_lib_formatLong_dateFormats = {
  full: "eeee d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "d.M.y"
};
var fi_lib_formatLong_timeFormats = {
  full: "HH.mm.ss zzzz",
  long: "HH.mm.ss z",
  medium: "HH.mm.ss",
  short: "HH.mm"
};
var fi_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'klo' {{time}}",
  long: "{{date}} 'klo' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var fi_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fi_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fi_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fi_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const fi_lib_formatLong = (fi_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/formatRelative/index.js
var fi_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'viime' eeee 'klo' p",
  yesterday: "'eilen klo' p",
  today: "'t\xE4n\xE4\xE4n klo' p",
  tomorrow: "'huomenna klo' p",
  nextWeek: "'ensi' eeee 'klo' p",
  other: "P"
};
var fi_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return fi_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fi_lib_formatRelative = (fi_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/localize/index.js

var fi_lib_localize_eraValues = {
  narrow: ["eaa.", "jaa."],
  abbreviated: ["eaa.", "jaa."],
  wide: ["ennen ajanlaskun alkua", "j\xE4lkeen ajanlaskun alun"]
};
var fi_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. kvartaali", "2. kvartaali", "3. kvartaali", "4. kvartaali"]
};
var fi_lib_localize_monthValues = {
  narrow: ["T", "H", "M", "H", "T", "K", "H", "E", "S", "L", "M", "J"],
  abbreviated: ["tammi", "helmi", "maalis", "huhti", "touko", "kes\xE4", "hein\xE4", "elo", "syys", "loka", "marras", "joulu"],
  wide: ["tammikuu", "helmikuu", "maaliskuu", "huhtikuu", "toukokuu", "kes\xE4kuu", "hein\xE4kuu", "elokuu", "syyskuu", "lokakuu", "marraskuu", "joulukuu"]
};
var fi_lib_localize_formattingMonthValues = {
  narrow: fi_lib_localize_monthValues.narrow,
  abbreviated: fi_lib_localize_monthValues.abbreviated,
  wide: ["tammikuuta", "helmikuuta", "maaliskuuta", "huhtikuuta", "toukokuuta", "kes\xE4kuuta", "hein\xE4kuuta", "elokuuta", "syyskuuta", "lokakuuta", "marraskuuta", "joulukuuta"]
};
var fi_lib_localize_dayValues = {
  narrow: ["S", "M", "T", "K", "T", "P", "L"],
  short: ["su", "ma", "ti", "ke", "to", "pe", "la"],
  abbreviated: ["sunn.", "maan.", "tiis.", "kesk.", "torst.", "perj.", "la"],
  wide: ["sunnuntai", "maanantai", "tiistai", "keskiviikko", "torstai", "perjantai", "lauantai"]
};
var formattingDayValues = {
  narrow: fi_lib_localize_dayValues.narrow,
  short: fi_lib_localize_dayValues.short,
  abbreviated: fi_lib_localize_dayValues.abbreviated,
  wide: ["sunnuntaina", "maanantaina", "tiistaina", "keskiviikkona", "torstaina", "perjantaina", "lauantaina"]
};
var fi_lib_localize_dayPeriodValues = {
  narrow: {
    am: "ap",
    pm: "ip",
    midnight: "keskiy\xF6",
    noon: "keskip\xE4iv\xE4",
    morning: "ap",
    afternoon: "ip",
    evening: "illalla",
    night: "y\xF6ll\xE4"
  },
  abbreviated: {
    am: "ap",
    pm: "ip",
    midnight: "keskiy\xF6",
    noon: "keskip\xE4iv\xE4",
    morning: "ap",
    afternoon: "ip",
    evening: "illalla",
    night: "y\xF6ll\xE4"
  },
  wide: {
    am: "ap",
    pm: "ip",
    midnight: "keskiy\xF6ll\xE4",
    noon: "keskip\xE4iv\xE4ll\xE4",
    morning: "aamup\xE4iv\xE4ll\xE4",
    afternoon: "iltap\xE4iv\xE4ll\xE4",
    evening: "illalla",
    night: "y\xF6ll\xE4"
  }
};
var fi_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var fi_lib_localize_localize = {
  ordinalNumber: fi_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: fi_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_dayValues,
    defaultWidth: "wide",
    formattingValues: formattingDayValues,
    defaultFormattingWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: fi_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const fi_lib_localize = (fi_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/_lib/match/index.js


var fi_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)/i;
var fi_lib_match_parseOrdinalNumberPattern = /\d+/i;
var fi_lib_match_matchEraPatterns = {
  narrow: /^(e|j)/i,
  abbreviated: /^(eaa.|jaa.)/i,
  wide: /^(ennen ajanlaskun alkua|jälkeen ajanlaskun alun)/i
};
var fi_lib_match_parseEraPatterns = {
  any: [/^e/i, /^j/i]
};
var fi_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\.? kvartaali/i
};
var fi_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var fi_lib_match_matchMonthPatterns = {
  narrow: /^[thmkeslj]/i,
  abbreviated: /^(tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu)/i,
  wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesäkuu|heinäkuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
};
var fi_lib_match_parseMonthPatterns = {
  narrow: [/^t/i, /^h/i, /^m/i, /^h/i, /^t/i, /^k/i, /^h/i, /^e/i, /^s/i, /^l/i, /^m/i, /^j/i],
  any: [/^ta/i, /^hel/i, /^maa/i, /^hu/i, /^to/i, /^k/i, /^hei/i, /^e/i, /^s/i, /^l/i, /^mar/i, /^j/i]
};
var fi_lib_match_matchDayPatterns = {
  narrow: /^[smtkpl]/i,
  short: /^(su|ma|ti|ke|to|pe|la)/i,
  abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
  wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
};
var fi_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^k/i, /^t/i, /^p/i, /^l/i],
  any: [/^s/i, /^m/i, /^ti/i, /^k/i, /^to/i, /^p/i, /^l/i]
};
var fi_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ap|ip|keskiyö|keskipäivä|aamupäivällä|iltapäivällä|illalla|yöllä)/i,
  any: /^(ap|ip|keskiyöllä|keskipäivällä|aamupäivällä|iltapäivällä|illalla|yöllä)/i
};
var fi_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ap/i,
    pm: /^ip/i,
    midnight: /^keskiyö/i,
    noon: /^keskipäivä/i,
    morning: /aamupäivällä/i,
    afternoon: /iltapäivällä/i,
    evening: /illalla/i,
    night: /yöllä/i
  }
};
var fi_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: fi_lib_match_matchOrdinalNumberPattern,
    parsePattern: fi_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fi_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fi_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fi_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fi_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fi_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: fi_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const fi_lib_match = (fi_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fi/index.js





var fi_locale = {
  code: "fi",
  formatDistance: fi_lib_formatDistance,
  formatLong: fi_lib_formatLong,
  formatRelative: fi_lib_formatRelative,
  localize: fi_lib_localize,
  match: fi_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const fi = (fi_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/formatDistance/index.js
var fr_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "moins d\u2019une seconde",
    other: "moins de {{count}} secondes"
  },
  xSeconds: {
    one: "1 seconde",
    other: "{{count}} secondes"
  },
  halfAMinute: "30 secondes",
  lessThanXMinutes: {
    one: "moins d\u2019une minute",
    other: "moins de {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "environ 1 heure",
    other: "environ {{count}} heures"
  },
  xHours: {
    one: "1 heure",
    other: "{{count}} heures"
  },
  xDays: {
    one: "1 jour",
    other: "{{count}} jours"
  },
  aboutXWeeks: {
    one: "environ 1 semaine",
    other: "environ {{count}} semaines"
  },
  xWeeks: {
    one: "1 semaine",
    other: "{{count}} semaines"
  },
  aboutXMonths: {
    one: "environ 1 mois",
    other: "environ {{count}} mois"
  },
  xMonths: {
    one: "1 mois",
    other: "{{count}} mois"
  },
  aboutXYears: {
    one: "environ 1 an",
    other: "environ {{count}} ans"
  },
  xYears: {
    one: "1 an",
    other: "{{count}} ans"
  },
  overXYears: {
    one: "plus d\u2019un an",
    other: "plus de {{count}} ans"
  },
  almostXYears: {
    one: "presqu\u2019un an",
    other: "presque {{count}} ans"
  }
};
var fr_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var form = fr_lib_formatDistance_formatDistanceLocale[token];
  if (typeof form === "string") {
    result = form;
  } else if (count === 1) {
    result = form.one;
  } else {
    result = form.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "dans " + result;
    } else {
      return "il y a " + result;
    }
  }
  return result;
};
/* harmony default export */ const fr_lib_formatDistance = (fr_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/formatLong/index.js

var fr_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y"
};
var fr_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var fr_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\xE0' {{time}}",
  long: "{{date}} '\xE0' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var fr_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const fr_lib_formatLong = (fr_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/formatRelative/index.js
var fr_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'dernier \xE0' p",
  yesterday: "'hier \xE0' p",
  today: "'aujourd\u2019hui \xE0' p",
  tomorrow: "'demain \xE0' p'",
  nextWeek: "eeee 'prochain \xE0' p",
  other: "P"
};
var fr_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return fr_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fr_lib_formatRelative = (fr_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/localize/index.js

var fr_lib_localize_eraValues = {
  narrow: ["av. J.-C", "ap. J.-C"],
  abbreviated: ["av. J.-C", "ap. J.-C"],
  wide: ["avant J\xE9sus-Christ", "apr\xE8s J\xE9sus-Christ"]
};
var fr_lib_localize_quarterValues = {
  narrow: ["T1", "T2", "T3", "T4"],
  abbreviated: ["1er trim.", "2\xE8me trim.", "3\xE8me trim.", "4\xE8me trim."],
  wide: ["1er trimestre", "2\xE8me trimestre", "3\xE8me trimestre", "4\xE8me trimestre"]
};
var fr_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["janv.", "f\xE9vr.", "mars", "avr.", "mai", "juin", "juil.", "ao\xFBt", "sept.", "oct.", "nov.", "d\xE9c."],
  wide: ["janvier", "f\xE9vrier", "mars", "avril", "mai", "juin", "juillet", "ao\xFBt", "septembre", "octobre", "novembre", "d\xE9cembre"]
};
var fr_lib_localize_dayValues = {
  narrow: ["D", "L", "M", "M", "J", "V", "S"],
  short: ["di", "lu", "ma", "me", "je", "ve", "sa"],
  abbreviated: ["dim.", "lun.", "mar.", "mer.", "jeu.", "ven.", "sam."],
  wide: ["dimanche", "lundi", "mardi", "mercredi", "jeudi", "vendredi", "samedi"]
};
var fr_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "minuit",
    noon: "midi",
    morning: "mat.",
    afternoon: "ap.m.",
    evening: "soir",
    night: "mat."
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "minuit",
    noon: "midi",
    morning: "matin",
    afternoon: "apr\xE8s-midi",
    evening: "soir",
    night: "matin"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "minuit",
    noon: "midi",
    morning: "du matin",
    afternoon: "de l\u2019apr\xE8s-midi",
    evening: "du soir",
    night: "du matin"
  }
};
var fr_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (number === 0)
    return "0";
  var feminineUnits = ["year", "week", "hour", "minute", "second"];
  var suffix;
  if (number === 1) {
    suffix = unit && feminineUnits.includes(unit) ? "\xE8re" : "er";
  } else {
    suffix = "\xE8me";
  }
  return number + suffix;
};
var fr_lib_localize_localize = {
  ordinalNumber: fr_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: fr_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const fr_lib_localize = (fr_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/_lib/match/index.js


var fr_lib_match_matchOrdinalNumberPattern = /^(\d+)(ième|ère|ème|er|e)?/i;
var fr_lib_match_parseOrdinalNumberPattern = /\d+/i;
var fr_lib_match_matchEraPatterns = {
  narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
  abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
  wide: /^(avant Jésus-Christ|après Jésus-Christ)/i
};
var fr_lib_match_parseEraPatterns = {
  any: [/^av/i, /^ap/i]
};
var fr_lib_match_matchQuarterPatterns = {
  narrow: /^T?[1234]/i,
  abbreviated: /^[1234](er|ème|e)? trim\.?/i,
  wide: /^[1234](er|ème|e)? trimestre/i
};
var fr_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var fr_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv|févr|mars|avr|mai|juin|juill|juil|août|sept|oct|nov|déc)\.?/i,
  wide: /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i
};
var fr_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^av/i, /^ma/i, /^juin/i, /^juil/i, /^ao/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var fr_lib_match_matchDayPatterns = {
  narrow: /^[lmjvsd]/i,
  short: /^(di|lu|ma|me|je|ve|sa)/i,
  abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
  wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
};
var fr_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^di/i, /^lu/i, /^ma/i, /^me/i, /^je/i, /^ve/i, /^sa/i]
};
var fr_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
  any: /^([ap]\.?\s?m\.?|du matin|de l'après[-\s]midi|du soir|de la nuit)/i
};
var fr_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^min/i,
    noon: /^mid/i,
    morning: /mat/i,
    afternoon: /ap/i,
    evening: /soir/i,
    night: /nuit/i
  }
};
var fr_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: fr_lib_match_matchOrdinalNumberPattern,
    parsePattern: fr_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fr_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fr_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fr_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fr_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fr_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: fr_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const fr_lib_match = (fr_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr/index.js





var fr_locale = {
  code: "fr",
  formatDistance: fr_lib_formatDistance,
  formatLong: fr_lib_formatLong,
  formatRelative: fr_lib_formatRelative,
  localize: fr_lib_localize,
  match: fr_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const fr = (fr_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CA/_lib/formatLong/index.js

var fr_CA_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "yy-MM-dd"
};
var fr_CA_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var fr_CA_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\xE0' {{time}}",
  long: "{{date}} '\xE0' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var fr_CA_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CA_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CA_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CA_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const fr_CA_lib_formatLong = (fr_CA_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CA/index.js





var fr_CA_locale = {
  code: "fr-CA",
  formatDistance: fr_lib_formatDistance,
  formatLong: fr_CA_lib_formatLong,
  formatRelative: fr_lib_formatRelative,
  localize: fr_lib_localize,
  match: fr_lib_match,
  // Unique for fr-CA
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const fr_CA = (fr_CA_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CH/_lib/formatLong/index.js

var fr_CH_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd.MM.y"
};
var fr_CH_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var fr_CH_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\xE0' {{time}}",
  long: "{{date}} '\xE0' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var fr_CH_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CH_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CH_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fr_CH_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const fr_CH_lib_formatLong = (fr_CH_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CH/_lib/formatRelative/index.js
var fr_CH_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'la semaine derni\xE8re \xE0' p",
  yesterday: "'hier \xE0' p",
  today: "'aujourd\u2019hui \xE0' p",
  tomorrow: "'demain \xE0' p'",
  nextWeek: "eeee 'la semaine prochaine \xE0' p",
  other: "P"
};
var fr_CH_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return fr_CH_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fr_CH_lib_formatRelative = (fr_CH_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fr-CH/index.js





var fr_CH_locale = {
  code: "fr-CH",
  formatDistance: fr_lib_formatDistance,
  formatLong: fr_CH_lib_formatLong,
  formatRelative: fr_CH_lib_formatRelative,
  localize: fr_lib_localize,
  match: fr_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const fr_CH = (fr_CH_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/formatDistance/index.js
var fy_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "minder as 1 sekonde",
    other: "minder as {{count}} sekonden"
  },
  xSeconds: {
    one: "1 sekonde",
    other: "{{count}} sekonden"
  },
  halfAMinute: "oardel min\xFAt",
  lessThanXMinutes: {
    one: "minder as 1 min\xFAt",
    other: "minder as {{count}} minuten"
  },
  xMinutes: {
    one: "1 min\xFAt",
    other: "{{count}} minuten"
  },
  aboutXHours: {
    one: "sawat 1 oere",
    other: "sawat {{count}} oere"
  },
  xHours: {
    one: "1 oere",
    other: "{{count}} oere"
  },
  xDays: {
    one: "1 dei",
    other: "{{count}} dagen"
  },
  aboutXWeeks: {
    one: "sawat 1 wike",
    other: "sawat {{count}} wiken"
  },
  xWeeks: {
    one: "1 wike",
    other: "{{count}} wiken"
  },
  aboutXMonths: {
    one: "sawat 1 moanne",
    other: "sawat {{count}} moannen"
  },
  xMonths: {
    one: "1 moanne",
    other: "{{count}} moannen"
  },
  aboutXYears: {
    one: "sawat 1 jier",
    other: "sawat {{count}} jier"
  },
  xYears: {
    one: "1 jier",
    other: "{{count}} jier"
  },
  overXYears: {
    one: "mear as 1 jier",
    other: "mear as {{count}}s jier"
  },
  almostXYears: {
    one: "hast 1 jier",
    other: "hast {{count}} jier"
  }
};
var fy_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = fy_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "oer " + result;
    } else {
      return result + " lyn";
    }
  }
  return result;
};
/* harmony default export */ const fy_lib_formatDistance = (fy_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/formatLong/index.js

var fy_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd-MM-y"
};
var fy_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var fy_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var fy_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: fy_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: fy_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: fy_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const fy_lib_formatLong = (fy_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/formatRelative/index.js
var fy_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\xF4fr\xFBne' eeee 'om' p",
  yesterday: "'juster om' p",
  today: "'hjoed om' p",
  tomorrow: "'moarn om' p",
  nextWeek: "eeee 'om' p",
  other: "P"
};
var fy_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return fy_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const fy_lib_formatRelative = (fy_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/localize/index.js

var fy_lib_localize_eraValues = {
  narrow: ["f.K.", "n.K."],
  abbreviated: ["f.Kr.", "n.Kr."],
  wide: ["foar Kristus", "nei Kristus"]
};
var fy_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1e fearnsjier", "2e fearnsjier", "3e fearnsjier", "4e fearnsjier"]
};
var fy_lib_localize_monthValues = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: ["jan.", "feb.", "mrt.", "apr.", "mai.", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "des."],
  wide: ["jannewaris", "febrewaris", "maart", "april", "maaie", "juny", "july", "augustus", "septimber", "oktober", "novimber", "desimber"]
};
var fy_lib_localize_dayValues = {
  narrow: ["s", "m", "t", "w", "t", "f", "s"],
  short: ["si", "mo", "ti", "wo", "to", "fr", "so"],
  abbreviated: ["snein", "moa", "tii", "woa", "ton", "fre", "sneon"],
  wide: ["snein", "moandei", "tiisdei", "woansdei", "tongersdei", "freed", "sneon"]
};
var fy_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "middei",
    morning: "moarns",
    afternoon: "middeis",
    evening: "j\xFBns",
    night: "nachts"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "middei",
    morning: "moarns",
    afternoon: "middeis",
    evening: "j\xFBns",
    night: "nachts"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "middei",
    morning: "moarns",
    afternoon: "middeis",
    evening: "j\xFBns",
    night: "nachts"
  }
};
var fy_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "e";
};
var fy_lib_localize_localize = {
  ordinalNumber: fy_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: fy_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const fy_lib_localize = (fy_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/_lib/match/index.js


var fy_lib_match_matchOrdinalNumberPattern = /^(\d+)e?/i;
var fy_lib_match_parseOrdinalNumberPattern = /\d+/i;
var fy_lib_match_matchEraPatterns = {
  narrow: /^([fn]\.? ?K\.?)/,
  abbreviated: /^([fn]\. ?Kr\.?)/,
  wide: /^((foar|nei) Kristus)/
};
var fy_lib_match_parseEraPatterns = {
  any: [/^f/, /^n/]
};
var fy_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e fearnsjier/i
};
var fy_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var fy_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mai.|jun.|jul.|aug.|sep.|okt.|nov.|des.)/i,
  wide: /^(jannewaris|febrewaris|maart|april|maaie|juny|july|augustus|septimber|oktober|novimber|desimber)/i
};
var fy_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^des/i]
};
var fy_lib_match_matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(si|mo|ti|wo|to|fr|so)/i,
  abbreviated: /^(snein|moa|tii|woa|ton|fre|sneon)/i,
  wide: /^(snein|moandei|tiisdei|woansdei|tongersdei|freed|sneon)/i
};
var fy_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^sn/i, /^mo/i, /^ti/i, /^wo/i, /^to/i, /^fr/i, /^sn/i]
};
var fy_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|middernacht|middeis|moarns|middei|jûns|nachts)/i
};
var fy_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^middei/i,
    morning: /moarns/i,
    afternoon: /^middeis/i,
    evening: /jûns/i,
    night: /nachts/i
  }
};
var fy_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: fy_lib_match_matchOrdinalNumberPattern,
    parsePattern: fy_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fy_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fy_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fy_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: fy_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: fy_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: fy_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const fy_lib_match = (fy_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/fy/index.js





var fy_locale = {
  code: "fy",
  formatDistance: fy_lib_formatDistance,
  formatLong: fy_lib_formatLong,
  formatRelative: fy_lib_formatRelative,
  localize: fy_lib_localize,
  match: fy_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const fy = (fy_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/formatDistance/index.js
var gd_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "nas lugha na diog",
    other: "nas lugha na {{count}} diogan"
  },
  xSeconds: {
    one: "1 diog",
    two: "2 dhiog",
    twenty: "20 diog",
    other: "{{count}} diogan"
  },
  halfAMinute: "leth mhionaid",
  lessThanXMinutes: {
    one: "nas lugha na mionaid",
    other: "nas lugha na {{count}} mionaidean"
  },
  xMinutes: {
    one: "1 mionaid",
    two: "2 mhionaid",
    twenty: "20 mionaid",
    other: "{{count}} mionaidean"
  },
  aboutXHours: {
    one: "mu uair de th\xECde",
    other: "mu {{count}} uairean de th\xECde"
  },
  xHours: {
    one: "1 uair de th\xECde",
    two: "2 uair de th\xECde",
    twenty: "20 uair de th\xECde",
    other: "{{count}} uairean de th\xECde"
  },
  xDays: {
    one: "1 l\xE0",
    other: "{{count}} l\xE0"
  },
  aboutXWeeks: {
    one: "mu 1 seachdain",
    other: "mu {{count}} seachdainean"
  },
  xWeeks: {
    one: "1 seachdain",
    other: "{{count}} seachdainean"
  },
  aboutXMonths: {
    one: "mu mh\xECos",
    other: "mu {{count}} m\xECosan"
  },
  xMonths: {
    one: "1 m\xECos",
    other: "{{count}} m\xECosan"
  },
  aboutXYears: {
    one: "mu bhliadhna",
    other: "mu {{count}} bliadhnaichean"
  },
  xYears: {
    one: "1 bhliadhna",
    other: "{{count}} bliadhna"
  },
  overXYears: {
    one: "c\xF2rr is bliadhna",
    other: "c\xF2rr is {{count}} bliadhnaichean"
  },
  almostXYears: {
    one: "cha mh\xF2r bliadhna",
    other: "cha mh\xF2r {{count}} bliadhnaichean"
  }
};
var gd_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = gd_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && !!tokenValue.two) {
    result = tokenValue.two;
  } else if (count === 20 && !!tokenValue.twenty) {
    result = tokenValue.twenty;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "ann an " + result;
    } else {
      return "o chionn " + result;
    }
  }
  return result;
};
/* harmony default export */ const gd_lib_formatDistance = (gd_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/formatLong/index.js

var gd_lib_formatLong_dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var gd_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var gd_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'aig' {{time}}",
  long: "{{date}} 'aig' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var gd_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: gd_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: gd_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: gd_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const gd_lib_formatLong = (gd_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/formatRelative/index.js
var gd_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'mu dheireadh' eeee 'aig' p",
  //FIX
  yesterday: "'an-d\xE8 aig' p",
  today: "'an-diugh aig' p",
  tomorrow: "'a-m\xE0ireach aig' p",
  nextWeek: "eeee 'aig' p",
  other: "P"
};
var gd_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return gd_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const gd_lib_formatRelative = (gd_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/localize/index.js

var gd_lib_localize_eraValues = {
  narrow: ["R", "A"],
  abbreviated: ["RC", "AD"],
  wide: ["ro Chr\xECosta", "anno domini"]
};
var gd_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["C1", "C2", "C3", "C4"],
  wide: ["a' chiad chairteal", "an d\xE0rna cairteal", "an treas cairteal", "an ceathramh cairteal"]
};
var gd_lib_localize_monthValues = {
  narrow: ["F", "G", "M", "G", "C", "\xD2", "I", "L", "S", "D", "S", "D"],
  abbreviated: ["Faoi", "Gear", "M\xE0rt", "Gibl", "C\xE8it", "\xD2gmh", "Iuch", "L\xF9n", "Sult", "D\xE0mh", "Samh", "D\xF9bh"],
  wide: ["Am Faoilleach", "An Gearran", "Am M\xE0rt", "An Giblean", "An C\xE8itean", "An t-\xD2gmhios", "An t-Iuchar", "An L\xF9nastal", "An t-Sultain", "An D\xE0mhair", "An t-Samhain", "An D\xF9bhlachd"]
};
var gd_lib_localize_dayValues = {
  narrow: ["D", "L", "M", "C", "A", "H", "S"],
  short: ["D\xF2", "Lu", "M\xE0", "Ci", "Ar", "Ha", "Sa"],
  abbreviated: ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"],
  wide: ["Did\xF2mhnaich", "Diluain", "Dim\xE0irt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"]
};
var gd_lib_localize_dayPeriodValues = {
  narrow: {
    am: "m",
    pm: "f",
    midnight: "m.o.",
    noon: "m.l.",
    morning: "madainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "oidhche"
  },
  abbreviated: {
    am: "M.",
    pm: "F.",
    midnight: "meadhan oidhche",
    noon: "meadhan l\xE0",
    morning: "madainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "oidhche"
  },
  wide: {
    am: "m.",
    pm: "f.",
    midnight: "meadhan oidhche",
    noon: "meadhan l\xE0",
    morning: "madainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "oidhche"
  }
};
var gd_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "m",
    pm: "f",
    midnight: "m.o.",
    noon: "m.l.",
    morning: "sa mhadainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "air an oidhche"
  },
  abbreviated: {
    am: "M.",
    pm: "F.",
    midnight: "meadhan oidhche",
    noon: "meadhan l\xE0",
    morning: "sa mhadainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "air an oidhche"
  },
  wide: {
    am: "m.",
    pm: "f.",
    midnight: "meadhan oidhche",
    noon: "meadhan l\xE0",
    morning: "sa mhadainn",
    afternoon: "feasgar",
    evening: "feasgar",
    night: "air an oidhche"
  }
};
var gd_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "d";
      case 2:
        return number + "na";
    }
  }
  if (rem100 === 12) {
    return number + "na";
  }
  return number + "mh";
};
var gd_lib_localize_localize = {
  ordinalNumber: gd_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: gd_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: gd_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const gd_lib_localize = (gd_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/_lib/match/index.js


var gd_lib_match_matchOrdinalNumberPattern = /^(\d+)(d|na|tr|mh)?/i;
var gd_lib_match_parseOrdinalNumberPattern = /\d+/i;
var gd_lib_match_matchEraPatterns = {
  narrow: /^(r|a)/i,
  abbreviated: /^(r\.?\s?c\.?|r\.?\s?a\.?\s?c\.?|a\.?\s?d\.?|a\.?\s?c\.?)/i,
  wide: /^(ro Chrìosta|ron aois choitchinn|anno domini|aois choitcheann)/i
};
var gd_lib_match_parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var gd_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^c[1234]/i,
  wide: /^[1234](cd|na|tr|mh)? cairteal/i
};
var gd_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var gd_lib_match_matchMonthPatterns = {
  narrow: /^[fgmcòilsd]/i,
  abbreviated: /^(faoi|gear|màrt|gibl|cèit|ògmh|iuch|lùn|sult|dàmh|samh|dùbh)/i,
  wide: /^(am faoilleach|an gearran|am màrt|an giblean|an cèitean|an t-Ògmhios|an t-Iuchar|an lùnastal|an t-Sultain|an dàmhair|an t-Samhain|an dùbhlachd)/i
};
var gd_lib_match_parseMonthPatterns = {
  narrow: [/^f/i, /^g/i, /^m/i, /^g/i, /^c/i, /^ò/i, /^i/i, /^l/i, /^s/i, /^d/i, /^s/i, /^d/i],
  any: [/^fa/i, /^ge/i, /^mà/i, /^gi/i, /^c/i, /^ò/i, /^i/i, /^l/i, /^su/i, /^d/i, /^sa/i, /^d/i]
};
var gd_lib_match_matchDayPatterns = {
  narrow: /^[dlmcahs]/i,
  short: /^(dò|lu|mà|ci|ar|ha|sa)/i,
  abbreviated: /^(did|dil|dim|dic|dia|dih|dis)/i,
  wide: /^(didòmhnaich|diluain|dimàirt|diciadain|diardaoin|dihaoine|disathairne)/i
};
var gd_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i],
  any: [/^d/i, /^l/i, /^m/i, /^c/i, /^a/i, /^h/i, /^s/i]
};
var gd_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(san|aig) (madainn|feasgar|feasgar|oidhche))/i,
  any: /^([ap]\.?\s?m\.?|meadhan oidhche|meadhan là|(san|aig) (madainn|feasgar|feasgar|oidhche))/i
};
var gd_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^m/i,
    pm: /^f/i,
    midnight: /^meadhan oidhche/i,
    noon: /^meadhan là/i,
    morning: /sa mhadainn/i,
    afternoon: /feasgar/i,
    evening: /feasgar/i,
    night: /air an oidhche/i
  }
};
var gd_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: gd_lib_match_matchOrdinalNumberPattern,
    parsePattern: gd_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gd_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gd_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gd_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gd_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gd_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: gd_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const gd_lib_match = (gd_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gd/index.js





var gd_locale = {
  code: "gd",
  formatDistance: gd_lib_formatDistance,
  formatLong: gd_lib_formatLong,
  formatRelative: gd_lib_formatRelative,
  localize: gd_lib_localize,
  match: gd_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const gd = (gd_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/formatDistance/index.js
var gl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "menos dun segundo",
    other: "menos de {{count}} segundos"
  },
  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundos"
  },
  halfAMinute: "medio minuto",
  lessThanXMinutes: {
    one: "menos dun minuto",
    other: "menos de {{count}} minutos"
  },
  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutos"
  },
  aboutXHours: {
    one: "arredor dunha hora",
    other: "arredor de {{count}} horas"
  },
  xHours: {
    one: "1 hora",
    other: "{{count}} horas"
  },
  xDays: {
    one: "1 d\xEDa",
    other: "{{count}} d\xEDas"
  },
  aboutXWeeks: {
    one: "arredor dunha semana",
    other: "arredor de {{count}} semanas"
  },
  xWeeks: {
    one: "1 semana",
    other: "{{count}} semanas"
  },
  aboutXMonths: {
    one: "arredor de 1 mes",
    other: "arredor de {{count}} meses"
  },
  xMonths: {
    one: "1 mes",
    other: "{{count}} meses"
  },
  aboutXYears: {
    one: "arredor dun ano",
    other: "arredor de {{count}} anos"
  },
  xYears: {
    one: "1 ano",
    other: "{{count}} anos"
  },
  overXYears: {
    one: "m\xE1is dun ano",
    other: "m\xE1is de {{count}} anos"
  },
  almostXYears: {
    one: "case un ano",
    other: "case {{count}} anos"
  }
};
var gl_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = gl_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "en " + result;
    } else {
      return "hai " + result;
    }
  }
  return result;
};
/* harmony default export */ const gl_lib_formatDistance = (gl_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/formatLong/index.js

var gl_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y"
};
var gl_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var gl_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\xE1s' {{time}}",
  long: "{{date}} '\xE1s' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var gl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: gl_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: gl_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: gl_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const gl_lib_formatLong = (gl_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/formatRelative/index.js
var gl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'o' eeee 'pasado \xE1' LT",
  yesterday: "'onte \xE1' p",
  today: "'hoxe \xE1' p",
  tomorrow: "'ma\xF1\xE1 \xE1' p",
  nextWeek: "eeee '\xE1' p",
  other: "P"
};
var gl_lib_formatRelative_formatRelativeLocalePlural = {
  lastWeek: "'o' eeee 'pasado \xE1s' p",
  yesterday: "'onte \xE1s' p",
  today: "'hoxe \xE1s' p",
  tomorrow: "'ma\xF1\xE1 \xE1s' p",
  nextWeek: "eeee '\xE1s' p",
  other: "P"
};
var gl_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  if (date.getUTCHours() !== 1) {
    return gl_lib_formatRelative_formatRelativeLocalePlural[token];
  }
  return gl_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const gl_lib_formatRelative = (gl_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/localize/index.js

var gl_lib_localize_eraValues = {
  narrow: ["AC", "DC"],
  abbreviated: ["AC", "DC"],
  wide: ["antes de cristo", "despois de cristo"]
};
var gl_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1\xBA trimestre", "2\xBA trimestre", "3\xBA trimestre", "4\xBA trimestre"]
};
var gl_lib_localize_monthValues = {
  narrow: ["e", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: ["xan", "feb", "mar", "abr", "mai", "xun", "xul", "ago", "set", "out", "nov", "dec"],
  wide: ["xaneiro", "febreiro", "marzo", "abril", "maio", "xu\xF1o", "xullo", "agosto", "setembro", "outubro", "novembro", "decembro"]
};
var gl_lib_localize_dayValues = {
  narrow: ["d", "l", "m", "m", "j", "v", "s"],
  short: ["do", "lu", "ma", "me", "xo", "ve", "sa"],
  abbreviated: ["dom", "lun", "mar", "mer", "xov", "ven", "sab"],
  wide: ["domingo", "luns", "martes", "m\xE9rcores", "xoves", "venres", "s\xE1bado"]
};
var gl_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "ma\xF1\xE1",
    afternoon: "tarde",
    evening: "tarde",
    night: "noite"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "medianoite",
    noon: "mediod\xEDa",
    morning: "ma\xF1\xE1",
    afternoon: "tarde",
    evening: "tardi\xF1a",
    night: "noite"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "medianoite",
    noon: "mediod\xEDa",
    morning: "ma\xF1\xE1",
    afternoon: "tarde",
    evening: "tardi\xF1a",
    night: "noite"
  }
};
var gl_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "da ma\xF1\xE1",
    afternoon: "da tarde",
    evening: "da tardi\xF1a",
    night: "da noite"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "medianoite",
    noon: "mediod\xEDa",
    morning: "da ma\xF1\xE1",
    afternoon: "da tarde",
    evening: "da tardi\xF1a",
    night: "da noite"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "medianoite",
    noon: "mediod\xEDa",
    morning: "da ma\xF1\xE1",
    afternoon: "da tarde",
    evening: "da tardi\xF1a",
    night: "da noite"
  }
};
var gl_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "\xBA";
};
var gl_lib_localize_localize = {
  ordinalNumber: gl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: gl_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: gl_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const gl_lib_localize = (gl_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/_lib/match/index.js


var gl_lib_match_matchOrdinalNumberPattern = /^(\d+)(º)?/i;
var gl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var gl_lib_match_matchEraPatterns = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes da era com[uú]n|despois de cristo|era com[uú]n)/i
};
var gl_lib_match_parseEraPatterns = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes da era com[uú]n)/i, /^(despois de cristo|era com[uú]n)/i]
};
var gl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var gl_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var gl_lib_match_matchMonthPatterns = {
  narrow: /^[xfmasond]/i,
  abbreviated: /^(xan|feb|mar|abr|mai|xun|xul|ago|set|out|nov|dec)/i,
  wide: /^(xaneiro|febreiro|marzo|abril|maio|xuño|xullo|agosto|setembro|outubro|novembro|decembro)/i
};
var gl_lib_match_parseMonthPatterns = {
  narrow: [/^x/i, /^f/i, /^m/i, /^a/i, /^m/i, /^x/i, /^x/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^xan/i, /^feb/i, /^mar/i, /^abr/i, /^mai/i, /^xun/i, /^xul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dec/i]
};
var gl_lib_match_matchDayPatterns = {
  narrow: /^[dlmxvs]/i,
  short: /^(do|lu|ma|me|xo|ve|sa)/i,
  abbreviated: /^(dom|lun|mar|mer|xov|ven|sab)/i,
  wide: /^(domingo|luns|martes|m[eé]rcores|xoves|venres|s[áa]bado)/i
};
var gl_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^x/i, /^v/i, /^s/i],
  any: [/^do/i, /^lu/i, /^ma/i, /^me/i, /^xo/i, /^ve/i, /^sa/i]
};
var gl_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|md|(da|[aá]s) (mañ[aá]|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|medianoite|mediod[ií]a|(da|[aá]s) (mañ[aá]|tarde|noite))/i
};
var gl_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /^md/i,
    morning: /mañ[aá]/i,
    afternoon: /tarde/i,
    evening: /tardiña/i,
    night: /noite/i
  }
};
var gl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: gl_lib_match_matchOrdinalNumberPattern,
    parsePattern: gl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gl_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gl_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gl_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gl_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: gl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const gl_lib_match = (gl_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gl/index.js





var gl_locale = {
  code: "gl",
  formatDistance: gl_lib_formatDistance,
  formatLong: gl_lib_formatLong,
  formatRelative: gl_lib_formatRelative,
  localize: gl_lib_localize,
  match: gl_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const gl = (gl_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/formatDistance/index.js
var gu_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0AB9\u0AAE\u0AA3\u0ABE\u0A82",
    // CLDR #1461
    other: "\u200B\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0AB8\u0AC7\u0A95\u0A82\u0AA1"
  },
  xSeconds: {
    one: "1 \u0AB8\u0AC7\u0A95\u0A82\u0AA1",
    other: "{{count}} \u0AB8\u0AC7\u0A95\u0A82\u0AA1"
  },
  halfAMinute: "\u0A85\u0AA1\u0AA7\u0AC0 \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F",
  lessThanXMinutes: {
    one: "\u0A86 \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F",
    // CLDR #1448
    other: "\u200B\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F"
  },
  xMinutes: {
    one: "1 \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F",
    other: "{{count}} \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F"
  },
  aboutXHours: {
    one: "\u200B\u0A86\u0AB6\u0AB0\u0AC7 1 \u0A95\u0AB2\u0ABE\u0A95",
    other: "\u200B\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0A95\u0AB2\u0ABE\u0A95"
  },
  xHours: {
    one: "1 \u0A95\u0AB2\u0ABE\u0A95",
    other: "{{count}} \u0A95\u0AB2\u0ABE\u0A95"
  },
  xDays: {
    one: "1 \u0AA6\u0ABF\u0AB5\u0AB8",
    other: "{{count}} \u0AA6\u0ABF\u0AB5\u0AB8"
  },
  aboutXWeeks: {
    one: "\u0A86\u0AB6\u0AB0\u0AC7 1 \u0A85\u0AA0\u0AB5\u0ABE\u0AA1\u0ABF\u0AAF\u0AC1\u0A82",
    other: "\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0A85\u0AA0\u0AB5\u0ABE\u0AA1\u0ABF\u0AAF\u0ABE"
  },
  xWeeks: {
    one: "1 \u0A85\u0AA0\u0AB5\u0ABE\u0AA1\u0ABF\u0AAF\u0AC1\u0A82",
    other: "{{count}} \u0A85\u0AA0\u0AB5\u0ABE\u0AA1\u0ABF\u0AAF\u0ABE"
  },
  aboutXMonths: {
    one: "\u0A86\u0AB6\u0AB0\u0AC7 1 \u0AAE\u0AB9\u0ABF\u0AA8\u0ACB",
    other: "\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0AAE\u0AB9\u0ABF\u0AA8\u0ABE"
  },
  xMonths: {
    one: "1 \u0AAE\u0AB9\u0ABF\u0AA8\u0ACB",
    other: "{{count}} \u0AAE\u0AB9\u0ABF\u0AA8\u0ABE"
  },
  aboutXYears: {
    one: "\u0A86\u0AB6\u0AB0\u0AC7 1 \u0AB5\u0AB0\u0ACD\u0AB7",
    other: "\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0AB5\u0AB0\u0ACD\u0AB7"
  },
  xYears: {
    one: "1 \u0AB5\u0AB0\u0ACD\u0AB7",
    other: "{{count}} \u0AB5\u0AB0\u0ACD\u0AB7"
  },
  overXYears: {
    one: "1 \u0AB5\u0AB0\u0ACD\u0AB7\u0AA5\u0AC0 \u0AB5\u0AA7\u0AC1",
    other: "{{count}} \u0AB5\u0AB0\u0ACD\u0AB7\u0AA5\u0AC0 \u0AB5\u0AA7\u0AC1"
  },
  almostXYears: {
    one: "\u0AB2\u0A97\u0AAD\u0A97 1 \u0AB5\u0AB0\u0ACD\u0AB7",
    other: "\u0AB2\u0A97\u0AAD\u0A97 {{count}} \u0AB5\u0AB0\u0ACD\u0AB7"
  }
};
var gu_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = gu_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "\u0AAE\u0ABE\u0A82";
    } else {
      return result + " \u0AAA\u0AB9\u0AC7\u0AB2\u0ABE\u0A82";
    }
  }
  return result;
};
/* harmony default export */ const gu_lib_formatDistance = (gu_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/formatLong/index.js

var gu_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM, y",
  // CLDR #1825
  long: "d MMMM, y",
  // CLDR #1826
  medium: "d MMM, y",
  // CLDR #1827
  short: "d/M/yy"
  // CLDR #1828
};
var gu_lib_formatLong_timeFormats = {
  full: "hh:mm:ss a zzzz",
  // CLDR #1829
  long: "hh:mm:ss a z",
  // CLDR #1830
  medium: "hh:mm:ss a",
  // CLDR #1831
  short: "hh:mm a"
  // CLDR #1832
};
var gu_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  // CLDR #1833
  long: "{{date}} {{time}}",
  // CLDR #1834
  medium: "{{date}} {{time}}",
  // CLDR #1835
  short: "{{date}} {{time}}"
  // CLDR #1836
};
var gu_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: gu_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: gu_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: gu_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const gu_lib_formatLong = (gu_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/formatRelative/index.js
var gu_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0AAA\u0ABE\u0A9B\u0AB2\u0ABE' eeee p",
  // CLDR #1384
  yesterday: "'\u0A97\u0A88\u0A95\u0ABE\u0AB2\u0AC7' p",
  // CLDR #1409
  today: "'\u0A86\u0A9C\u0AC7' p",
  // CLDR #1410
  tomorrow: "'\u0A86\u0AB5\u0AA4\u0AC0\u0A95\u0ABE\u0AB2\u0AC7' p",
  // CLDR #1411
  nextWeek: "eeee p",
  // CLDR #1386
  other: "P"
};
var gu_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return gu_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const gu_lib_formatRelative = (gu_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/localize/index.js

var gu_lib_localize_eraValues = {
  narrow: ["\u0A88\u0AB8\u0AAA\u0AC2", "\u0A88\u0AB8"],
  abbreviated: ["\u0A88.\u0AB8.\u0AAA\u0AC2\u0AB0\u0ACD\u0AB5\u0AC7", "\u0A88.\u0AB8."],
  wide: ["\u0A88\u0AB8\u0AB5\u0AC0\u0AB8\u0AA8 \u0AAA\u0AC2\u0AB0\u0ACD\u0AB5\u0AC7", "\u0A88\u0AB8\u0AB5\u0AC0\u0AB8\u0AA8"]
};
var gu_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1\u0AB2\u0ACB \u0AA4\u0ACD\u0AB0\u0ABF\u0AAE\u0ABE\u0AB8", "2\u0A9C\u0ACB \u0AA4\u0ACD\u0AB0\u0ABF\u0AAE\u0ABE\u0AB8", "3\u0A9C\u0ACB \u0AA4\u0ACD\u0AB0\u0ABF\u0AAE\u0ABE\u0AB8", "4\u0AA5\u0ACB \u0AA4\u0ACD\u0AB0\u0ABF\u0AAE\u0ABE\u0AB8"]
};
var gu_lib_localize_monthValues = {
  narrow: ["\u0A9C\u0ABE", "\u0AAB\u0AC7", "\u0AAE\u0ABE", "\u0A8F", "\u0AAE\u0AC7", "\u0A9C\u0AC2", "\u0A9C\u0AC1", "\u0A93", "\u0AB8", "\u0A93", "\u0AA8", "\u0AA1\u0ABF"],
  abbreviated: ["\u0A9C\u0ABE\u0AA8\u0ACD\u0AAF\u0AC1", "\u0AAB\u0AC7\u0AAC\u0ACD\u0AB0\u0AC1", "\u0AAE\u0ABE\u0AB0\u0ACD\u0A9A", "\u0A8F\u0AAA\u0ACD\u0AB0\u0ABF\u0AB2", "\u0AAE\u0AC7", "\u0A9C\u0AC2\u0AA8", "\u0A9C\u0AC1\u0AB2\u0ABE\u0A88", "\u0A91\u0A97\u0AB8\u0ACD\u0A9F", "\u0AB8\u0AAA\u0ACD\u0A9F\u0AC7", "\u0A93\u0A95\u0ACD\u0A9F\u0ACB", "\u0AA8\u0AB5\u0AC7", "\u0AA1\u0ABF\u0AB8\u0AC7"],
  wide: ["\u0A9C\u0ABE\u0AA8\u0ACD\u0AAF\u0AC1\u0A86\u0AB0\u0AC0", "\u0AAB\u0AC7\u0AAC\u0ACD\u0AB0\u0AC1\u0A86\u0AB0\u0AC0", "\u0AAE\u0ABE\u0AB0\u0ACD\u0A9A", "\u0A8F\u0AAA\u0ACD\u0AB0\u0ABF\u0AB2", "\u0AAE\u0AC7", "\u0A9C\u0AC2\u0AA8", "\u0A9C\u0AC1\u0AB2\u0ABE\u0A87", "\u0A93\u0A97\u0AB8\u0ACD\u0A9F", "\u0AB8\u0AAA\u0ACD\u0A9F\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0", "\u0A93\u0A95\u0ACD\u0A9F\u0ACB\u0AAC\u0AB0", "\u0AA8\u0AB5\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0", "\u0AA1\u0ABF\u0AB8\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0"]
};
var gu_lib_localize_dayValues = {
  narrow: ["\u0AB0", "\u0AB8\u0ACB", "\u0AAE\u0A82", "\u0AAC\u0AC1", "\u0A97\u0AC1", "\u0AB6\u0AC1", "\u0AB6"],
  short: ["\u0AB0", "\u0AB8\u0ACB", "\u0AAE\u0A82", "\u0AAC\u0AC1", "\u0A97\u0AC1", "\u0AB6\u0AC1", "\u0AB6"],
  abbreviated: ["\u0AB0\u0AB5\u0ABF", "\u0AB8\u0ACB\u0AAE", "\u0AAE\u0A82\u0A97\u0AB3", "\u0AAC\u0AC1\u0AA7", "\u0A97\u0AC1\u0AB0\u0AC1", "\u0AB6\u0AC1\u0A95\u0ACD\u0AB0", "\u0AB6\u0AA8\u0ABF"],
  wide: [
    "\u0AB0\u0AB5\u0ABF\u0AB5\u0ABE\u0AB0",
    "\u0AB8\u0ACB\u0AAE\u0AB5\u0ABE\u0AB0",
    "\u0AAE\u0A82\u0A97\u0AB3\u0AB5\u0ABE\u0AB0",
    "\u0AAC\u0AC1\u0AA7\u0AB5\u0ABE\u0AB0",
    "\u0A97\u0AC1\u0AB0\u0AC1\u0AB5\u0ABE\u0AB0",
    "\u0AB6\u0AC1\u0A95\u0ACD\u0AB0\u0AB5\u0ABE\u0AB0",
    "\u0AB6\u0AA8\u0ABF\u0AB5\u0ABE\u0AB0"
    /* Saturday */
  ]
};
var gu_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "\u0AAE.\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
    noon: "\u0AAC.",
    morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
    afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
    night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "\u200B\u0AAE\u0AA7\u0ACD\u0AAF\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
    noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
    afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
    night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "\u200B\u0AAE\u0AA7\u0ACD\u0AAF\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
    noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
    afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
    night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
  }
};
var gu_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "\u0AAE.\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
    noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
    afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
    night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "\u0AAE\u0AA7\u0ACD\u0AAF\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
    noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
    afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
    night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "\u200B\u0AAE\u0AA7\u0ACD\u0AAF\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
    noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
    afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
    evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
    night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
  }
};
var gu_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var gu_lib_localize_localize = {
  ordinalNumber: gu_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: gu_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: gu_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const gu_lib_localize = (gu_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/_lib/match/index.js


var gu_lib_match_matchOrdinalNumberPattern = /^(\d+)(લ|જ|થ|ઠ્ઠ|મ)?/i;
var gu_lib_match_parseOrdinalNumberPattern = /\d+/i;
var gu_lib_match_matchEraPatterns = {
  narrow: /^(ઈસપૂ|ઈસ)/i,
  abbreviated: /^(ઈ\.સ\.પૂર્વે|ઈ\.સ\.)/i,
  wide: /^(ઈસવીસન\sપૂર્વે|ઈસવીસન)/i
};
var gu_lib_match_parseEraPatterns = {
  any: [/^ઈસપૂ/i, /^ઈસ/i]
};
var gu_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](લો|જો|થો)? ત્રિમાસ/i
};
var gu_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var gu_lib_match_matchMonthPatterns = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[જાફેમાએમેજૂજુઓસઓનડિ]/i,
  abbreviated: /^(જાન્યુ|ફેબ્રુ|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઈ|ઑગસ્ટ|સપ્ટે|ઓક્ટો|નવે|ડિસે)/i,
  wide: /^(જાન્યુઆરી|ફેબ્રુઆરી|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઇ|ઓગસ્ટ|સપ્ટેમ્બર|ઓક્ટોબર|નવેમ્બર|ડિસેમ્બર)/i
};
var gu_lib_match_parseMonthPatterns = {
  narrow: [/^જા/i, /^ફે/i, /^મા/i, /^એ/i, /^મે/i, /^જૂ/i, /^જુ/i, /^ઑગ/i, /^સ/i, /^ઓક્ટો/i, /^ન/i, /^ડિ/i],
  any: [/^જા/i, /^ફે/i, /^મા/i, /^એ/i, /^મે/i, /^જૂ/i, /^જુ/i, /^ઑગ/i, /^સ/i, /^ઓક્ટો/i, /^ન/i, /^ડિ/i]
};
var gu_lib_match_matchDayPatterns = {
  narrow: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
  short: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
  abbreviated: /^(રવિ|સોમ|મંગળ|બુધ|ગુરુ|શુક્ર|શનિ)/i,
  wide: /^(રવિવાર|સોમવાર|મંગળવાર|બુધવાર|ગુરુવાર|શુક્રવાર|શનિવાર)/i
};
var gu_lib_match_parseDayPatterns = {
  narrow: [/^ર/i, /^સો/i, /^મં/i, /^બુ/i, /^ગુ/i, /^શુ/i, /^શ/i],
  any: [/^ર/i, /^સો/i, /^મં/i, /^બુ/i, /^ગુ/i, /^શુ/i, /^શ/i]
};
var gu_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|મ\.?|સ|બ|સાં|રા)/i,
  any: /^(a|p|મ\.?|સ|બ|સાં|રા)/i
};
var gu_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^મ\.?/i,
    noon: /^બ/i,
    morning: /સ/i,
    afternoon: /બ/i,
    evening: /સાં/i,
    night: /રા/i
  }
};
var gu_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: gu_lib_match_matchOrdinalNumberPattern,
    parsePattern: gu_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gu_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gu_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gu_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: gu_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: gu_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: gu_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const gu_lib_match = (gu_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/gu/index.js





var gu_locale = {
  code: "gu",
  formatDistance: gu_lib_formatDistance,
  formatLong: gu_lib_formatLong,
  formatRelative: gu_lib_formatRelative,
  localize: gu_lib_localize,
  match: gu_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const gu = (gu_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/formatDistance/index.js
var he_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05E9\u05E0\u05D9\u05D9\u05D4",
    two: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05E9\u05EA\u05D9 \u05E9\u05E0\u05D9\u05D5\u05EA",
    other: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05BE{{count}} \u05E9\u05E0\u05D9\u05D5\u05EA"
  },
  xSeconds: {
    one: "\u05E9\u05E0\u05D9\u05D9\u05D4",
    two: "\u05E9\u05EA\u05D9 \u05E9\u05E0\u05D9\u05D5\u05EA",
    other: "{{count}} \u05E9\u05E0\u05D9\u05D5\u05EA"
  },
  halfAMinute: "\u05D7\u05E6\u05D9 \u05D3\u05E7\u05D4",
  lessThanXMinutes: {
    one: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05D3\u05E7\u05D4",
    two: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05E9\u05EA\u05D9 \u05D3\u05E7\u05D5\u05EA",
    other: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05BE{{count}} \u05D3\u05E7\u05D5\u05EA"
  },
  xMinutes: {
    one: "\u05D3\u05E7\u05D4",
    two: "\u05E9\u05EA\u05D9 \u05D3\u05E7\u05D5\u05EA",
    other: "{{count}} \u05D3\u05E7\u05D5\u05EA"
  },
  aboutXHours: {
    one: "\u05DB\u05E9\u05E2\u05D4",
    two: "\u05DB\u05E9\u05E2\u05EA\u05D9\u05D9\u05DD",
    other: "\u05DB\u05BE{{count}} \u05E9\u05E2\u05D5\u05EA"
  },
  xHours: {
    one: "\u05E9\u05E2\u05D4",
    two: "\u05E9\u05E2\u05EA\u05D9\u05D9\u05DD",
    other: "{{count}} \u05E9\u05E2\u05D5\u05EA"
  },
  xDays: {
    one: "\u05D9\u05D5\u05DD",
    two: "\u05D9\u05D5\u05DE\u05D9\u05D9\u05DD",
    other: "{{count}} \u05D9\u05DE\u05D9\u05DD"
  },
  aboutXWeeks: {
    one: "\u05DB\u05E9\u05D1\u05D5\u05E2",
    two: "\u05DB\u05E9\u05D1\u05D5\u05E2\u05D9\u05D9\u05DD",
    other: "\u05DB\u05BE{{count}} \u05E9\u05D1\u05D5\u05E2\u05D5\u05EA"
  },
  xWeeks: {
    one: "\u05E9\u05D1\u05D5\u05E2",
    two: "\u05E9\u05D1\u05D5\u05E2\u05D9\u05D9\u05DD",
    other: "{{count}} \u05E9\u05D1\u05D5\u05E2\u05D5\u05EA"
  },
  aboutXMonths: {
    one: "\u05DB\u05D7\u05D5\u05D3\u05E9",
    two: "\u05DB\u05D7\u05D5\u05D3\u05E9\u05D9\u05D9\u05DD",
    other: "\u05DB\u05BE{{count}} \u05D7\u05D5\u05D3\u05E9\u05D9\u05DD"
  },
  xMonths: {
    one: "\u05D7\u05D5\u05D3\u05E9",
    two: "\u05D7\u05D5\u05D3\u05E9\u05D9\u05D9\u05DD",
    other: "{{count}} \u05D7\u05D5\u05D3\u05E9\u05D9\u05DD"
  },
  aboutXYears: {
    one: "\u05DB\u05E9\u05E0\u05D4",
    two: "\u05DB\u05E9\u05E0\u05EA\u05D9\u05D9\u05DD",
    other: "\u05DB\u05BE{{count}} \u05E9\u05E0\u05D9\u05DD"
  },
  xYears: {
    one: "\u05E9\u05E0\u05D4",
    two: "\u05E9\u05E0\u05EA\u05D9\u05D9\u05DD",
    other: "{{count}} \u05E9\u05E0\u05D9\u05DD"
  },
  overXYears: {
    one: "\u05D9\u05D5\u05EA\u05E8 \u05DE\u05E9\u05E0\u05D4",
    two: "\u05D9\u05D5\u05EA\u05E8 \u05DE\u05E9\u05E0\u05EA\u05D9\u05D9\u05DD",
    other: "\u05D9\u05D5\u05EA\u05E8 \u05DE\u05BE{{count}} \u05E9\u05E0\u05D9\u05DD"
  },
  almostXYears: {
    one: "\u05DB\u05DE\u05E2\u05D8 \u05E9\u05E0\u05D4",
    two: "\u05DB\u05DE\u05E2\u05D8 \u05E9\u05E0\u05EA\u05D9\u05D9\u05DD",
    other: "\u05DB\u05DE\u05E2\u05D8 {{count}} \u05E9\u05E0\u05D9\u05DD"
  }
};
var he_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  if (token === "xDays" && options !== null && options !== void 0 && options.addSuffix && count <= 2) {
    if (options.comparison && options.comparison > 0) {
      return count === 1 ? "\u05DE\u05D7\u05E8" : "\u05DE\u05D7\u05E8\u05EA\u05D9\u05D9\u05DD";
    }
    return count === 1 ? "\u05D0\u05EA\u05DE\u05D5\u05DC" : "\u05E9\u05DC\u05E9\u05D5\u05DD";
  }
  var result;
  var tokenValue = he_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u05D1\u05E2\u05D5\u05D3 " + result;
    } else {
      return "\u05DC\u05E4\u05E0\u05D9 " + result;
    }
  }
  return result;
};
/* harmony default export */ const he_lib_formatDistance = (he_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/formatLong/index.js

var he_lib_formatLong_dateFormats = {
  full: "EEEE, d \u05D1MMMM y",
  long: "d \u05D1MMMM y",
  medium: "d \u05D1MMM y",
  short: "d.M.y"
};
var he_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var he_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u05D1\u05E9\u05E2\u05D4' {{time}}",
  long: "{{date}} '\u05D1\u05E9\u05E2\u05D4' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var he_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: he_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: he_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: he_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const he_lib_formatLong = (he_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/formatRelative/index.js
var he_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee '\u05E9\u05E2\u05D1\u05E8 \u05D1\u05E9\u05E2\u05D4' p",
  yesterday: "'\u05D0\u05EA\u05DE\u05D5\u05DC \u05D1\u05E9\u05E2\u05D4' p",
  today: "'\u05D4\u05D9\u05D5\u05DD \u05D1\u05E9\u05E2\u05D4' p",
  tomorrow: "'\u05DE\u05D7\u05E8 \u05D1\u05E9\u05E2\u05D4' p",
  nextWeek: "eeee '\u05D1\u05E9\u05E2\u05D4' p",
  other: "P"
};
var he_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return he_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const he_lib_formatRelative = (he_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/localize/index.js

var he_lib_localize_eraValues = {
  narrow: ["\u05DC\u05E4\u05E0\u05D4\u05F4\u05E1", "\u05DC\u05E1\u05E4\u05D9\u05E8\u05D4"],
  abbreviated: ["\u05DC\u05E4\u05E0\u05D4\u05F4\u05E1", "\u05DC\u05E1\u05E4\u05D9\u05E8\u05D4"],
  wide: ["\u05DC\u05E4\u05E0\u05D9 \u05D4\u05E1\u05E4\u05D9\u05E8\u05D4", "\u05DC\u05E1\u05E4\u05D9\u05E8\u05D4"]
};
var he_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["\u05E8\u05D1\u05E2\u05D5\u05DF 1", "\u05E8\u05D1\u05E2\u05D5\u05DF 2", "\u05E8\u05D1\u05E2\u05D5\u05DF 3", "\u05E8\u05D1\u05E2\u05D5\u05DF 4"]
};
var he_lib_localize_monthValues = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
  abbreviated: ["\u05D9\u05E0\u05D5\u05F3", "\u05E4\u05D1\u05E8\u05F3", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8\u05F3", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0\u05D9", "\u05D9\u05D5\u05DC\u05D9", "\u05D0\u05D5\u05D2\u05F3", "\u05E1\u05E4\u05D8\u05F3", "\u05D0\u05D5\u05E7\u05F3", "\u05E0\u05D5\u05D1\u05F3", "\u05D3\u05E6\u05DE\u05F3"],
  wide: ["\u05D9\u05E0\u05D5\u05D0\u05E8", "\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8", "\u05DE\u05E8\u05E5", "\u05D0\u05E4\u05E8\u05D9\u05DC", "\u05DE\u05D0\u05D9", "\u05D9\u05D5\u05E0\u05D9", "\u05D9\u05D5\u05DC\u05D9", "\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8", "\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8", "\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8", "\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8", "\u05D3\u05E6\u05DE\u05D1\u05E8"]
};
var he_lib_localize_dayValues = {
  narrow: ["\u05D0\u05F3", "\u05D1\u05F3", "\u05D2\u05F3", "\u05D3\u05F3", "\u05D4\u05F3", "\u05D5\u05F3", "\u05E9\u05F3"],
  short: ["\u05D0\u05F3", "\u05D1\u05F3", "\u05D2\u05F3", "\u05D3\u05F3", "\u05D4\u05F3", "\u05D5\u05F3", "\u05E9\u05F3"],
  abbreviated: ["\u05D9\u05D5\u05DD \u05D0\u05F3", "\u05D9\u05D5\u05DD \u05D1\u05F3", "\u05D9\u05D5\u05DD \u05D2\u05F3", "\u05D9\u05D5\u05DD \u05D3\u05F3", "\u05D9\u05D5\u05DD \u05D4\u05F3", "\u05D9\u05D5\u05DD \u05D5\u05F3", "\u05E9\u05D1\u05EA"],
  wide: ["\u05D9\u05D5\u05DD \u05E8\u05D0\u05E9\u05D5\u05DF", "\u05D9\u05D5\u05DD \u05E9\u05E0\u05D9", "\u05D9\u05D5\u05DD \u05E9\u05DC\u05D9\u05E9\u05D9", "\u05D9\u05D5\u05DD \u05E8\u05D1\u05D9\u05E2\u05D9", "\u05D9\u05D5\u05DD \u05D7\u05DE\u05D9\u05E9\u05D9", "\u05D9\u05D5\u05DD \u05E9\u05D9\u05E9\u05D9", "\u05D9\u05D5\u05DD \u05E9\u05D1\u05EA"]
};
var he_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
    pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
    midnight: "\u05D7\u05E6\u05D5\u05EA",
    noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    morning: "\u05D1\u05D5\u05E7\u05E8",
    afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    evening: "\u05E2\u05E8\u05D1",
    night: "\u05DC\u05D9\u05DC\u05D4"
  },
  abbreviated: {
    am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
    pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
    midnight: "\u05D7\u05E6\u05D5\u05EA",
    noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    morning: "\u05D1\u05D5\u05E7\u05E8",
    afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    evening: "\u05E2\u05E8\u05D1",
    night: "\u05DC\u05D9\u05DC\u05D4"
  },
  wide: {
    am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
    pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
    midnight: "\u05D7\u05E6\u05D5\u05EA",
    noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    morning: "\u05D1\u05D5\u05E7\u05E8",
    afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    evening: "\u05E2\u05E8\u05D1",
    night: "\u05DC\u05D9\u05DC\u05D4"
  }
};
var he_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
    pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
    midnight: "\u05D7\u05E6\u05D5\u05EA",
    noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    morning: "\u05D1\u05D1\u05D5\u05E7\u05E8",
    afternoon: "\u05D1\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    evening: "\u05D1\u05E2\u05E8\u05D1",
    night: "\u05D1\u05DC\u05D9\u05DC\u05D4"
  },
  abbreviated: {
    am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
    pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
    midnight: "\u05D7\u05E6\u05D5\u05EA",
    noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    morning: "\u05D1\u05D1\u05D5\u05E7\u05E8",
    afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    evening: "\u05D1\u05E2\u05E8\u05D1",
    night: "\u05D1\u05DC\u05D9\u05DC\u05D4"
  },
  wide: {
    am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
    pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
    midnight: "\u05D7\u05E6\u05D5\u05EA",
    noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    morning: "\u05D1\u05D1\u05D5\u05E7\u05E8",
    afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
    evening: "\u05D1\u05E2\u05E8\u05D1",
    night: "\u05D1\u05DC\u05D9\u05DC\u05D4"
  }
};
var he_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  if (number <= 0 || number > 10)
    return String(number);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var isFemale = ["year", "hour", "minute", "second"].indexOf(unit) >= 0;
  var male = ["\u05E8\u05D0\u05E9\u05D5\u05DF", "\u05E9\u05E0\u05D9", "\u05E9\u05DC\u05D9\u05E9\u05D9", "\u05E8\u05D1\u05D9\u05E2\u05D9", "\u05D7\u05DE\u05D9\u05E9\u05D9", "\u05E9\u05D9\u05E9\u05D9", "\u05E9\u05D1\u05D9\u05E2\u05D9", "\u05E9\u05DE\u05D9\u05E0\u05D9", "\u05EA\u05E9\u05D9\u05E2\u05D9", "\u05E2\u05E9\u05D9\u05E8\u05D9"];
  var female = ["\u05E8\u05D0\u05E9\u05D5\u05E0\u05D4", "\u05E9\u05E0\u05D9\u05D9\u05D4", "\u05E9\u05DC\u05D9\u05E9\u05D9\u05EA", "\u05E8\u05D1\u05D9\u05E2\u05D9\u05EA", "\u05D7\u05DE\u05D9\u05E9\u05D9\u05EA", "\u05E9\u05D9\u05E9\u05D9\u05EA", "\u05E9\u05D1\u05D9\u05E2\u05D9\u05EA", "\u05E9\u05DE\u05D9\u05E0\u05D9\u05EA", "\u05EA\u05E9\u05D9\u05E2\u05D9\u05EA", "\u05E2\u05E9\u05D9\u05E8\u05D9\u05EA"];
  var index = number - 1;
  return isFemale ? female[index] : male[index];
};
var he_lib_localize_localize = {
  ordinalNumber: he_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: he_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: he_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const he_lib_localize = (he_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/_lib/match/index.js


var he_lib_match_matchOrdinalNumberPattern = /^(\d+|(ראשון|שני|שלישי|רביעי|חמישי|שישי|שביעי|שמיני|תשיעי|עשירי|ראשונה|שנייה|שלישית|רביעית|חמישית|שישית|שביעית|שמינית|תשיעית|עשירית))/i;
var he_lib_match_parseOrdinalNumberPattern = /^(\d+|רא|שנ|של|רב|ח|שי|שב|שמ|ת|ע)/i;
var he_lib_match_matchEraPatterns = {
  narrow: /^ל(ספירה|פנה״ס)/i,
  abbreviated: /^ל(ספירה|פנה״ס)/i,
  wide: /^ל(פני ה)?ספירה/i
};
var he_lib_match_parseEraPatterns = {
  any: [/^לפ/i, /^לס/i]
};
var he_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^רבעון [1234]/i
};
var he_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var he_lib_match_matchMonthPatterns = {
  narrow: /^\d+/i,
  abbreviated: /^(ינו|פבר|מרץ|אפר|מאי|יוני|יולי|אוג|ספט|אוק|נוב|דצמ)׳?/i,
  wide: /^(ינואר|פברואר|מרץ|אפריל|מאי|יוני|יולי|אוגוסט|ספטמבר|אוקטובר|נובמבר|דצמבר)/i
};
var he_lib_match_parseMonthPatterns = {
  narrow: [/^1$/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ינ/i, /^פ/i, /^מר/i, /^אפ/i, /^מא/i, /^יונ/i, /^יול/i, /^אוג/i, /^ס/i, /^אוק/i, /^נ/i, /^ד/i]
};
var he_lib_match_matchDayPatterns = {
  narrow: /^[אבגדהוש]׳/i,
  short: /^[אבגדהוש]׳/i,
  abbreviated: /^(שבת|יום (א|ב|ג|ד|ה|ו)׳)/i,
  wide: /^יום (ראשון|שני|שלישי|רביעי|חמישי|שישי|שבת)/i
};
var he_lib_match_parseDayPatterns = {
  abbreviated: [/א׳$/i, /ב׳$/i, /ג׳$/i, /ד׳$/i, /ה׳$/i, /ו׳$/i, /^ש/i],
  wide: [/ן$/i, /ני$/i, /לישי$/i, /עי$/i, /מישי$/i, /שישי$/i, /ת$/i],
  any: [/^א/i, /^ב/i, /^ג/i, /^ד/i, /^ה/i, /^ו/i, /^ש/i]
};
var he_lib_match_matchDayPeriodPatterns = {
  any: /^(אחר ה|ב)?(חצות|צהריים|בוקר|ערב|לילה|אחה״צ|לפנה״צ)/i
};
var he_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^לפ/i,
    pm: /^אחה/i,
    midnight: /^ח/i,
    noon: /^צ/i,
    morning: /בוקר/i,
    afternoon: /בצ|אחר/i,
    evening: /ערב/i,
    night: /לילה/i
  }
};
var ordinalName = ["\u05E8\u05D0", "\u05E9\u05E0", "\u05E9\u05DC", "\u05E8\u05D1", "\u05D7", "\u05E9\u05D9", "\u05E9\u05D1", "\u05E9\u05DE", "\u05EA", "\u05E2"];
var he_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: he_lib_match_matchOrdinalNumberPattern,
    parsePattern: he_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      var number = parseInt(value, 10);
      return isNaN(number) ? ordinalName.indexOf(value) + 1 : number;
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: he_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: he_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: he_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: he_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: he_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: he_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const he_lib_match = (he_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/he/index.js





var he_locale = {
  code: "he",
  formatDistance: he_lib_formatDistance,
  formatLong: he_lib_formatLong,
  formatRelative: he_lib_formatRelative,
  localize: he_lib_localize,
  match: he_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const he = (he_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/localize/index.js

var localize_numberValues = {
  locale: {
    "1": "\u0967",
    "2": "\u0968",
    "3": "\u0969",
    "4": "\u096A",
    "5": "\u096B",
    "6": "\u096C",
    "7": "\u096D",
    "8": "\u096E",
    "9": "\u096F",
    "0": "\u0966"
  },
  number: {
    "\u0967": "1",
    "\u0968": "2",
    "\u0969": "3",
    "\u096A": "4",
    "\u096B": "5",
    "\u096C": "6",
    "\u096D": "7",
    "\u096E": "8",
    "\u096F": "9",
    "\u0966": "0"
  }
};
var hi_lib_localize_eraValues = {
  narrow: ["\u0908\u0938\u093E-\u092A\u0942\u0930\u094D\u0935", "\u0908\u0938\u094D\u0935\u0940"],
  abbreviated: ["\u0908\u0938\u093E-\u092A\u0942\u0930\u094D\u0935", "\u0908\u0938\u094D\u0935\u0940"],
  wide: ["\u0908\u0938\u093E-\u092A\u0942\u0930\u094D\u0935", "\u0908\u0938\u0935\u0940 \u0938\u0928"]
};
var hi_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u0924\u093F1", "\u0924\u093F2", "\u0924\u093F3", "\u0924\u093F4"],
  wide: ["\u092A\u0939\u0932\u0940 \u0924\u093F\u092E\u093E\u0939\u0940", "\u0926\u0942\u0938\u0930\u0940 \u0924\u093F\u092E\u093E\u0939\u0940", "\u0924\u0940\u0938\u0930\u0940 \u0924\u093F\u092E\u093E\u0939\u0940", "\u091A\u094C\u0925\u0940 \u0924\u093F\u092E\u093E\u0939\u0940"]
};
var hi_lib_localize_monthValues = {
  narrow: ["\u091C", "\u092B\u093C", "\u092E\u093E", "\u0905", "\u092E\u0908", "\u091C\u0942", "\u091C\u0941", "\u0905\u0917", "\u0938\u093F", "\u0905\u0915\u094D\u091F\u0942", "\u0928", "\u0926\u093F"],
  abbreviated: ["\u091C\u0928", "\u092B\u093C\u0930", "\u092E\u093E\u0930\u094D\u091A", "\u0905\u092A\u094D\u0930\u0948\u0932", "\u092E\u0908", "\u091C\u0942\u0928", "\u091C\u0941\u0932", "\u0905\u0917", "\u0938\u093F\u0924", "\u0905\u0915\u094D\u091F\u0942", "\u0928\u0935", "\u0926\u093F\u0938"],
  wide: ["\u091C\u0928\u0935\u0930\u0940", "\u092B\u093C\u0930\u0935\u0930\u0940", "\u092E\u093E\u0930\u094D\u091A", "\u0905\u092A\u094D\u0930\u0948\u0932", "\u092E\u0908", "\u091C\u0942\u0928", "\u091C\u0941\u0932\u093E\u0908", "\u0905\u0917\u0938\u094D\u0924", "\u0938\u093F\u0924\u0902\u092C\u0930", "\u0905\u0915\u094D\u091F\u0942\u092C\u0930", "\u0928\u0935\u0902\u092C\u0930", "\u0926\u093F\u0938\u0902\u092C\u0930"]
};
var hi_lib_localize_dayValues = {
  narrow: ["\u0930", "\u0938\u094B", "\u092E\u0902", "\u092C\u0941", "\u0917\u0941", "\u0936\u0941", "\u0936"],
  short: ["\u0930", "\u0938\u094B", "\u092E\u0902", "\u092C\u0941", "\u0917\u0941", "\u0936\u0941", "\u0936"],
  abbreviated: ["\u0930\u0935\u093F", "\u0938\u094B\u092E", "\u092E\u0902\u0917\u0932", "\u092C\u0941\u0927", "\u0917\u0941\u0930\u0941", "\u0936\u0941\u0915\u094D\u0930", "\u0936\u0928\u093F"],
  wide: ["\u0930\u0935\u093F\u0935\u093E\u0930", "\u0938\u094B\u092E\u0935\u093E\u0930", "\u092E\u0902\u0917\u0932\u0935\u093E\u0930", "\u092C\u0941\u0927\u0935\u093E\u0930", "\u0917\u0941\u0930\u0941\u0935\u093E\u0930", "\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930", "\u0936\u0928\u093F\u0935\u093E\u0930"]
};
var hi_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
    pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
    midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
    noon: "\u0926\u094B\u092A\u0939\u0930",
    morning: "\u0938\u0941\u092C\u0939",
    afternoon: "\u0926\u094B\u092A\u0939\u0930",
    evening: "\u0936\u093E\u092E",
    night: "\u0930\u093E\u0924"
  },
  abbreviated: {
    am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
    pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
    midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
    noon: "\u0926\u094B\u092A\u0939\u0930",
    morning: "\u0938\u0941\u092C\u0939",
    afternoon: "\u0926\u094B\u092A\u0939\u0930",
    evening: "\u0936\u093E\u092E",
    night: "\u0930\u093E\u0924"
  },
  wide: {
    am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
    pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
    midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
    noon: "\u0926\u094B\u092A\u0939\u0930",
    morning: "\u0938\u0941\u092C\u0939",
    afternoon: "\u0926\u094B\u092A\u0939\u0930",
    evening: "\u0936\u093E\u092E",
    night: "\u0930\u093E\u0924"
  }
};
var hi_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
    pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
    midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
    noon: "\u0926\u094B\u092A\u0939\u0930",
    morning: "\u0938\u0941\u092C\u0939",
    afternoon: "\u0926\u094B\u092A\u0939\u0930",
    evening: "\u0936\u093E\u092E",
    night: "\u0930\u093E\u0924"
  },
  abbreviated: {
    am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
    pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
    midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
    noon: "\u0926\u094B\u092A\u0939\u0930",
    morning: "\u0938\u0941\u092C\u0939",
    afternoon: "\u0926\u094B\u092A\u0939\u0930",
    evening: "\u0936\u093E\u092E",
    night: "\u0930\u093E\u0924"
  },
  wide: {
    am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
    pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
    midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
    noon: "\u0926\u094B\u092A\u0939\u0930",
    morning: "\u0938\u0941\u092C\u0939",
    afternoon: "\u0926\u094B\u092A\u0939\u0930",
    evening: "\u0936\u093E\u092E",
    night: "\u0930\u093E\u0924"
  }
};
var hi_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return localize_numberToLocale(number);
};
function localeToNumber(locale) {
  var enNumber = locale.toString().replace(/[१२३४५६७८९०]/g, function(match) {
    return localize_numberValues.number[match];
  });
  return Number(enNumber);
}
function localize_numberToLocale(enNumber) {
  return enNumber.toString().replace(/\d/g, function(match) {
    return localize_numberValues.locale[match];
  });
}
var hi_lib_localize_localize = {
  ordinalNumber: hi_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: hi_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: hi_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const hi_lib_localize = (hi_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/formatDistance/index.js

var hi_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0967 \u0938\u0947\u0915\u0902\u0921 \u0938\u0947 \u0915\u092E",
    // CLDR #1310
    other: "{{count}} \u0938\u0947\u0915\u0902\u0921 \u0938\u0947 \u0915\u092E"
  },
  xSeconds: {
    one: "\u0967 \u0938\u0947\u0915\u0902\u0921",
    other: "{{count}} \u0938\u0947\u0915\u0902\u0921"
  },
  halfAMinute: "\u0906\u0927\u093E \u092E\u093F\u0928\u091F",
  lessThanXMinutes: {
    one: "\u0967 \u092E\u093F\u0928\u091F \u0938\u0947 \u0915\u092E",
    other: "{{count}} \u092E\u093F\u0928\u091F \u0938\u0947 \u0915\u092E"
  },
  xMinutes: {
    one: "\u0967 \u092E\u093F\u0928\u091F",
    // CLDR #1307
    other: "{{count}} \u092E\u093F\u0928\u091F"
  },
  aboutXHours: {
    one: "\u0932\u0917\u092D\u0917 \u0967 \u0918\u0902\u091F\u093E",
    other: "\u0932\u0917\u092D\u0917 {{count}} \u0918\u0902\u091F\u0947"
  },
  xHours: {
    one: "\u0967 \u0918\u0902\u091F\u093E",
    // CLDR #1304
    other: "{{count}} \u0918\u0902\u091F\u0947"
    // CLDR #4467
  },
  xDays: {
    one: "\u0967 \u0926\u093F\u0928",
    // CLDR #1286
    other: "{{count}} \u0926\u093F\u0928"
  },
  aboutXWeeks: {
    one: "\u0932\u0917\u092D\u0917 \u0967 \u0938\u092A\u094D\u0924\u093E\u0939",
    other: "\u0932\u0917\u092D\u0917 {{count}} \u0938\u092A\u094D\u0924\u093E\u0939"
  },
  xWeeks: {
    one: "\u0967 \u0938\u092A\u094D\u0924\u093E\u0939",
    other: "{{count}} \u0938\u092A\u094D\u0924\u093E\u0939"
  },
  aboutXMonths: {
    one: "\u0932\u0917\u092D\u0917 \u0967 \u092E\u0939\u0940\u0928\u093E",
    other: "\u0932\u0917\u092D\u0917 {{count}} \u092E\u0939\u0940\u0928\u0947"
  },
  xMonths: {
    one: "\u0967 \u092E\u0939\u0940\u0928\u093E",
    other: "{{count}} \u092E\u0939\u0940\u0928\u0947"
  },
  aboutXYears: {
    one: "\u0932\u0917\u092D\u0917 \u0967 \u0935\u0930\u094D\u0937",
    other: "\u0932\u0917\u092D\u0917 {{count}} \u0935\u0930\u094D\u0937"
    // CLDR #4823
  },
  xYears: {
    one: "\u0967 \u0935\u0930\u094D\u0937",
    other: "{{count}} \u0935\u0930\u094D\u0937"
  },
  overXYears: {
    one: "\u0967 \u0935\u0930\u094D\u0937 \u0938\u0947 \u0905\u0927\u093F\u0915",
    other: "{{count}} \u0935\u0930\u094D\u0937 \u0938\u0947 \u0905\u0927\u093F\u0915"
  },
  almostXYears: {
    one: "\u0932\u0917\u092D\u0917 \u0967 \u0935\u0930\u094D\u0937",
    other: "\u0932\u0917\u092D\u0917 {{count}} \u0935\u0930\u094D\u0937"
  }
};
var hi_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = hi_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", localize_numberToLocale(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "\u092E\u0947 ";
    } else {
      return result + " \u092A\u0939\u0932\u0947";
    }
  }
  return result;
};
/* harmony default export */ const hi_lib_formatDistance = (hi_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/formatLong/index.js

var hi_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM, y",
  // CLDR #1787
  long: "do MMMM, y",
  // CLDR #1788
  medium: "d MMM, y",
  // CLDR #1789
  short: "dd/MM/yyyy"
  // CLDR #1790
};
var hi_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  // CLDR #1791
  long: "h:mm:ss a z",
  // CLDR #1792
  medium: "h:mm:ss a",
  // CLDR #1793
  short: "h:mm a"
  // CLDR #1794
};
var hi_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u0915\u094B' {{time}}",
  // CLDR #1795
  long: "{{date}} '\u0915\u094B' {{time}}",
  // CLDR #1796
  medium: "{{date}}, {{time}}",
  // CLDR #1797
  short: "{{date}}, {{time}}"
  // CLDR #1798
};
var hi_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: hi_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: hi_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: hi_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const hi_lib_formatLong = (hi_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/formatRelative/index.js
var hi_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u092A\u093F\u091B\u0932\u0947' eeee p",
  yesterday: "'\u0915\u0932' p",
  today: "'\u0906\u091C' p",
  tomorrow: "'\u0915\u0932' p",
  nextWeek: "eeee '\u0915\u094B' p",
  other: "P"
};
var hi_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return hi_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const hi_lib_formatRelative = (hi_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/_lib/match/index.js



var hi_lib_match_matchOrdinalNumberPattern = /^[०१२३४५६७८९]+/i;
var hi_lib_match_parseOrdinalNumberPattern = /^[०१२३४५६७८९]+/i;
var hi_lib_match_matchEraPatterns = {
  narrow: /^(ईसा-पूर्व|ईस्वी)/i,
  abbreviated: /^(ईसा\.?\s?पूर्व\.?|ईसा\.?)/i,
  wide: /^(ईसा-पूर्व|ईसवी पूर्व|ईसवी सन|ईसवी)/i
};
var hi_lib_match_parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var hi_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ति[1234]/i,
  wide: /^[1234](पहली|दूसरी|तीसरी|चौथी)? तिमाही/i
};
var hi_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var hi_lib_match_matchMonthPatterns = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[जफ़माअप्मईजूनजुअगसिअक्तनदि]/i,
  abbreviated: /^(जन|फ़र|मार्च|अप्|मई|जून|जुल|अग|सित|अक्तू|नव|दिस)/i,
  wide: /^(जनवरी|फ़रवरी|मार्च|अप्रैल|मई|जून|जुलाई|अगस्त|सितंबर|अक्तूबर|नवंबर|दिसंबर)/i
};
var hi_lib_match_parseMonthPatterns = {
  narrow: [/^ज/i, /^फ़/i, /^मा/i, /^अप्/i, /^मई/i, /^जू/i, /^जु/i, /^अग/i, /^सि/i, /^अक्तू/i, /^न/i, /^दि/i],
  any: [/^जन/i, /^फ़/i, /^मा/i, /^अप्/i, /^मई/i, /^जू/i, /^जु/i, /^अग/i, /^सि/i, /^अक्तू/i, /^नव/i, /^दिस/i]
};
var hi_lib_match_matchDayPatterns = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[रविसोममंगलबुधगुरुशुक्रशनि]/i,
  short: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
  abbreviated: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
  wide: /^(रविवार|सोमवार|मंगलवार|बुधवार|गुरुवार|शुक्रवार|शनिवार)/i
};
var hi_lib_match_parseDayPatterns = {
  narrow: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i],
  any: [/^रवि/i, /^सोम/i, /^मंगल/i, /^बुध/i, /^गुरु/i, /^शुक्र/i, /^शनि/i]
};
var hi_lib_match_matchDayPeriodPatterns = {
  narrow: /^(पू|अ|म|द.\?|सु|दो|शा|रा)/i,
  any: /^(पूर्वाह्न|अपराह्न|म|द.\?|सु|दो|शा|रा)/i
};
var hi_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^पूर्वाह्न/i,
    pm: /^अपराह्न/i,
    midnight: /^मध्य/i,
    noon: /^दो/i,
    morning: /सु/i,
    afternoon: /दो/i,
    evening: /शा/i,
    night: /रा/i
  }
};
var hi_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: hi_lib_match_matchOrdinalNumberPattern,
    parsePattern: hi_lib_match_parseOrdinalNumberPattern,
    valueCallback: localeToNumber
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hi_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hi_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hi_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hi_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hi_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: hi_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const hi_lib_match = (hi_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hi/index.js





var hi_locale = {
  code: "hi",
  formatDistance: hi_lib_formatDistance,
  formatLong: hi_lib_formatLong,
  formatRelative: hi_lib_formatRelative,
  localize: hi_lib_localize,
  match: hi_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const hi = (hi_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/formatDistance/index.js
var hr_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      standalone: "manje od 1 sekunde",
      withPrepositionAgo: "manje od 1 sekunde",
      withPrepositionIn: "manje od 1 sekundu"
    },
    dual: "manje od {{count}} sekunde",
    other: "manje od {{count}} sekundi"
  },
  xSeconds: {
    one: {
      standalone: "1 sekunda",
      withPrepositionAgo: "1 sekunde",
      withPrepositionIn: "1 sekundu"
    },
    dual: "{{count}} sekunde",
    other: "{{count}} sekundi"
  },
  halfAMinute: "pola minute",
  lessThanXMinutes: {
    one: {
      standalone: "manje od 1 minute",
      withPrepositionAgo: "manje od 1 minute",
      withPrepositionIn: "manje od 1 minutu"
    },
    dual: "manje od {{count}} minute",
    other: "manje od {{count}} minuta"
  },
  xMinutes: {
    one: {
      standalone: "1 minuta",
      withPrepositionAgo: "1 minute",
      withPrepositionIn: "1 minutu"
    },
    dual: "{{count}} minute",
    other: "{{count}} minuta"
  },
  aboutXHours: {
    one: {
      standalone: "oko 1 sat",
      withPrepositionAgo: "oko 1 sat",
      withPrepositionIn: "oko 1 sat"
    },
    dual: "oko {{count}} sata",
    other: "oko {{count}} sati"
  },
  xHours: {
    one: {
      standalone: "1 sat",
      withPrepositionAgo: "1 sat",
      withPrepositionIn: "1 sat"
    },
    dual: "{{count}} sata",
    other: "{{count}} sati"
  },
  xDays: {
    one: {
      standalone: "1 dan",
      withPrepositionAgo: "1 dan",
      withPrepositionIn: "1 dan"
    },
    dual: "{{count}} dana",
    other: "{{count}} dana"
  },
  aboutXWeeks: {
    one: {
      standalone: "oko 1 tjedan",
      withPrepositionAgo: "oko 1 tjedan",
      withPrepositionIn: "oko 1 tjedan"
    },
    dual: "oko {{count}} tjedna",
    other: "oko {{count}} tjedana"
  },
  xWeeks: {
    one: {
      standalone: "1 tjedan",
      withPrepositionAgo: "1 tjedan",
      withPrepositionIn: "1 tjedan"
    },
    dual: "{{count}} tjedna",
    other: "{{count}} tjedana"
  },
  aboutXMonths: {
    one: {
      standalone: "oko 1 mjesec",
      withPrepositionAgo: "oko 1 mjesec",
      withPrepositionIn: "oko 1 mjesec"
    },
    dual: "oko {{count}} mjeseca",
    other: "oko {{count}} mjeseci"
  },
  xMonths: {
    one: {
      standalone: "1 mjesec",
      withPrepositionAgo: "1 mjesec",
      withPrepositionIn: "1 mjesec"
    },
    dual: "{{count}} mjeseca",
    other: "{{count}} mjeseci"
  },
  aboutXYears: {
    one: {
      standalone: "oko 1 godinu",
      withPrepositionAgo: "oko 1 godinu",
      withPrepositionIn: "oko 1 godinu"
    },
    dual: "oko {{count}} godine",
    other: "oko {{count}} godina"
  },
  xYears: {
    one: {
      standalone: "1 godina",
      withPrepositionAgo: "1 godine",
      withPrepositionIn: "1 godinu"
    },
    dual: "{{count}} godine",
    other: "{{count}} godina"
  },
  overXYears: {
    one: {
      standalone: "preko 1 godinu",
      withPrepositionAgo: "preko 1 godinu",
      withPrepositionIn: "preko 1 godinu"
    },
    dual: "preko {{count}} godine",
    other: "preko {{count}} godina"
  },
  almostXYears: {
    one: {
      standalone: "gotovo 1 godinu",
      withPrepositionAgo: "gotovo 1 godinu",
      withPrepositionIn: "gotovo 1 godinu"
    },
    dual: "gotovo {{count}} godine",
    other: "gotovo {{count}} godina"
  }
};
var hr_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = hr_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== "1") {
    result = tokenValue.dual.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "za " + result;
    } else {
      return "prije " + result;
    }
  }
  return result;
};
/* harmony default export */ const hr_lib_formatDistance = (hr_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/formatLong/index.js

var hr_lib_formatLong_dateFormats = {
  full: "EEEE, d. MMMM y.",
  long: "d. MMMM y.",
  medium: "d. MMM y.",
  short: "dd. MM. y."
};
var hr_lib_formatLong_timeFormats = {
  full: "HH:mm:ss (zzzz)",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var hr_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var hr_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: hr_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: hr_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: hr_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const hr_lib_formatLong = (hr_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/formatRelative/index.js
var hr_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'pro\u0161lu nedjelju u' p";
      case 3:
        return "'pro\u0161lu srijedu u' p";
      case 6:
        return "'pro\u0161lu subotu u' p";
      default:
        return "'pro\u0161li' EEEE 'u' p";
    }
  },
  yesterday: "'ju\u010Der u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: function nextWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'idu\u0107u nedjelju u' p";
      case 3:
        return "'idu\u0107u srijedu u' p";
      case 6:
        return "'idu\u0107u subotu u' p";
      default:
        return "'pro\u0161li' EEEE 'u' p";
    }
  },
  other: "P"
};
var hr_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  var format = hr_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const hr_lib_formatRelative = (hr_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/localize/index.js

var hr_lib_localize_eraValues = {
  narrow: ["pr.n.e.", "AD"],
  abbreviated: ["pr. Kr.", "po. Kr."],
  wide: ["Prije Krista", "Poslije Krista"]
};
var hr_lib_localize_quarterValues = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
};
var hr_lib_localize_monthValues = {
  narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
  abbreviated: ["sij", "velj", "o\u017Eu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro"],
  wide: ["sije\u010Danj", "velja\u010Da", "o\u017Eujak", "travanj", "svibanj", "lipanj", "srpanj", "kolovoz", "rujan", "listopad", "studeni", "prosinac"]
};
var hr_lib_localize_formattingMonthValues = {
  narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
  abbreviated: ["sij", "velj", "o\u017Eu", "tra", "svi", "lip", "srp", "kol", "ruj", "lis", "stu", "pro"],
  wide: ["sije\u010Dnja", "velja\u010De", "o\u017Eujka", "travnja", "svibnja", "lipnja", "srpnja", "kolovoza", "rujna", "listopada", "studenog", "prosinca"]
};
var hr_lib_localize_dayValues = {
  narrow: ["N", "P", "U", "S", "\u010C", "P", "S"],
  short: ["ned", "pon", "uto", "sri", "\u010Det", "pet", "sub"],
  abbreviated: ["ned", "pon", "uto", "sri", "\u010Det", "pet", "sub"],
  wide: ["nedjelja", "ponedjeljak", "utorak", "srijeda", "\u010Detvrtak", "petak", "subota"]
};
var hr_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutro",
    afternoon: "popodne",
    evening: "nave\u010Der",
    night: "no\u0107u"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutro",
    afternoon: "popodne",
    evening: "nave\u010Der",
    night: "no\u0107u"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutro",
    afternoon: "poslije podne",
    evening: "nave\u010Der",
    night: "no\u0107u"
  }
};
var hr_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutro",
    afternoon: "popodne",
    evening: "nave\u010Der",
    night: "no\u0107u"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutro",
    afternoon: "popodne",
    evening: "nave\u010Der",
    night: "no\u0107u"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutro",
    afternoon: "poslije podne",
    evening: "nave\u010Der",
    night: "no\u0107u"
  }
};
var hr_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var hr_lib_localize_localize = {
  ordinalNumber: hr_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: hr_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: hr_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: hr_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const hr_lib_localize = (hr_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/_lib/match/index.js


var hr_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var hr_lib_match_parseOrdinalNumberPattern = /\d+/i;
var hr_lib_match_matchEraPatterns = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Kr\.|po\.\s?Kr\.)/i,
  wide: /^(Prije Krista|prije nove ere|Poslije Krista|nova era)/i
};
var hr_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|nova)/i]
};
var hr_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i
};
var hr_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var hr_lib_match_matchMonthPatterns = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(sij|velj|(ožu|ozu)|tra|svi|lip|srp|kol|ruj|lis|stu|pro)/i,
  wide: /^((siječanj|siječnja|sijecanj|sijecnja)|(veljača|veljače|veljaca|veljace)|(ožujak|ožujka|ozujak|ozujka)|(travanj|travnja)|(svibanj|svibnja)|(lipanj|lipnja)|(srpanj|srpnja)|(kolovoz|kolovoza)|(rujan|rujna)|(listopad|listopada)|(studeni|studenog)|(prosinac|prosinca))/i
};
var hr_lib_match_parseMonthPatterns = {
  narrow: [/1/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i, /8/i, /9/i, /10/i, /11/i, /12/i],
  abbreviated: [/^sij/i, /^velj/i, /^(ožu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i],
  wide: [/^sij/i, /^velj/i, /^(ožu|ozu)/i, /^tra/i, /^svi/i, /^lip/i, /^srp/i, /^kol/i, /^ruj/i, /^lis/i, /^stu/i, /^pro/i]
};
var hr_lib_match_matchDayPatterns = {
  narrow: /^[npusčc]/i,
  short: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
  wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i
};
var hr_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var hr_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|ponoc|ponoć|(po)?podne|navecer|navečer|noću|poslije podne|ujutro)/i
};
var hr_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(poslije\s|po)+podne/i,
    evening: /(navece|naveče)/i,
    night: /(nocu|noću)/i
  }
};
var hr_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: hr_lib_match_matchOrdinalNumberPattern,
    parsePattern: hr_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hr_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hr_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hr_lib_match_parseMonthPatterns,
    defaultParseWidth: "wide"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hr_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hr_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: hr_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const hr_lib_match = (hr_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hr/index.js





var hr_locale = {
  code: "hr",
  formatDistance: hr_lib_formatDistance,
  formatLong: hr_lib_formatLong,
  formatRelative: hr_lib_formatRelative,
  localize: hr_lib_localize,
  match: hr_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const hr = (hr_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/formatDistance/index.js
var ht_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "mwens pase yon segond",
    other: "mwens pase {{count}} segond"
  },
  xSeconds: {
    one: "1 segond",
    other: "{{count}} segond"
  },
  halfAMinute: "30 segond",
  lessThanXMinutes: {
    one: "mwens pase yon minit",
    other: "mwens pase {{count}} minit"
  },
  xMinutes: {
    one: "1 minit",
    other: "{{count}} minit"
  },
  aboutXHours: {
    one: "anviwon in\xE8",
    other: "anviwon {{count}} \xE8"
  },
  xHours: {
    one: "1 l\xE8",
    other: "{{count}} l\xE8"
  },
  xDays: {
    one: "1 jou",
    other: "{{count}} jou"
  },
  aboutXWeeks: {
    one: "anviwon 1 sem\xE8n",
    other: "anviwon {{count}} sem\xE8n"
  },
  xWeeks: {
    one: "1 sem\xE8n",
    other: "{{count}} sem\xE8n"
  },
  aboutXMonths: {
    one: "anviwon 1 mwa",
    other: "anviwon {{count}} mwa"
  },
  xMonths: {
    one: "1 mwa",
    other: "{{count}} mwa"
  },
  aboutXYears: {
    one: "anviwon 1 an",
    other: "anviwon {{count}} an"
  },
  xYears: {
    one: "1 an",
    other: "{{count}} an"
  },
  overXYears: {
    one: "plis pase 1 an",
    other: "plis pase {{count}} an"
  },
  almostXYears: {
    one: "pr\xE8ske 1 an",
    other: "pr\xE8ske {{count}} an"
  }
};
var ht_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = ht_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "nan " + result;
    } else {
      return "sa f\xE8 " + result;
    }
  }
  return result;
};
/* harmony default export */ const ht_lib_formatDistance = (ht_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/formatLong/index.js

var ht_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y"
};
var ht_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var ht_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'nan l\xE8' {{time}}",
  long: "{{date}} 'nan l\xE8' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ht_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ht_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ht_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ht_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ht_lib_formatLong = (ht_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/formatRelative/index.js
var ht_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'pase nan l\xE8' p",
  yesterday: "'y\xE8 nan l\xE8' p",
  today: "'jodi a' p",
  tomorrow: "'demen nan l\xE8' p'",
  nextWeek: "eeee 'pwochen nan l\xE8' p",
  other: "P"
};
var ht_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ht_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ht_lib_formatRelative = (ht_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/localize/index.js

var ht_lib_localize_eraValues = {
  narrow: ["av. J.-K", "ap. J.-K"],
  abbreviated: ["av. J.-K", "ap. J.-K"],
  wide: ["anvan Jezi Kris", "apre Jezi Kris"]
};
var ht_lib_localize_quarterValues = {
  narrow: ["T1", "T2", "T3", "T4"],
  abbreviated: ["1ye trim.", "2y\xE8m trim.", "3y\xE8m trim.", "4y\xE8m trim."],
  wide: ["1ye trim\xE8s", "2y\xE8m trim\xE8s", "3y\xE8m trim\xE8s", "4y\xE8m trim\xE8s"]
};
var ht_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "O", "S", "O", "N", "D"],
  abbreviated: ["janv.", "fevr.", "mas", "avr.", "me", "jen", "jiy\xE8", "out", "sept.", "okt.", "nov.", "des."],
  wide: ["janvye", "fevrye", "mas", "avril", "me", "jen", "jiy\xE8", "out", "septanm", "okt\xF2b", "novanm", "desanm"]
};
var ht_lib_localize_dayValues = {
  narrow: ["D", "L", "M", "M", "J", "V", "S"],
  short: ["di", "le", "ma", "m\xE8", "je", "va", "sa"],
  abbreviated: ["dim.", "len.", "mad.", "m\xE8k.", "jed.", "van.", "sam."],
  wide: ["dimanch", "lendi", "madi", "m\xE8kredi", "jedi", "vandredi", "samdi"]
};
var ht_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "minwit",
    noon: "midi",
    morning: "mat.",
    afternoon: "ap.m.",
    evening: "swa",
    night: "mat."
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "minwit",
    noon: "midi",
    morning: "maten",
    afternoon: "apr\xE8midi",
    evening: "swa",
    night: "maten"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "minwit",
    noon: "midi",
    morning: "nan maten",
    afternoon: "nan apr\xE8midi",
    evening: "nan asw\xE8",
    night: "nan maten"
  }
};
var ht_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  if (number === 0)
    return String(number);
  var suffix = number === 1 ? "ye" : "y\xE8m";
  return number + suffix;
};
var ht_lib_localize_localize = {
  ordinalNumber: ht_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ht_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const ht_lib_localize = (ht_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/_lib/match/index.js


var ht_lib_match_matchOrdinalNumberPattern = /^(\d+)(ye|yèm)?/i;
var ht_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ht_lib_match_matchEraPatterns = {
  narrow: /^(av\.J\.K|ap\.J\.K|ap\.J\.-K)/i,
  abbreviated: /^(av\.J\.-K|av\.J-K|apr\.J\.-K|apr\.J-K|ap\.J-K)/i,
  wide: /^(avan Jezi Kris|apre Jezi Kris)/i
};
var ht_lib_match_parseEraPatterns = {
  any: [/^av/i, /^ap/i]
};
var ht_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](ye|yèm)? trimès/i
};
var ht_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ht_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv|fevr|mas|avr|me|jen|jiyè|out|sept|okt|nov|des)\.?/i,
  wide: /^(janvye|fevrye|mas|avril|me|jen|jiyè|out|septanm|oktòb|novanm|desanm)/i
};
var ht_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^o/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^av/i, /^me/i, /^je/i, /^ji/i, /^ou/i, /^s/i, /^ok/i, /^n/i, /^d/i]
};
var ht_lib_match_matchDayPatterns = {
  narrow: /^[lmjvsd]/i,
  short: /^(di|le|ma|me|je|va|sa)/i,
  abbreviated: /^(dim|len|mad|mèk|jed|van|sam)\.?/i,
  wide: /^(dimanch|lendi|madi|mèkredi|jedi|vandredi|samdi)/i
};
var ht_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^di/i, /^le/i, /^ma/i, /^mè/i, /^je/i, /^va/i, /^sa/i]
};
var ht_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|minwit|midi|mat\.?|ap\.?m\.?|swa)/i,
  any: /^([ap]\.?\s?m\.?|nan maten|nan aprèmidi|nan aswè)/i
};
var ht_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^min/i,
    noon: /^mid/i,
    morning: /mat/i,
    afternoon: /ap/i,
    evening: /sw/i,
    night: /nwit/i
  }
};
var ht_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ht_lib_match_matchOrdinalNumberPattern,
    parsePattern: ht_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ht_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ht_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ht_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ht_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ht_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ht_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ht_lib_match = (ht_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ht/index.js





var ht_locale = {
  code: "ht",
  formatDistance: ht_lib_formatDistance,
  formatLong: ht_lib_formatLong,
  formatRelative: ht_lib_formatRelative,
  localize: ht_lib_localize,
  match: ht_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const ht = (ht_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/formatDistance/index.js
var translations = {
  about: "k\xF6r\xFClbel\xFCl",
  over: "t\xF6bb mint",
  almost: "majdnem",
  lessthan: "kevesebb mint"
};
var withoutSuffixes = {
  xseconds: " m\xE1sodperc",
  halfaminute: "f\xE9l perc",
  xminutes: " perc",
  xhours: " \xF3ra",
  xdays: " nap",
  xweeks: " h\xE9t",
  xmonths: " h\xF3nap",
  xyears: " \xE9v"
};
var withSuffixes = {
  xseconds: {
    "-1": " m\xE1sodperccel ezel\u0151tt",
    "1": " m\xE1sodperc m\xFAlva",
    "0": " m\xE1sodperce"
  },
  halfaminute: {
    "-1": "f\xE9l perccel ezel\u0151tt",
    "1": "f\xE9l perc m\xFAlva",
    "0": "f\xE9l perce"
  },
  xminutes: {
    "-1": " perccel ezel\u0151tt",
    "1": " perc m\xFAlva",
    "0": " perce"
  },
  xhours: {
    "-1": " \xF3r\xE1val ezel\u0151tt",
    "1": " \xF3ra m\xFAlva",
    "0": " \xF3r\xE1ja"
  },
  xdays: {
    "-1": " nappal ezel\u0151tt",
    "1": " nap m\xFAlva",
    "0": " napja"
  },
  xweeks: {
    "-1": " h\xE9ttel ezel\u0151tt",
    "1": " h\xE9t m\xFAlva",
    "0": " hete"
  },
  xmonths: {
    "-1": " h\xF3nappal ezel\u0151tt",
    "1": " h\xF3nap m\xFAlva",
    "0": " h\xF3napja"
  },
  xyears: {
    "-1": " \xE9vvel ezel\u0151tt",
    "1": " \xE9v m\xFAlva",
    "0": " \xE9ve"
  }
};
var hu_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = adverb ? token.replace(adverb[0], "") : token;
  var addSuffix = (options === null || options === void 0 ? void 0 : options.addSuffix) === true;
  var key = unit.toLowerCase();
  var comparison = (options === null || options === void 0 ? void 0 : options.comparison) || 0;
  var translated = addSuffix ? withSuffixes[key][comparison] : withoutSuffixes[key];
  var result = key === "halfaminute" ? translated : count + translated;
  if (adverb) {
    var adv = adverb[0].toLowerCase();
    result = translations[adv] + " " + result;
  }
  return result;
};
/* harmony default export */ const hu_lib_formatDistance = (hu_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/formatLong/index.js

var hu_lib_formatLong_dateFormats = {
  full: "y. MMMM d., EEEE",
  long: "y. MMMM d.",
  medium: "y. MMM d.",
  short: "y. MM. dd."
};
var hu_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var hu_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var hu_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: hu_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: hu_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: hu_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const hu_lib_formatLong = (hu_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/formatRelative/index.js
var hu_lib_formatRelative_accusativeWeekdays = ["vas\xE1rnap", "h\xE9tf\u0151n", "kedden", "szerd\xE1n", "cs\xFCt\xF6rt\xF6k\xF6n", "p\xE9nteken", "szombaton"];
function week(isFuture) {
  return function(date) {
    var weekday = hu_lib_formatRelative_accusativeWeekdays[date.getUTCDay()];
    var prefix = isFuture ? "" : "'m\xFAlt' ";
    return "".concat(prefix, "'").concat(weekday, "' p'-kor'");
  };
}
var hu_lib_formatRelative_formatRelativeLocale = {
  lastWeek: week(false),
  yesterday: "'tegnap' p'-kor'",
  today: "'ma' p'-kor'",
  tomorrow: "'holnap' p'-kor'",
  nextWeek: week(true),
  other: "P"
};
var hu_lib_formatRelative_formatRelative = function formatRelative2(token, date) {
  var format = hu_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const hu_lib_formatRelative = (hu_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/localize/index.js

var hu_lib_localize_eraValues = {
  narrow: ["ie.", "isz."],
  abbreviated: ["i. e.", "i. sz."],
  wide: ["Krisztus el\u0151tt", "id\u0151sz\xE1m\xEDt\xE1sunk szerint"]
};
var hu_lib_localize_quarterValues = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. n.\xE9v", "2. n.\xE9v", "3. n.\xE9v", "4. n.\xE9v"],
  wide: ["1. negyed\xE9v", "2. negyed\xE9v", "3. negyed\xE9v", "4. negyed\xE9v"]
};
var formattingQuarterValues = {
  narrow: ["I.", "II.", "III.", "IV."],
  abbreviated: ["I. n.\xE9v", "II. n.\xE9v", "III. n.\xE9v", "IV. n.\xE9v"],
  wide: ["I. negyed\xE9v", "II. negyed\xE9v", "III. negyed\xE9v", "IV. negyed\xE9v"]
};
var hu_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "\xC1", "M", "J", "J", "A", "Sz", "O", "N", "D"],
  abbreviated: ["jan.", "febr.", "m\xE1rc.", "\xE1pr.", "m\xE1j.", "j\xFAn.", "j\xFAl.", "aug.", "szept.", "okt.", "nov.", "dec."],
  wide: ["janu\xE1r", "febru\xE1r", "m\xE1rcius", "\xE1prilis", "m\xE1jus", "j\xFAnius", "j\xFAlius", "augusztus", "szeptember", "okt\xF3ber", "november", "december"]
};
var hu_lib_localize_dayValues = {
  narrow: ["V", "H", "K", "Sz", "Cs", "P", "Sz"],
  short: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
  abbreviated: ["V", "H", "K", "Sze", "Cs", "P", "Szo"],
  wide: ["vas\xE1rnap", "h\xE9tf\u0151", "kedd", "szerda", "cs\xFCt\xF6rt\xF6k", "p\xE9ntek", "szombat"]
};
var hu_lib_localize_dayPeriodValues = {
  narrow: {
    am: "de.",
    pm: "du.",
    midnight: "\xE9jf\xE9l",
    noon: "d\xE9l",
    morning: "reggel",
    afternoon: "du.",
    evening: "este",
    night: "\xE9jjel"
  },
  abbreviated: {
    am: "de.",
    pm: "du.",
    midnight: "\xE9jf\xE9l",
    noon: "d\xE9l",
    morning: "reggel",
    afternoon: "du.",
    evening: "este",
    night: "\xE9jjel"
  },
  wide: {
    am: "de.",
    pm: "du.",
    midnight: "\xE9jf\xE9l",
    noon: "d\xE9l",
    morning: "reggel",
    afternoon: "d\xE9lut\xE1n",
    evening: "este",
    night: "\xE9jjel"
  }
};
var hu_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var hu_lib_localize_localize = {
  ordinalNumber: hu_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    },
    formattingValues: formattingQuarterValues,
    defaultFormattingWidth: "wide"
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: hu_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const hu_lib_localize = (hu_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/_lib/match/index.js


var hu_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var hu_lib_match_parseOrdinalNumberPattern = /\d+/i;
var hu_lib_match_matchEraPatterns = {
  narrow: /^(ie\.|isz\.)/i,
  abbreviated: /^(i\.\s?e\.?|b?\s?c\s?e|i\.\s?sz\.?)/i,
  wide: /^(Krisztus előtt|időszámításunk előtt|időszámításunk szerint|i\. sz\.)/i
};
var hu_lib_match_parseEraPatterns = {
  narrow: [/ie/i, /isz/i],
  abbreviated: [/^(i\.?\s?e\.?|b\s?ce)/i, /^(i\.?\s?sz\.?|c\s?e)/i],
  any: [/előtt/i, /(szerint|i. sz.)/i]
};
var hu_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]\.?/i,
  abbreviated: /^[1234]?\.?\s?n\.év/i,
  wide: /^([1234]|I|II|III|IV)?\.?\s?negyedév/i
};
var hu_lib_match_parseQuarterPatterns = {
  any: [/1|I$/i, /2|II$/i, /3|III/i, /4|IV/i]
};
var hu_lib_match_matchMonthPatterns = {
  narrow: /^[jfmaásond]|sz/i,
  abbreviated: /^(jan\.?|febr\.?|márc\.?|ápr\.?|máj\.?|jún\.?|júl\.?|aug\.?|szept\.?|okt\.?|nov\.?|dec\.?)/i,
  wide: /^(január|február|március|április|május|június|július|augusztus|szeptember|október|november|december)/i
};
var hu_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a|á/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s|sz/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^már/i, /^áp/i, /^máj/i, /^jún/i, /^júl/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var hu_lib_match_matchDayPatterns = {
  narrow: /^([vhkpc]|sz|cs|sz)/i,
  short: /^([vhkp]|sze|cs|szo)/i,
  abbreviated: /^([vhkp]|sze|cs|szo)/i,
  wide: /^(vasárnap|hétfő|kedd|szerda|csütörtök|péntek|szombat)/i
};
var hu_lib_match_parseDayPatterns = {
  narrow: [/^v/i, /^h/i, /^k/i, /^sz/i, /^c/i, /^p/i, /^sz/i],
  any: [/^v/i, /^h/i, /^k/i, /^sze/i, /^c/i, /^p/i, /^szo/i]
};
var hu_lib_match_matchDayPeriodPatterns = {
  any: /^((de|du)\.?|éjfél|délután|dél|reggel|este|éjjel)/i
};
var hu_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^de\.?/i,
    pm: /^du\.?/i,
    midnight: /^éjf/i,
    noon: /^dé/i,
    morning: /reg/i,
    afternoon: /^délu\.?/i,
    evening: /es/i,
    night: /éjj/i
  }
};
var hu_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: hu_lib_match_matchOrdinalNumberPattern,
    parsePattern: hu_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hu_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hu_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hu_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hu_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hu_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: hu_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const hu_lib_match = (hu_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hu/index.js





var hu_locale = {
  code: "hu",
  formatDistance: hu_lib_formatDistance,
  formatLong: hu_lib_formatLong,
  formatRelative: hu_lib_formatRelative,
  localize: hu_lib_localize,
  match: hu_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const hu = (hu_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/formatDistance/index.js
var hy_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0561\u057E\u0565\u056C\u056B \u0584\u056B\u0579 \u0584\u0561\u0576 1 \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576",
    other: "\u0561\u057E\u0565\u056C\u056B \u0584\u056B\u0579 \u0584\u0561\u0576 {{count}} \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576"
  },
  xSeconds: {
    one: "1 \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576",
    other: "{{count}} \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576"
  },
  halfAMinute: "\u056F\u0565\u057D \u0580\u0578\u057A\u0565",
  lessThanXMinutes: {
    one: "\u0561\u057E\u0565\u056C\u056B \u0584\u056B\u0579 \u0584\u0561\u0576 1 \u0580\u0578\u057A\u0565",
    other: "\u0561\u057E\u0565\u056C\u056B \u0584\u056B\u0579 \u0584\u0561\u0576 {{count}} \u0580\u0578\u057A\u0565"
  },
  xMinutes: {
    one: "1 \u0580\u0578\u057A\u0565",
    other: "{{count}} \u0580\u0578\u057A\u0565"
  },
  aboutXHours: {
    one: "\u0574\u0578\u057F 1 \u056A\u0561\u0574",
    other: "\u0574\u0578\u057F {{count}} \u056A\u0561\u0574"
  },
  xHours: {
    one: "1 \u056A\u0561\u0574",
    other: "{{count}} \u056A\u0561\u0574"
  },
  xDays: {
    one: "1 \u0585\u0580",
    other: "{{count}} \u0585\u0580"
  },
  aboutXWeeks: {
    one: "\u0574\u0578\u057F 1 \u0577\u0561\u0562\u0561\u0569",
    other: "\u0574\u0578\u057F {{count}} \u0577\u0561\u0562\u0561\u0569"
  },
  xWeeks: {
    one: "1 \u0577\u0561\u0562\u0561\u0569",
    other: "{{count}} \u0577\u0561\u0562\u0561\u0569"
  },
  aboutXMonths: {
    one: "\u0574\u0578\u057F 1 \u0561\u0574\u056B\u057D",
    other: "\u0574\u0578\u057F {{count}} \u0561\u0574\u056B\u057D"
  },
  xMonths: {
    one: "1 \u0561\u0574\u056B\u057D",
    other: "{{count}} \u0561\u0574\u056B\u057D"
  },
  aboutXYears: {
    one: "\u0574\u0578\u057F 1 \u057F\u0561\u0580\u056B",
    other: "\u0574\u0578\u057F {{count}} \u057F\u0561\u0580\u056B"
  },
  xYears: {
    one: "1 \u057F\u0561\u0580\u056B",
    other: "{{count}} \u057F\u0561\u0580\u056B"
  },
  overXYears: {
    one: "\u0561\u057E\u0565\u056C\u056B \u0584\u0561\u0576 1 \u057F\u0561\u0580\u056B",
    other: "\u0561\u057E\u0565\u056C\u056B \u0584\u0561\u0576 {{count}} \u057F\u0561\u0580\u056B"
  },
  almostXYears: {
    one: "\u0570\u0561\u0574\u0561\u0580\u0575\u0561 1 \u057F\u0561\u0580\u056B",
    other: "\u0570\u0561\u0574\u0561\u0580\u0575\u0561 {{count}} \u057F\u0561\u0580\u056B"
  }
};
var hy_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = hy_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " \u0570\u0565\u057F\u0578";
    } else {
      return result + " \u0561\u057C\u0561\u057B";
    }
  }
  return result;
};
/* harmony default export */ const hy_lib_formatDistance = (hy_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/formatLong/index.js

var hy_lib_formatLong_dateFormats = {
  full: "d MMMM, y, EEEE",
  long: "d MMMM, y",
  medium: "d MMM, y",
  short: "dd.MM.yyyy"
};
var hy_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var hy_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u056A\u2024'{{time}}",
  long: "{{date}} '\u056A\u2024'{{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var hy_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: hy_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: hy_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: hy_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const hy_lib_formatLong = (hy_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/formatRelative/index.js
var hy_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0576\u0561\u056D\u0578\u0580\u0564' eeee p'\u058A\u056B\u0576'",
  yesterday: "'\u0565\u0580\u0565\u056F' p'\u058A\u056B\u0576'",
  today: "'\u0561\u0575\u057D\u0585\u0580' p'\u058A\u056B\u0576'",
  tomorrow: "'\u057E\u0561\u0572\u0568' p'\u058A\u056B\u0576'",
  nextWeek: "'\u0570\u0561\u057B\u0578\u0580\u0564' eeee p'\u058A\u056B\u0576'",
  other: "P"
};
var hy_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return hy_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const hy_lib_formatRelative = (hy_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/localize/index.js

var hy_lib_localize_eraValues = {
  narrow: ["\u0554", "\u0544"],
  abbreviated: ["\u0554\u0531", "\u0544\u0539"],
  wide: ["\u0554\u0580\u056B\u057D\u057F\u0578\u057D\u056B\u0581 \u0561\u057C\u0561\u057B", "\u0544\u0565\u0580 \u0569\u057E\u0561\u0580\u056F\u0578\u0582\u0569\u0575\u0561\u0576"]
};
var hy_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u05541", "\u05542", "\u05543", "\u05544"],
  wide: ["1\u058A\u056B\u0576 \u0584\u0561\u057C\u0578\u0580\u0564", "2\u058A\u0580\u0564 \u0584\u0561\u057C\u0578\u0580\u0564", "3\u058A\u0580\u0564 \u0584\u0561\u057C\u0578\u0580\u0564", "4\u058A\u0580\u0564 \u0584\u0561\u057C\u0578\u0580\u0564"]
};
var hy_lib_localize_monthValues = {
  narrow: ["\u0540", "\u0553", "\u0544", "\u0531", "\u0544", "\u0540", "\u0540", "\u0555", "\u054D", "\u0540", "\u0546", "\u0534"],
  abbreviated: ["\u0570\u0578\u0582\u0576", "\u0583\u0565\u057F", "\u0574\u0561\u0580", "\u0561\u057A\u0580", "\u0574\u0561\u0575", "\u0570\u0578\u0582\u0576", "\u0570\u0578\u0582\u056C", "\u0585\u0563\u057D", "\u057D\u0565\u057A", "\u0570\u0578\u056F", "\u0576\u0578\u0575", "\u0564\u0565\u056F"],
  wide: ["\u0570\u0578\u0582\u0576\u057E\u0561\u0580", "\u0583\u0565\u057F\u0580\u057E\u0561\u0580", "\u0574\u0561\u0580\u057F", "\u0561\u057A\u0580\u056B\u056C", "\u0574\u0561\u0575\u056B\u057D", "\u0570\u0578\u0582\u0576\u056B\u057D", "\u0570\u0578\u0582\u056C\u056B\u057D", "\u0585\u0563\u0578\u057D\u057F\u0578\u057D", "\u057D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580", "\u0570\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580", "\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580", "\u0564\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580"]
};
var hy_lib_localize_dayValues = {
  narrow: ["\u053F", "\u0535", "\u0535", "\u0549", "\u0540", "\u0548", "\u0547"],
  short: ["\u056F\u0580", "\u0565\u0580", "\u0565\u0584", "\u0579\u0584", "\u0570\u0563", "\u0578\u0582\u0580", "\u0577\u0562"],
  abbreviated: ["\u056F\u056B\u0580", "\u0565\u0580\u056F", "\u0565\u0580\u0584", "\u0579\u0578\u0580", "\u0570\u0576\u0563", "\u0578\u0582\u0580\u0562", "\u0577\u0561\u0562"],
  wide: ["\u056F\u056B\u0580\u0561\u056F\u056B", "\u0565\u0580\u056F\u0578\u0582\u0577\u0561\u0562\u0569\u056B", "\u0565\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B", "\u0579\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B", "\u0570\u056B\u0576\u0563\u0577\u0561\u0562\u0569\u056B", "\u0578\u0582\u0580\u0562\u0561\u0569", "\u0577\u0561\u0562\u0561\u0569"]
};
var hy_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "\u056F\u0565\u057D\u0563\u0577",
    noon: "\u056F\u0565\u057D\u0585\u0580",
    morning: "\u0561\u057C\u0561\u057E\u0578\u057F",
    afternoon: "\u0581\u0565\u0580\u0565\u056F",
    evening: "\u0565\u0580\u0565\u056F\u0578",
    night: "\u0563\u056B\u0577\u0565\u0580"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "\u056F\u0565\u057D\u0563\u056B\u0577\u0565\u0580",
    noon: "\u056F\u0565\u057D\u0585\u0580",
    morning: "\u0561\u057C\u0561\u057E\u0578\u057F",
    afternoon: "\u0581\u0565\u0580\u0565\u056F",
    evening: "\u0565\u0580\u0565\u056F\u0578",
    night: "\u0563\u056B\u0577\u0565\u0580"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "\u056F\u0565\u057D\u0563\u056B\u0577\u0565\u0580",
    noon: "\u056F\u0565\u057D\u0585\u0580",
    morning: "\u0561\u057C\u0561\u057E\u0578\u057F",
    afternoon: "\u0581\u0565\u0580\u0565\u056F",
    evening: "\u0565\u0580\u0565\u056F\u0578",
    night: "\u0563\u056B\u0577\u0565\u0580"
  }
};
var hy_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "\u056F\u0565\u057D\u0563\u0577",
    noon: "\u056F\u0565\u057D\u0585\u0580",
    morning: "\u0561\u057C\u0561\u057E\u0578\u057F\u0568",
    afternoon: "\u0581\u0565\u0580\u0565\u056F\u0568",
    evening: "\u0565\u0580\u0565\u056F\u0578\u0575\u0561\u0576",
    night: "\u0563\u056B\u0577\u0565\u0580\u0568"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "\u056F\u0565\u057D\u0563\u056B\u0577\u0565\u0580\u056B\u0576",
    noon: "\u056F\u0565\u057D\u0585\u0580\u056B\u0576",
    morning: "\u0561\u057C\u0561\u057E\u0578\u057F\u0568",
    afternoon: "\u0581\u0565\u0580\u0565\u056F\u0568",
    evening: "\u0565\u0580\u0565\u056F\u0578\u0575\u0561\u0576",
    night: "\u0563\u056B\u0577\u0565\u0580\u0568"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "\u056F\u0565\u057D\u0563\u056B\u0577\u0565\u0580\u056B\u0576",
    noon: "\u056F\u0565\u057D\u0585\u0580\u056B\u0576",
    morning: "\u0561\u057C\u0561\u057E\u0578\u057F\u0568",
    afternoon: "\u0581\u0565\u0580\u0565\u056F\u0568",
    evening: "\u0565\u0580\u0565\u056F\u0578\u0575\u0561\u0576",
    night: "\u0563\u056B\u0577\u0565\u0580\u0568"
  }
};
var hy_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 < 10) {
    if (rem100 % 10 === 1) {
      return number + "\u058A\u056B\u0576";
    }
  }
  return number + "\u058A\u0580\u0564";
};
var hy_lib_localize_localize = {
  ordinalNumber: hy_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: hy_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: hy_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const hy_lib_localize = (hy_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/_lib/match/index.js


var hy_lib_match_matchOrdinalNumberPattern = /^(\d+)((-|֊)?(ին|րդ))?/i;
var hy_lib_match_parseOrdinalNumberPattern = /\d+/i;
var hy_lib_match_matchEraPatterns = {
  narrow: /^(Ք|Մ)/i,
  abbreviated: /^(Ք\.?\s?Ա\.?|Մ\.?\s?Թ\.?\s?Ա\.?|Մ\.?\s?Թ\.?|Ք\.?\s?Հ\.?)/i,
  wide: /^(քրիստոսից առաջ|մեր թվարկությունից առաջ|մեր թվարկության|քրիստոսից հետո)/i
};
var hy_lib_match_parseEraPatterns = {
  any: [/^ք/i, /^մ/i]
};
var hy_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ք[1234]/i,
  wide: /^[1234]((-|֊)?(ին|րդ)) քառորդ/i
};
var hy_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var hy_lib_match_matchMonthPatterns = {
  narrow: /^[հփմաօսնդ]/i,
  abbreviated: /^(հուն|փետ|մար|ապր|մայ|հուն|հուլ|օգս|սեպ|հոկ|նոյ|դեկ)/i,
  wide: /^(հունվար|փետրվար|մարտ|ապրիլ|մայիս|հունիս|հուլիս|օգոստոս|սեպտեմբեր|հոկտեմբեր|նոյեմբեր|դեկտեմբեր)/i
};
var hy_lib_match_parseMonthPatterns = {
  narrow: [/^հ/i, /^փ/i, /^մ/i, /^ա/i, /^մ/i, /^հ/i, /^հ/i, /^օ/i, /^ս/i, /^հ/i, /^ն/i, /^դ/i],
  any: [/^հու/i, /^փ/i, /^մար/i, /^ա/i, /^մայ/i, /^հուն/i, /^հուլ/i, /^օ/i, /^ս/i, /^հոկ/i, /^ն/i, /^դ/i]
};
var hy_lib_match_matchDayPatterns = {
  narrow: /^[եչհոշկ]/i,
  short: /^(կր|եր|եք|չք|հգ|ուր|շբ)/i,
  abbreviated: /^(կիր|երկ|երք|չոր|հնգ|ուրբ|շաբ)/i,
  wide: /^(կիրակի|երկուշաբթի|երեքշաբթի|չորեքշաբթի|հինգշաբթի|ուրբաթ|շաբաթ)/i
};
var hy_lib_match_parseDayPatterns = {
  narrow: [/^կ/i, /^ե/i, /^ե/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
  short: [/^կ/i, /^եր/i, /^եք/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
  abbreviated: [/^կ/i, /^երկ/i, /^երք/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i],
  wide: [/^կ/i, /^երկ/i, /^երե/i, /^չ/i, /^հ/i, /^(ո|Ո)/, /^շ/i]
};
var hy_lib_match_matchDayPeriodPatterns = {
  narrow: /^([ap]|կեսգշ|կեսօր|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i,
  any: /^([ap]\.?\s?m\.?|կեսգիշեր(ին)?|կեսօր(ին)?|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i
};
var hy_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /կեսգիշեր/i,
    noon: /կեսօր/i,
    morning: /առավոտ/i,
    afternoon: /ցերեկ/i,
    evening: /երեկո/i,
    night: /գիշեր/i
  }
};
var hy_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: hy_lib_match_matchOrdinalNumberPattern,
    parsePattern: hy_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hy_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hy_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hy_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: hy_lib_match_parseDayPatterns,
    defaultParseWidth: "wide"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: hy_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: hy_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const hy_lib_match = (hy_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/hy/index.js





var hy_locale = {
  code: "hy",
  formatDistance: hy_lib_formatDistance,
  formatLong: hy_lib_formatLong,
  formatRelative: hy_lib_formatRelative,
  localize: hy_lib_localize,
  match: hy_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const hy = (hy_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/formatDistance/index.js
var id_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "kurang dari 1 detik",
    other: "kurang dari {{count}} detik"
  },
  xSeconds: {
    one: "1 detik",
    other: "{{count}} detik"
  },
  halfAMinute: "setengah menit",
  lessThanXMinutes: {
    one: "kurang dari 1 menit",
    other: "kurang dari {{count}} menit"
  },
  xMinutes: {
    one: "1 menit",
    other: "{{count}} menit"
  },
  aboutXHours: {
    one: "sekitar 1 jam",
    other: "sekitar {{count}} jam"
  },
  xHours: {
    one: "1 jam",
    other: "{{count}} jam"
  },
  xDays: {
    one: "1 hari",
    other: "{{count}} hari"
  },
  aboutXWeeks: {
    one: "sekitar 1 minggu",
    other: "sekitar {{count}} minggu"
  },
  xWeeks: {
    one: "1 minggu",
    other: "{{count}} minggu"
  },
  aboutXMonths: {
    one: "sekitar 1 bulan",
    other: "sekitar {{count}} bulan"
  },
  xMonths: {
    one: "1 bulan",
    other: "{{count}} bulan"
  },
  aboutXYears: {
    one: "sekitar 1 tahun",
    other: "sekitar {{count}} tahun"
  },
  xYears: {
    one: "1 tahun",
    other: "{{count}} tahun"
  },
  overXYears: {
    one: "lebih dari 1 tahun",
    other: "lebih dari {{count}} tahun"
  },
  almostXYears: {
    one: "hampir 1 tahun",
    other: "hampir {{count}} tahun"
  }
};
var id_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = id_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "dalam waktu " + result;
    } else {
      return result + " yang lalu";
    }
  }
  return result;
};
/* harmony default export */ const id_lib_formatDistance = (id_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/formatLong/index.js

var id_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "d/M/yyyy"
};
var id_lib_formatLong_timeFormats = {
  full: "HH.mm.ss",
  long: "HH.mm.ss",
  medium: "HH.mm",
  short: "HH.mm"
};
var id_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var id_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: id_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: id_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: id_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const id_lib_formatLong = (id_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/formatRelative/index.js
var id_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'lalu pukul' p",
  yesterday: "'Kemarin pukul' p",
  today: "'Hari ini pukul' p",
  tomorrow: "'Besok pukul' p",
  nextWeek: "eeee 'pukul' p",
  other: "P"
};
var id_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return id_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const id_lib_formatRelative = (id_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/localize/index.js

var id_lib_localize_eraValues = {
  narrow: ["SM", "M"],
  abbreviated: ["SM", "M"],
  wide: ["Sebelum Masehi", "Masehi"]
};
var id_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["Kuartal ke-1", "Kuartal ke-2", "Kuartal ke-3", "Kuartal ke-4"]
};
var id_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "Mei", "Jun", "Jul", "Agt", "Sep", "Okt", "Nov", "Des"],
  wide: ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
};
var id_lib_localize_dayValues = {
  narrow: ["M", "S", "S", "R", "K", "J", "S"],
  short: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
  abbreviated: ["Min", "Sen", "Sel", "Rab", "Kam", "Jum", "Sab"],
  wide: ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
};
var id_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam"
  }
};
var id_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "siang",
    evening: "sore",
    night: "malam"
  }
};
var id_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return "ke-" + number;
};
var id_lib_localize_localize = {
  ordinalNumber: id_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: id_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: id_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const id_lib_localize = (id_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/_lib/match/index.js


var id_lib_match_matchOrdinalNumberPattern = /^ke-(\d+)?/i;
var id_lib_match_parseOrdinalNumberPattern = /\d+/i;
var id_lib_match_matchEraPatterns = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|s\.?\s?e\.?\s?u\.?|m\.?|e\.?\s?u\.?)/i,
  wide: /^(sebelum masehi|sebelum era umum|masehi|era umum)/i
};
var id_lib_match_parseEraPatterns = {
  any: [/^s/i, /^(m|e)/i]
};
var id_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K-?\s[1234]/i,
  wide: /^Kuartal ke-?\s?[1234]/i
};
var id_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var id_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|mei|jun|jul|agt|sep|okt|nov|des)/i,
  wide: /^(januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)/i
};
var id_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var id_lib_match_matchDayPatterns = {
  narrow: /^[srkjm]/i,
  short: /^(min|sen|sel|rab|kam|jum|sab)/i,
  abbreviated: /^(min|sen|sel|rab|kam|jum|sab)/i,
  wide: /^(minggu|senin|selasa|rabu|kamis|jumat|sabtu)/i
};
var id_lib_match_parseDayPatterns = {
  narrow: [/^m/i, /^s/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^m/i, /^sen/i, /^sel/i, /^r/i, /^k/i, /^j/i, /^sa/i]
};
var id_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|tengah m|tengah h|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|(di(\swaktu)?) (pagi|siang|sore|malam))/i
};
var id_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pagi/i,
    afternoon: /siang/i,
    evening: /sore/i,
    night: /malam/i
  }
};
var id_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: id_lib_match_matchOrdinalNumberPattern,
    parsePattern: id_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: id_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: id_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: id_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: id_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: id_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: id_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const id_lib_match = (id_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/id/index.js





var id_locale = {
  code: "id",
  formatDistance: id_lib_formatDistance,
  formatLong: id_lib_formatLong,
  formatRelative: id_lib_formatRelative,
  localize: id_lib_localize,
  match: id_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const id = (id_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/formatDistance/index.js
var is_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "minna en 1 sek\xFAnda",
    other: "minna en {{count}} sek\xFAndur"
  },
  xSeconds: {
    one: "1 sek\xFAnda",
    other: "{{count}} sek\xFAndur"
  },
  halfAMinute: "h\xE1lf m\xEDn\xFAta",
  lessThanXMinutes: {
    one: "minna en 1 m\xEDn\xFAta",
    other: "minna en {{count}} m\xEDn\xFAtur"
  },
  xMinutes: {
    one: "1 m\xEDn\xFAta",
    other: "{{count}} m\xEDn\xFAtur"
  },
  aboutXHours: {
    one: "u.\xFE.b. 1 klukkustund",
    other: "u.\xFE.b. {{count}} klukkustundir"
  },
  xHours: {
    one: "1 klukkustund",
    other: "{{count}} klukkustundir"
  },
  xDays: {
    one: "1 dagur",
    other: "{{count}} dagar"
  },
  aboutXWeeks: {
    one: "um viku",
    other: "um {{count}} vikur"
  },
  xWeeks: {
    one: "1 viku",
    other: "{{count}} vikur"
  },
  aboutXMonths: {
    one: "u.\xFE.b. 1 m\xE1nu\xF0ur",
    other: "u.\xFE.b. {{count}} m\xE1nu\xF0ir"
  },
  xMonths: {
    one: "1 m\xE1nu\xF0ur",
    other: "{{count}} m\xE1nu\xF0ir"
  },
  aboutXYears: {
    one: "u.\xFE.b. 1 \xE1r",
    other: "u.\xFE.b. {{count}} \xE1r"
  },
  xYears: {
    one: "1 \xE1r",
    other: "{{count}} \xE1r"
  },
  overXYears: {
    one: "meira en 1 \xE1r",
    other: "meira en {{count}} \xE1r"
  },
  almostXYears: {
    one: "n\xE6stum 1 \xE1r",
    other: "n\xE6stum {{count}} \xE1r"
  }
};
var is_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = is_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\xED " + result;
    } else {
      return result + " s\xED\xF0an";
    }
  }
  return result;
};
/* harmony default export */ const is_lib_formatDistance = (is_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/formatLong/index.js

var is_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y",
  long: "do MMMM y",
  medium: "do MMM y",
  short: "d.MM.y"
};
var is_lib_formatLong_timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var is_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var is_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: is_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: is_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: is_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const is_lib_formatLong = (is_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/formatRelative/index.js
var is_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'s\xED\xF0asta' dddd 'kl.' p",
  yesterday: "'\xED g\xE6r kl.' p",
  today: "'\xED dag kl.' p",
  tomorrow: "'\xE1 morgun kl.' p",
  nextWeek: "dddd 'kl.' p",
  other: "P"
};
var is_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return is_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const is_lib_formatRelative = (is_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/localize/index.js

var is_lib_localize_eraValues = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["fyrir Krist", "eftir Krist"]
};
var is_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1F", "2F", "3F", "4F"],
  wide: ["1. fj\xF3r\xF0ungur", "2. fj\xF3r\xF0ungur", "3. fj\xF3r\xF0ungur", "4. fj\xF3r\xF0ungur"]
};
var is_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "\xC1", "S", "\xD3", "N", "D"],
  abbreviated: ["jan.", "feb.", "mars", "apr\xEDl", "ma\xED", "j\xFAn\xED", "j\xFAl\xED", "\xE1g\xFAst", "sept.", "okt.", "n\xF3v.", "des."],
  wide: ["jan\xFAar", "febr\xFAar", "mars", "apr\xEDl", "ma\xED", "j\xFAn\xED", "j\xFAl\xED", "\xE1g\xFAst", "september", "okt\xF3ber", "n\xF3vember", "desember"]
};
var is_lib_localize_dayValues = {
  narrow: ["S", "M", "\xDE", "M", "F", "F", "L"],
  short: ["Su", "M\xE1", "\xDEr", "Mi", "Fi", "F\xF6", "La"],
  abbreviated: ["sun.", "m\xE1n.", "\xFEri.", "mi\xF0.", "fim.", "f\xF6s.", "lau."],
  wide: ["sunnudagur", "m\xE1nudagur", "\xFEri\xF0judagur", "mi\xF0vikudagur", "fimmtudagur", "f\xF6studagur", "laugardagur"]
};
var is_lib_localize_dayPeriodValues = {
  narrow: {
    am: "f",
    pm: "e",
    midnight: "mi\xF0n\xE6tti",
    noon: "h\xE1degi",
    morning: "morgunn",
    afternoon: "s\xED\xF0degi",
    evening: "kv\xF6ld",
    night: "n\xF3tt"
  },
  abbreviated: {
    am: "f.h.",
    pm: "e.h.",
    midnight: "mi\xF0n\xE6tti",
    noon: "h\xE1degi",
    morning: "morgunn",
    afternoon: "s\xED\xF0degi",
    evening: "kv\xF6ld",
    night: "n\xF3tt"
  },
  wide: {
    am: "fyrir h\xE1degi",
    pm: "eftir h\xE1degi",
    midnight: "mi\xF0n\xE6tti",
    noon: "h\xE1degi",
    morning: "morgunn",
    afternoon: "s\xED\xF0degi",
    evening: "kv\xF6ld",
    night: "n\xF3tt"
  }
};
var is_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "f",
    pm: "e",
    midnight: "\xE1 mi\xF0n\xE6tti",
    noon: "\xE1 h\xE1degi",
    morning: "a\xF0 morgni",
    afternoon: "s\xED\xF0degis",
    evening: "um kv\xF6ld",
    night: "um n\xF3tt"
  },
  abbreviated: {
    am: "f.h.",
    pm: "e.h.",
    midnight: "\xE1 mi\xF0n\xE6tti",
    noon: "\xE1 h\xE1degi",
    morning: "a\xF0 morgni",
    afternoon: "s\xED\xF0degis",
    evening: "um kv\xF6ld",
    night: "um n\xF3tt"
  },
  wide: {
    am: "fyrir h\xE1degi",
    pm: "eftir h\xE1degi",
    midnight: "\xE1 mi\xF0n\xE6tti",
    noon: "\xE1 h\xE1degi",
    morning: "a\xF0 morgni",
    afternoon: "s\xED\xF0degis",
    evening: "um kv\xF6ld",
    night: "um n\xF3tt"
  }
};
var is_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var is_lib_localize_localize = {
  ordinalNumber: is_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: is_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: is_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const is_lib_localize = (is_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/_lib/match/index.js


var is_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var is_lib_match_parseOrdinalNumberPattern = /\d+(\.)?/i;
var is_lib_match_matchEraPatterns = {
  narrow: /^(f\.Kr\.|e\.Kr\.)/i,
  abbreviated: /^(f\.Kr\.|e\.Kr\.)/i,
  wide: /^(fyrir Krist|eftir Krist)/i
};
var is_lib_match_parseEraPatterns = {
  any: [/^(f\.Kr\.)/i, /^(e\.Kr\.)/i]
};
var is_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]\.?/i,
  abbreviated: /^q[1234]\.?/i,
  wide: /^[1234]\.? fjórðungur/i
};
var is_lib_match_parseQuarterPatterns = {
  any: [/1\.?/i, /2\.?/i, /3\.?/i, /4\.?/i]
};
var is_lib_match_matchMonthPatterns = {
  narrow: /^[jfmásónd]/i,
  abbreviated: /^(jan\.|feb\.|mars\.|apríl\.|maí|júní|júlí|águst|sep\.|oct\.|nov\.|dec\.)/i,
  wide: /^(januar|febrúar|mars|apríl|maí|júní|júlí|águst|september|október|nóvember|desember)/i
};
var is_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^á/i, /^s/i, /^ó/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maí/i, /^jún/i, /^júl/i, /^áu/i, /^s/i, /^ó/i, /^n/i, /^d/i]
};
var is_lib_match_matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|má|þr|mi|fi|fö|la)/i,
  abbreviated: /^(sun|mán|þri|mið|fim|fös|lau)\.?/i,
  wide: /^(sunnudagur|mánudagur|þriðjudagur|miðvikudagur|fimmtudagur|föstudagur|laugardagur)/i
};
var is_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^þ/i, /^m/i, /^f/i, /^f/i, /^l/i],
  any: [/^su/i, /^má/i, /^þr/i, /^mi/i, /^fi/i, /^fö/i, /^la/i]
};
var is_lib_match_matchDayPeriodPatterns = {
  narrow: /^(f|e|síðdegis|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i,
  any: /^(fyrir hádegi|eftir hádegi|[ef]\.?h\.?|síðdegis|morgunn|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i
};
var is_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^f/i,
    pm: /^e/i,
    midnight: /^mi/i,
    noon: /^há/i,
    morning: /morgunn/i,
    afternoon: /síðdegi/i,
    evening: /kvöld/i,
    night: /nótt/i
  }
};
var is_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: is_lib_match_matchOrdinalNumberPattern,
    parsePattern: is_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: is_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: is_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: is_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: is_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: is_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: is_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const is_lib_match = (is_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/is/index.js





var is_locale = {
  code: "is",
  formatDistance: is_lib_formatDistance,
  formatLong: is_lib_formatLong,
  formatRelative: is_lib_formatRelative,
  localize: is_lib_localize,
  match: is_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const is = (is_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/formatDistance/index.js
var it_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "meno di un secondo",
    other: "meno di {{count}} secondi"
  },
  xSeconds: {
    one: "un secondo",
    other: "{{count}} secondi"
  },
  halfAMinute: "alcuni secondi",
  lessThanXMinutes: {
    one: "meno di un minuto",
    other: "meno di {{count}} minuti"
  },
  xMinutes: {
    one: "un minuto",
    other: "{{count}} minuti"
  },
  aboutXHours: {
    one: "circa un'ora",
    other: "circa {{count}} ore"
  },
  xHours: {
    one: "un'ora",
    other: "{{count}} ore"
  },
  xDays: {
    one: "un giorno",
    other: "{{count}} giorni"
  },
  aboutXWeeks: {
    one: "circa una settimana",
    other: "circa {{count}} settimane"
  },
  xWeeks: {
    one: "una settimana",
    other: "{{count}} settimane"
  },
  aboutXMonths: {
    one: "circa un mese",
    other: "circa {{count}} mesi"
  },
  xMonths: {
    one: "un mese",
    other: "{{count}} mesi"
  },
  aboutXYears: {
    one: "circa un anno",
    other: "circa {{count}} anni"
  },
  xYears: {
    one: "un anno",
    other: "{{count}} anni"
  },
  overXYears: {
    one: "pi\xF9 di un anno",
    other: "pi\xF9 di {{count}} anni"
  },
  almostXYears: {
    one: "quasi un anno",
    other: "quasi {{count}} anni"
  }
};
var it_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = it_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "tra " + result;
    } else {
      return result + " fa";
    }
  }
  return result;
};
/* harmony default export */ const it_lib_formatDistance = (it_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/formatLong/index.js

var it_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y"
};
var it_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var it_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var it_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: it_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: it_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: it_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const it_lib_formatLong = (it_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/formatRelative/index.js

var formatRelative_weekdays = ["domenica", "luned\xEC", "marted\xEC", "mercoled\xEC", "gioved\xEC", "venerd\xEC", "sabato"];
function _lastWeek(day) {
  switch (day) {
    case 0:
      return "'domenica scorsa alle' p";
    default:
      return "'" + formatRelative_weekdays[day] + " scorso alle' p";
  }
}
function it_lib_formatRelative_thisWeek(day) {
  return "'" + formatRelative_weekdays[day] + " alle' p";
}
function _nextWeek(day) {
  switch (day) {
    case 0:
      return "'domenica prossima alle' p";
    default:
      return "'" + formatRelative_weekdays[day] + " prossimo alle' p";
  }
}
var it_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return it_lib_formatRelative_thisWeek(day);
    } else {
      return _lastWeek(day);
    }
  },
  yesterday: "'ieri alle' p",
  today: "'oggi alle' p",
  tomorrow: "'domani alle' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return it_lib_formatRelative_thisWeek(day);
    } else {
      return _nextWeek(day);
    }
  },
  other: "P"
};
var it_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = it_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const it_lib_formatRelative = (it_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/localize/index.js

var it_lib_localize_eraValues = {
  narrow: ["aC", "dC"],
  abbreviated: ["a.C.", "d.C."],
  wide: ["avanti Cristo", "dopo Cristo"]
};
var it_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1\xBA trimestre", "2\xBA trimestre", "3\xBA trimestre", "4\xBA trimestre"]
};
var it_lib_localize_monthValues = {
  narrow: ["G", "F", "M", "A", "M", "G", "L", "A", "S", "O", "N", "D"],
  abbreviated: ["gen", "feb", "mar", "apr", "mag", "giu", "lug", "ago", "set", "ott", "nov", "dic"],
  wide: ["gennaio", "febbraio", "marzo", "aprile", "maggio", "giugno", "luglio", "agosto", "settembre", "ottobre", "novembre", "dicembre"]
};
var it_lib_localize_dayValues = {
  narrow: ["D", "L", "M", "M", "G", "V", "S"],
  short: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
  abbreviated: ["dom", "lun", "mar", "mer", "gio", "ven", "sab"],
  wide: ["domenica", "luned\xEC", "marted\xEC", "mercoled\xEC", "gioved\xEC", "venerd\xEC", "sabato"]
};
var it_lib_localize_dayPeriodValues = {
  narrow: {
    am: "m.",
    pm: "p.",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "mattina",
    afternoon: "pomeriggio",
    evening: "sera",
    night: "notte"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "mattina",
    afternoon: "pomeriggio",
    evening: "sera",
    night: "notte"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "mattina",
    afternoon: "pomeriggio",
    evening: "sera",
    night: "notte"
  }
};
var it_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "m.",
    pm: "p.",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "di mattina",
    afternoon: "del pomeriggio",
    evening: "di sera",
    night: "di notte"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "di mattina",
    afternoon: "del pomeriggio",
    evening: "di sera",
    night: "di notte"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "mezzanotte",
    noon: "mezzogiorno",
    morning: "di mattina",
    afternoon: "del pomeriggio",
    evening: "di sera",
    night: "di notte"
  }
};
var it_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return String(number);
};
var it_lib_localize_localize = {
  ordinalNumber: it_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: it_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: it_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const it_lib_localize = (it_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/_lib/match/index.js


var it_lib_match_matchOrdinalNumberPattern = /^(\d+)(º)?/i;
var it_lib_match_parseOrdinalNumberPattern = /\d+/i;
var it_lib_match_matchEraPatterns = {
  narrow: /^(aC|dC)/i,
  abbreviated: /^(a\.?\s?C\.?|a\.?\s?e\.?\s?v\.?|d\.?\s?C\.?|e\.?\s?v\.?)/i,
  wide: /^(avanti Cristo|avanti Era Volgare|dopo Cristo|Era Volgare)/i
};
var it_lib_match_parseEraPatterns = {
  any: [/^a/i, /^(d|e)/i]
};
var it_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^t[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var it_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var it_lib_match_matchMonthPatterns = {
  narrow: /^[gfmalsond]/i,
  abbreviated: /^(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic)/i,
  wide: /^(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre)/i
};
var it_lib_match_parseMonthPatterns = {
  narrow: [/^g/i, /^f/i, /^m/i, /^a/i, /^m/i, /^g/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ge/i, /^f/i, /^mar/i, /^ap/i, /^mag/i, /^gi/i, /^l/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var it_lib_match_matchDayPatterns = {
  narrow: /^[dlmgvs]/i,
  short: /^(do|lu|ma|me|gi|ve|sa)/i,
  abbreviated: /^(dom|lun|mar|mer|gio|ven|sab)/i,
  wide: /^(domenica|luned[i|ì]|marted[i|ì]|mercoled[i|ì]|gioved[i|ì]|venerd[i|ì]|sabato)/i
};
var it_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^g/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^me/i, /^g/i, /^v/i, /^s/i]
};
var it_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|m\.|p|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
  any: /^([ap]\.?\s?m\.?|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i
};
var it_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mezza/i,
    noon: /^mezzo/i,
    morning: /mattina/i,
    afternoon: /pomeriggio/i,
    evening: /sera/i,
    night: /notte/i
  }
};
var it_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: it_lib_match_matchOrdinalNumberPattern,
    parsePattern: it_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: it_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: it_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: it_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: it_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: it_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: it_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const it_lib_match = (it_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it/index.js





var it_locale = {
  code: "it",
  formatDistance: it_lib_formatDistance,
  formatLong: it_lib_formatLong,
  formatRelative: it_lib_formatRelative,
  localize: it_lib_localize,
  match: it_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const it = (it_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it-CH/_lib/formatLong/index.js

var it_CH_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd.MM.y"
};
var it_CH_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var it_CH_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var it_CH_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: it_CH_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: it_CH_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: it_CH_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const it_CH_lib_formatLong = (it_CH_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/it-CH/index.js





var it_CH_locale = {
  code: "it-CH",
  formatDistance: it_lib_formatDistance,
  formatLong: it_CH_lib_formatLong,
  formatRelative: it_lib_formatRelative,
  localize: it_lib_localize,
  match: it_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const it_CH = (it_CH_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/formatDistance/index.js
var ja_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "1\u79D2\u672A\u6E80",
    other: "{{count}}\u79D2\u672A\u6E80",
    oneWithSuffix: "\u7D041\u79D2",
    otherWithSuffix: "\u7D04{{count}}\u79D2"
  },
  xSeconds: {
    one: "1\u79D2",
    other: "{{count}}\u79D2"
  },
  halfAMinute: "30\u79D2",
  lessThanXMinutes: {
    one: "1\u5206\u672A\u6E80",
    other: "{{count}}\u5206\u672A\u6E80",
    oneWithSuffix: "\u7D041\u5206",
    otherWithSuffix: "\u7D04{{count}}\u5206"
  },
  xMinutes: {
    one: "1\u5206",
    other: "{{count}}\u5206"
  },
  aboutXHours: {
    one: "\u7D041\u6642\u9593",
    other: "\u7D04{{count}}\u6642\u9593"
  },
  xHours: {
    one: "1\u6642\u9593",
    other: "{{count}}\u6642\u9593"
  },
  xDays: {
    one: "1\u65E5",
    other: "{{count}}\u65E5"
  },
  aboutXWeeks: {
    one: "\u7D041\u9031\u9593",
    other: "\u7D04{{count}}\u9031\u9593"
  },
  xWeeks: {
    one: "1\u9031\u9593",
    other: "{{count}}\u9031\u9593"
  },
  aboutXMonths: {
    one: "\u7D041\u304B\u6708",
    other: "\u7D04{{count}}\u304B\u6708"
  },
  xMonths: {
    one: "1\u304B\u6708",
    other: "{{count}}\u304B\u6708"
  },
  aboutXYears: {
    one: "\u7D041\u5E74",
    other: "\u7D04{{count}}\u5E74"
  },
  xYears: {
    one: "1\u5E74",
    other: "{{count}}\u5E74"
  },
  overXYears: {
    one: "1\u5E74\u4EE5\u4E0A",
    other: "{{count}}\u5E74\u4EE5\u4E0A"
  },
  almostXYears: {
    one: "1\u5E74\u8FD1\u304F",
    other: "{{count}}\u5E74\u8FD1\u304F"
  }
};
var ja_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  options = options || {};
  var result;
  var tokenValue = ja_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options.addSuffix && tokenValue.oneWithSuffix) {
      result = tokenValue.oneWithSuffix;
    } else {
      result = tokenValue.one;
    }
  } else {
    if (options.addSuffix && tokenValue.otherWithSuffix) {
      result = tokenValue.otherWithSuffix.replace("{{count}}", String(count));
    } else {
      result = tokenValue.other.replace("{{count}}", String(count));
    }
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "\u5F8C";
    } else {
      return result + "\u524D";
    }
  }
  return result;
};
/* harmony default export */ const ja_lib_formatDistance = (ja_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/formatLong/index.js

var ja_lib_formatLong_dateFormats = {
  full: "y\u5E74M\u6708d\u65E5EEEE",
  long: "y\u5E74M\u6708d\u65E5",
  medium: "y/MM/dd",
  short: "y/MM/dd"
};
var ja_lib_formatLong_timeFormats = {
  full: "H\u6642mm\u5206ss\u79D2 zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var ja_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var ja_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ja_lib_formatLong = (ja_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/formatRelative/index.js
var ja_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "\u5148\u9031\u306Eeeee\u306Ep",
  yesterday: "\u6628\u65E5\u306Ep",
  today: "\u4ECA\u65E5\u306Ep",
  tomorrow: "\u660E\u65E5\u306Ep",
  nextWeek: "\u7FCC\u9031\u306Eeeee\u306Ep",
  other: "P"
};
var ja_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ja_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ja_lib_formatRelative = (ja_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/localize/index.js

var ja_lib_localize_eraValues = {
  narrow: ["BC", "AC"],
  abbreviated: ["\u7D00\u5143\u524D", "\u897F\u66A6"],
  wide: ["\u7D00\u5143\u524D", "\u897F\u66A6"]
};
var ja_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["\u7B2C1\u56DB\u534A\u671F", "\u7B2C2\u56DB\u534A\u671F", "\u7B2C3\u56DB\u534A\u671F", "\u7B2C4\u56DB\u534A\u671F"]
};
var ja_lib_localize_monthValues = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
  abbreviated: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"],
  wide: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"]
};
var ja_lib_localize_dayValues = {
  narrow: ["\u65E5", "\u6708", "\u706B", "\u6C34", "\u6728", "\u91D1", "\u571F"],
  short: ["\u65E5", "\u6708", "\u706B", "\u6C34", "\u6728", "\u91D1", "\u571F"],
  abbreviated: ["\u65E5", "\u6708", "\u706B", "\u6C34", "\u6728", "\u91D1", "\u571F"],
  wide: ["\u65E5\u66DC\u65E5", "\u6708\u66DC\u65E5", "\u706B\u66DC\u65E5", "\u6C34\u66DC\u65E5", "\u6728\u66DC\u65E5", "\u91D1\u66DC\u65E5", "\u571F\u66DC\u65E5"]
};
var ja_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u5348\u524D",
    pm: "\u5348\u5F8C",
    midnight: "\u6DF1\u591C",
    noon: "\u6B63\u5348",
    morning: "\u671D",
    afternoon: "\u5348\u5F8C",
    evening: "\u591C",
    night: "\u6DF1\u591C"
  },
  abbreviated: {
    am: "\u5348\u524D",
    pm: "\u5348\u5F8C",
    midnight: "\u6DF1\u591C",
    noon: "\u6B63\u5348",
    morning: "\u671D",
    afternoon: "\u5348\u5F8C",
    evening: "\u591C",
    night: "\u6DF1\u591C"
  },
  wide: {
    am: "\u5348\u524D",
    pm: "\u5348\u5F8C",
    midnight: "\u6DF1\u591C",
    noon: "\u6B63\u5348",
    morning: "\u671D",
    afternoon: "\u5348\u5F8C",
    evening: "\u591C",
    night: "\u6DF1\u591C"
  }
};
var ja_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u5348\u524D",
    pm: "\u5348\u5F8C",
    midnight: "\u6DF1\u591C",
    noon: "\u6B63\u5348",
    morning: "\u671D",
    afternoon: "\u5348\u5F8C",
    evening: "\u591C",
    night: "\u6DF1\u591C"
  },
  abbreviated: {
    am: "\u5348\u524D",
    pm: "\u5348\u5F8C",
    midnight: "\u6DF1\u591C",
    noon: "\u6B63\u5348",
    morning: "\u671D",
    afternoon: "\u5348\u5F8C",
    evening: "\u591C",
    night: "\u6DF1\u591C"
  },
  wide: {
    am: "\u5348\u524D",
    pm: "\u5348\u5F8C",
    midnight: "\u6DF1\u591C",
    noon: "\u6B63\u5348",
    morning: "\u671D",
    afternoon: "\u5348\u5F8C",
    evening: "\u591C",
    night: "\u6DF1\u591C"
  }
};
var ja_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  switch (unit) {
    case "year":
      return "".concat(number, "\u5E74");
    case "quarter":
      return "\u7B2C".concat(number, "\u56DB\u534A\u671F");
    case "month":
      return "".concat(number, "\u6708");
    case "week":
      return "\u7B2C".concat(number, "\u9031");
    case "date":
      return "".concat(number, "\u65E5");
    case "hour":
      return "".concat(number, "\u6642");
    case "minute":
      return "".concat(number, "\u5206");
    case "second":
      return "".concat(number, "\u79D2");
    default:
      return "".concat(number);
  }
};
var ja_lib_localize_localize = {
  ordinalNumber: ja_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ja_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ja_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ja_lib_localize = (ja_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/_lib/match/index.js


var ja_lib_match_matchOrdinalNumberPattern = /^第?\d+(年|四半期|月|週|日|時|分|秒)?/i;
var ja_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ja_lib_match_matchEraPatterns = {
  narrow: /^(B\.?C\.?|A\.?D\.?)/i,
  abbreviated: /^(紀元[前後]|西暦)/i,
  wide: /^(紀元[前後]|西暦)/i
};
var ja_lib_match_parseEraPatterns = {
  narrow: [/^B/i, /^A/i],
  any: [/^(紀元前)/i, /^(西暦|紀元後)/i]
};
var ja_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^Q[1234]/i,
  wide: /^第[1234一二三四１２３４]四半期/i
};
var ja_lib_match_parseQuarterPatterns = {
  any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i]
};
var ja_lib_match_matchMonthPatterns = {
  narrow: /^([123456789]|1[012])/,
  abbreviated: /^([123456789]|1[012])月/i,
  wide: /^([123456789]|1[012])月/i
};
var ja_lib_match_parseMonthPatterns = {
  any: [/^1\D/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var ja_lib_match_matchDayPatterns = {
  narrow: /^[日月火水木金土]/,
  short: /^[日月火水木金土]/,
  abbreviated: /^[日月火水木金土]/,
  wide: /^[日月火水木金土]曜日/
};
var ja_lib_match_parseDayPatterns = {
  any: [/^日/, /^月/, /^火/, /^水/, /^木/, /^金/, /^土/]
};
var ja_lib_match_matchDayPeriodPatterns = {
  any: /^(AM|PM|午前|午後|正午|深夜|真夜中|夜|朝)/i
};
var ja_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(A|午前)/i,
    pm: /^(P|午後)/i,
    midnight: /^深夜|真夜中/i,
    noon: /^正午/i,
    morning: /^朝/i,
    afternoon: /^午後/i,
    evening: /^夜/i,
    night: /^深夜/i
  }
};
var ja_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ja_lib_match_matchOrdinalNumberPattern,
    parsePattern: ja_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ja_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ja_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ja_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ja_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ja_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ja_lib_match = (ja_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja/index.js





var ja_locale = {
  code: "ja",
  formatDistance: ja_lib_formatDistance,
  formatLong: ja_lib_formatLong,
  formatRelative: ja_lib_formatRelative,
  localize: ja_lib_localize,
  match: ja_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ja = (ja_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/formatDistance/index.js
var ja_Hira_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "1\u3073\u3087\u3046\u307F\u307E\u3093",
    other: "{{count}}\u3073\u3087\u3046\u307F\u307E\u3093",
    oneWithSuffix: "\u3084\u304F1\u3073\u3087\u3046",
    otherWithSuffix: "\u3084\u304F{{count}}\u3073\u3087\u3046"
  },
  xSeconds: {
    one: "1\u3073\u3087\u3046",
    other: "{{count}}\u3073\u3087\u3046"
  },
  halfAMinute: "30\u3073\u3087\u3046",
  lessThanXMinutes: {
    one: "1\u3077\u3093\u307F\u307E\u3093",
    other: "{{count}}\u3075\u3093\u307F\u307E\u3093",
    oneWithSuffix: "\u3084\u304F1\u3077\u3093",
    otherWithSuffix: "\u3084\u304F{{count}}\u3075\u3093"
  },
  xMinutes: {
    one: "1\u3077\u3093",
    other: "{{count}}\u3075\u3093"
  },
  aboutXHours: {
    one: "\u3084\u304F1\u3058\u304B\u3093",
    other: "\u3084\u304F{{count}}\u3058\u304B\u3093"
  },
  xHours: {
    one: "1\u3058\u304B\u3093",
    other: "{{count}}\u3058\u304B\u3093"
  },
  xDays: {
    one: "1\u306B\u3061",
    other: "{{count}}\u306B\u3061"
  },
  aboutXWeeks: {
    one: "\u3084\u304F1\u3057\u3085\u3046\u304B\u3093",
    other: "\u3084\u304F{{count}}\u3057\u3085\u3046\u304B\u3093"
  },
  xWeeks: {
    one: "1\u3057\u3085\u3046\u304B\u3093",
    other: "{{count}}\u3057\u3085\u3046\u304B\u3093"
  },
  aboutXMonths: {
    one: "\u3084\u304F1\u304B\u3052\u3064",
    other: "\u3084\u304F{{count}}\u304B\u3052\u3064"
  },
  xMonths: {
    one: "1\u304B\u3052\u3064",
    other: "{{count}}\u304B\u3052\u3064"
  },
  aboutXYears: {
    one: "\u3084\u304F1\u306D\u3093",
    other: "\u3084\u304F{{count}}\u306D\u3093"
  },
  xYears: {
    one: "1\u306D\u3093",
    other: "{{count}}\u306D\u3093"
  },
  overXYears: {
    one: "1\u306D\u3093\u3044\u3058\u3087\u3046",
    other: "{{count}}\u306D\u3093\u3044\u3058\u3087\u3046"
  },
  almostXYears: {
    one: "1\u306D\u3093\u3061\u304B\u304F",
    other: "{{count}}\u306D\u3093\u3061\u304B\u304F"
  }
};
var ja_Hira_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  options = options || {};
  var result;
  var tokenValue = ja_Hira_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options.addSuffix && tokenValue.oneWithSuffix) {
      result = tokenValue.oneWithSuffix;
    } else {
      result = tokenValue.one;
    }
  } else {
    if (options.addSuffix && tokenValue.otherWithSuffix) {
      result = tokenValue.otherWithSuffix.replace("{{count}}", String(count));
    } else {
      result = tokenValue.other.replace("{{count}}", String(count));
    }
  }
  if (options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "\u3042\u3068";
    } else {
      return result + "\u307E\u3048";
    }
  }
  return result;
};
/* harmony default export */ const ja_Hira_lib_formatDistance = (ja_Hira_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/formatLong/index.js

var ja_Hira_lib_formatLong_dateFormats = {
  full: "y\u306D\u3093M\u304C\u3064d\u306B\u3061EEEE",
  long: "y\u306D\u3093M\u304C\u3064d\u306B\u3061",
  medium: "y/MM/dd",
  short: "y/MM/dd"
};
var ja_Hira_lib_formatLong_timeFormats = {
  full: "H\u3058mm\u3075\u3093ss\u3073\u3087\u3046 zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var ja_Hira_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var ja_Hira_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_Hira_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_Hira_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ja_Hira_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ja_Hira_lib_formatLong = (ja_Hira_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/formatRelative/index.js
var ja_Hira_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "\u305B\u3093\u3057\u3085\u3046\u306Eeeee\u306Ep",
  yesterday: "\u304D\u306E\u3046\u306Ep",
  today: "\u304D\u3087\u3046\u306Ep",
  tomorrow: "\u3042\u3057\u305F\u306Ep",
  nextWeek: "\u3088\u304F\u3057\u3085\u3046\u306Eeeee\u306Ep",
  other: "P"
};
var ja_Hira_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ja_Hira_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ja_Hira_lib_formatRelative = (ja_Hira_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/localize/index.js

var ja_Hira_lib_localize_eraValues = {
  narrow: ["BC", "AC"],
  abbreviated: ["\u304D\u3052\u3093\u305C\u3093", "\u305B\u3044\u308C\u304D"],
  wide: ["\u304D\u3052\u3093\u305C\u3093", "\u305B\u3044\u308C\u304D"]
};
var ja_Hira_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["\u3060\u30441\u3057\u306F\u3093\u304D", "\u3060\u30442\u3057\u306F\u3093\u304D", "\u3060\u30443\u3057\u306F\u3093\u304D", "\u3060\u30444\u3057\u306F\u3093\u304D"]
};
var ja_Hira_lib_localize_monthValues = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
  abbreviated: ["1\u304C\u3064", "2\u304C\u3064", "3\u304C\u3064", "4\u304C\u3064", "5\u304C\u3064", "6\u304C\u3064", "7\u304C\u3064", "8\u304C\u3064", "9\u304C\u3064", "10\u304C\u3064", "11\u304C\u3064", "12\u304C\u3064"],
  wide: ["1\u304C\u3064", "2\u304C\u3064", "3\u304C\u3064", "4\u304C\u3064", "5\u304C\u3064", "6\u304C\u3064", "7\u304C\u3064", "8\u304C\u3064", "9\u304C\u3064", "10\u304C\u3064", "11\u304C\u3064", "12\u304C\u3064"]
};
var ja_Hira_lib_localize_dayValues = {
  narrow: ["\u306B\u3061", "\u3052\u3064", "\u304B", "\u3059\u3044", "\u3082\u304F", "\u304D\u3093", "\u3069"],
  short: ["\u306B\u3061", "\u3052\u3064", "\u304B", "\u3059\u3044", "\u3082\u304F", "\u304D\u3093", "\u3069"],
  abbreviated: ["\u306B\u3061", "\u3052\u3064", "\u304B", "\u3059\u3044", "\u3082\u304F", "\u304D\u3093", "\u3069"],
  wide: ["\u306B\u3061\u3088\u3046\u3073", "\u3052\u3064\u3088\u3046\u3073", "\u304B\u3088\u3046\u3073", "\u3059\u3044\u3088\u3046\u3073", "\u3082\u304F\u3088\u3046\u3073", "\u304D\u3093\u3088\u3046\u3073", "\u3069\u3088\u3046\u3073"]
};
var ja_Hira_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u3054\u305C\u3093",
    pm: "\u3054\u3054",
    midnight: "\u3057\u3093\u3084",
    noon: "\u3057\u3087\u3046\u3054",
    morning: "\u3042\u3055",
    afternoon: "\u3054\u3054",
    evening: "\u3088\u308B",
    night: "\u3057\u3093\u3084"
  },
  abbreviated: {
    am: "\u3054\u305C\u3093",
    pm: "\u3054\u3054",
    midnight: "\u3057\u3093\u3084",
    noon: "\u3057\u3087\u3046\u3054",
    morning: "\u3042\u3055",
    afternoon: "\u3054\u3054",
    evening: "\u3088\u308B",
    night: "\u3057\u3093\u3084"
  },
  wide: {
    am: "\u3054\u305C\u3093",
    pm: "\u3054\u3054",
    midnight: "\u3057\u3093\u3084",
    noon: "\u3057\u3087\u3046\u3054",
    morning: "\u3042\u3055",
    afternoon: "\u3054\u3054",
    evening: "\u3088\u308B",
    night: "\u3057\u3093\u3084"
  }
};
var ja_Hira_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u3054\u305C\u3093",
    pm: "\u3054\u3054",
    midnight: "\u3057\u3093\u3084",
    noon: "\u3057\u3087\u3046\u3054",
    morning: "\u3042\u3055",
    afternoon: "\u3054\u3054",
    evening: "\u3088\u308B",
    night: "\u3057\u3093\u3084"
  },
  abbreviated: {
    am: "\u3054\u305C\u3093",
    pm: "\u3054\u3054",
    midnight: "\u3057\u3093\u3084",
    noon: "\u3057\u3087\u3046\u3054",
    morning: "\u3042\u3055",
    afternoon: "\u3054\u3054",
    evening: "\u3088\u308B",
    night: "\u3057\u3093\u3084"
  },
  wide: {
    am: "\u3054\u305C\u3093",
    pm: "\u3054\u3054",
    midnight: "\u3057\u3093\u3084",
    noon: "\u3057\u3087\u3046\u3054",
    morning: "\u3042\u3055",
    afternoon: "\u3054\u3054",
    evening: "\u3088\u308B",
    night: "\u3057\u3093\u3084"
  }
};
var ja_Hira_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  switch (unit) {
    case "year":
      return "".concat(number, "\u306D\u3093");
    case "quarter":
      return "\u3060\u3044".concat(number, "\u3057\u306F\u3093\u304D");
    case "month":
      return "".concat(number, "\u304C\u3064");
    case "week":
      return "\u3060\u3044".concat(number, "\u3057\u3085\u3046");
    case "date":
      return "".concat(number, "\u306B\u3061");
    case "hour":
      return "".concat(number, "\u3058");
    case "minute":
      return "".concat(number, "\u3075\u3093");
    case "second":
      return "".concat(number, "\u3073\u3087\u3046");
    default:
      return "".concat(number);
  }
};
var ja_Hira_lib_localize_localize = {
  ordinalNumber: ja_Hira_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ja_Hira_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ja_Hira_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ja_Hira_lib_localize = (ja_Hira_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/_lib/match/index.js


var ja_Hira_lib_match_matchOrdinalNumberPattern = /^だ?い?\d+(ねん|しはんき|がつ|しゅう|にち|じ|ふん|びょう)?/i;
var ja_Hira_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ja_Hira_lib_match_matchEraPatterns = {
  narrow: /^(B\.?C\.?|A\.?D\.?)/i,
  abbreviated: /^(きげん[前後]|せいれき)/i,
  wide: /^(きげん[前後]|せいれき)/i
};
var ja_Hira_lib_match_parseEraPatterns = {
  narrow: [/^B/i, /^A/i],
  any: [/^(きげんぜん)/i, /^(せいれき|きげんご)/i]
};
var ja_Hira_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^Q[1234]/i,
  wide: /^だい[1234一二三四１２３４]しはんき/i
};
var ja_Hira_lib_match_parseQuarterPatterns = {
  any: [/(1|一|１)/i, /(2|二|２)/i, /(3|三|３)/i, /(4|四|４)/i]
};
var ja_Hira_lib_match_matchMonthPatterns = {
  narrow: /^([123456789]|1[012])/,
  abbreviated: /^([123456789]|1[012])がつ/i,
  wide: /^([123456789]|1[012])がつ/i
};
var ja_Hira_lib_match_parseMonthPatterns = {
  any: [/^1\D/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var ja_Hira_lib_match_matchDayPatterns = {
  narrow: /^(にち|げつ|か|すい|もく|きん|ど)/,
  short: /^(にち|げつ|か|すい|もく|きん|ど)/,
  abbreviated: /^(にち|げつ|か|すい|もく|きん|ど)/,
  wide: /^(にち|げつ|か|すい|もく|きん|ど)ようび/
};
var ja_Hira_lib_match_parseDayPatterns = {
  any: [/^にち/, /^げつ/, /^か/, /^すい/, /^もく/, /^きん/, /^ど/]
};
var ja_Hira_lib_match_matchDayPeriodPatterns = {
  any: /^(AM|PM|ごぜん|ごご|しょうご|しんや|まよなか|よる|あさ)/i
};
var ja_Hira_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(A|ごぜん)/i,
    pm: /^(P|ごご)/i,
    midnight: /^しんや|まよなか/i,
    noon: /^しょうご/i,
    morning: /^あさ/i,
    afternoon: /^ごご/i,
    evening: /^よる/i,
    night: /^しんや/i
  }
};
var ja_Hira_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ja_Hira_lib_match_matchOrdinalNumberPattern,
    parsePattern: ja_Hira_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ja_Hira_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ja_Hira_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ja_Hira_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ja_Hira_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ja_Hira_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ja_Hira_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ja_Hira_lib_match = (ja_Hira_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ja-Hira/index.js





var ja_Hira_locale = {
  code: "ja-Hira",
  formatDistance: ja_Hira_lib_formatDistance,
  formatLong: ja_Hira_lib_formatLong,
  formatRelative: ja_Hira_lib_formatRelative,
  localize: ja_Hira_lib_localize,
  match: ja_Hira_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ja_Hira = (ja_Hira_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/formatDistance/index.js
var ka_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    past: "{{count}} \u10EC\u10D0\u10DB\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10D8 \u10EE\u10DC\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "{{count}} \u10EC\u10D0\u10DB\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10D8",
    future: "{{count}} \u10EC\u10D0\u10DB\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10E8\u10D8"
  },
  xSeconds: {
    past: "{{count}} \u10EC\u10D0\u10DB\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "{{count}} \u10EC\u10D0\u10DB\u10D8",
    future: "{{count}} \u10EC\u10D0\u10DB\u10E8\u10D8"
  },
  halfAMinute: {
    past: "\u10DC\u10D0\u10EE\u10D4\u10D5\u10D0\u10E0\u10D8 \u10EC\u10E3\u10D7\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "\u10DC\u10D0\u10EE\u10D4\u10D5\u10D0\u10E0\u10D8 \u10EC\u10E3\u10D7\u10D8",
    future: "\u10DC\u10D0\u10EE\u10D4\u10D5\u10D0\u10E0\u10D8 \u10EC\u10E3\u10D7\u10E8\u10D8"
  },
  lessThanXMinutes: {
    past: "{{count}} \u10EC\u10E3\u10D7\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10D8 \u10EE\u10DC\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "{{count}} \u10EC\u10E3\u10D7\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10D8",
    future: "{{count}} \u10EC\u10E3\u10D7\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10E8\u10D8"
  },
  xMinutes: {
    past: "{{count}} \u10EC\u10E3\u10D7\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "{{count}} \u10EC\u10E3\u10D7\u10D8",
    future: "{{count}} \u10EC\u10E3\u10D7\u10E8\u10D8"
  },
  aboutXHours: {
    past: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10E1\u10D0\u10D0\u10D7\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10E1\u10D0\u10D0\u10D7\u10D8",
    future: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10E1\u10D0\u10D0\u10D7\u10E8\u10D8"
  },
  xHours: {
    past: "{{count}} \u10E1\u10D0\u10D0\u10D7\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "{{count}} \u10E1\u10D0\u10D0\u10D7\u10D8",
    future: "{{count}} \u10E1\u10D0\u10D0\u10D7\u10E8\u10D8"
  },
  xDays: {
    past: "{{count}} \u10D3\u10E6\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "{{count}} \u10D3\u10E6\u10D4",
    future: "{{count}} \u10D3\u10E6\u10D4\u10E8\u10D8"
  },
  aboutXWeeks: {
    past: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D9\u10D5\u10D8\u10E0\u10D0\u10E1 \u10EC\u10D8\u10DC",
    present: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D9\u10D5\u10D8\u10E0\u10D0",
    future: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D9\u10D5\u10D8\u10E0\u10D0\u10E8\u10D8"
  },
  xWeeks: {
    past: "{{count}} \u10D9\u10D5\u10D8\u10E0\u10D0\u10E1 \u10D9\u10D5\u10D8\u10E0\u10D0",
    present: "{{count}} \u10D9\u10D5\u10D8\u10E0\u10D0",
    future: "{{count}} \u10D9\u10D5\u10D8\u10E0\u10D0\u10E8\u10D8"
  },
  aboutXMonths: {
    past: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D7\u10D5\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D7\u10D5\u10D4",
    future: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D7\u10D5\u10D4\u10E8\u10D8"
  },
  xMonths: {
    past: "{{count}} \u10D7\u10D5\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "{{count}} \u10D7\u10D5\u10D4",
    future: "{{count}} \u10D7\u10D5\u10D4\u10E8\u10D8"
  },
  aboutXYears: {
    past: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10EC\u10DA\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10EC\u10D4\u10DA\u10D8",
    future: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10EC\u10D4\u10DA\u10E8\u10D8"
  },
  xYears: {
    past: "{{count}} \u10EC\u10DA\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "{{count}} \u10EC\u10D4\u10DA\u10D8",
    future: "{{count}} \u10EC\u10D4\u10DA\u10E8\u10D8"
  },
  overXYears: {
    past: "{{count}} \u10EC\u10D4\u10DA\u10D6\u10D4 \u10DB\u10D4\u10E2\u10D8 \u10EE\u10DC\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "{{count}} \u10EC\u10D4\u10DA\u10D6\u10D4 \u10DB\u10D4\u10E2\u10D8",
    future: "{{count}} \u10EC\u10D4\u10DA\u10D6\u10D4 \u10DB\u10D4\u10E2\u10D8 \u10EE\u10DC\u10D8\u10E1 \u10E8\u10D4\u10DB\u10D3\u10D4\u10D2"
  },
  almostXYears: {
    past: "\u10D7\u10D8\u10D7\u10E5\u10DB\u10D8\u10E1 {{count}} \u10EC\u10DA\u10D8\u10E1 \u10EC\u10D8\u10DC",
    present: "\u10D7\u10D8\u10D7\u10E5\u10DB\u10D8\u10E1 {{count}} \u10EC\u10D4\u10DA\u10D8",
    future: "\u10D7\u10D8\u10D7\u10E5\u10DB\u10D8\u10E1 {{count}} \u10EC\u10D4\u10DA\u10E8\u10D8"
  }
};
var ka_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = ka_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (options !== null && options !== void 0 && options.addSuffix && options.comparison && options.comparison > 0) {
    result = tokenValue.future.replace("{{count}}", String(count));
  } else if (options !== null && options !== void 0 && options.addSuffix) {
    result = tokenValue.past.replace("{{count}}", String(count));
  } else {
    result = tokenValue.present.replace("{{count}}", String(count));
  }
  return result;
};
/* harmony default export */ const ka_lib_formatDistance = (ka_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/formatLong/index.js

var ka_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM, y",
  long: "do, MMMM, y",
  medium: "d, MMM, y",
  short: "dd/MM/yyyy"
};
var ka_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var ka_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}'-\u10D6\u10D4'",
  long: "{{date}} {{time}}'-\u10D6\u10D4'",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ka_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ka_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ka_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ka_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ka_lib_formatLong = (ka_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/formatRelative/index.js
var ka_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u10EC\u10D8\u10DC\u10D0' eeee p'-\u10D6\u10D4'",
  yesterday: "'\u10D2\u10E3\u10E8\u10D8\u10DC' p'-\u10D6\u10D4'",
  today: "'\u10D3\u10E6\u10D4\u10E1' p'-\u10D6\u10D4'",
  tomorrow: "'\u10EE\u10D5\u10D0\u10DA' p'-\u10D6\u10D4'",
  nextWeek: "'\u10E8\u10D4\u10DB\u10D3\u10D4\u10D2\u10D8' eeee p'-\u10D6\u10D4'",
  other: "P"
};
var ka_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ka_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ka_lib_formatRelative = (ka_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/localize/index.js

var ka_lib_localize_eraValues = {
  narrow: ["\u10E9.\u10EC-\u10DB\u10D3\u10D4", "\u10E9.\u10EC"],
  abbreviated: ["\u10E9\u10D5.\u10EC-\u10DB\u10D3\u10D4", "\u10E9\u10D5.\u10EC"],
  wide: ["\u10E9\u10D5\u10D4\u10DC\u10E1 \u10EC\u10D4\u10DA\u10D7\u10D0\u10E6\u10E0\u10D8\u10EA\u10EE\u10D5\u10D0\u10DB\u10D3\u10D4", "\u10E9\u10D5\u10D4\u10DC\u10D8 \u10EC\u10D4\u10DA\u10D7\u10D0\u10E6\u10E0\u10D8\u10EA\u10EE\u10D5\u10D8\u10D7"]
};
var ka_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-\u10DA\u10D8 \u10D9\u10D5", "2-\u10D4 \u10D9\u10D5", "3-\u10D4 \u10D9\u10D5", "4-\u10D4 \u10D9\u10D5"],
  wide: ["1-\u10DA\u10D8 \u10D9\u10D5\u10D0\u10E0\u10E2\u10D0\u10DA\u10D8", "2-\u10D4 \u10D9\u10D5\u10D0\u10E0\u10E2\u10D0\u10DA\u10D8", "3-\u10D4 \u10D9\u10D5\u10D0\u10E0\u10E2\u10D0\u10DA\u10D8", "4-\u10D4 \u10D9\u10D5\u10D0\u10E0\u10E2\u10D0\u10DA\u10D8"]
};
var ka_lib_localize_monthValues = {
  narrow: ["\u10D8\u10D0", "\u10D7\u10D4", "\u10DB\u10D0", "\u10D0\u10DE", "\u10DB\u10E1", "\u10D5\u10DC", "\u10D5\u10DA", "\u10D0\u10D2", "\u10E1\u10D4", "\u10DD\u10E5", "\u10DC\u10DD", "\u10D3\u10D4"],
  abbreviated: ["\u10D8\u10D0\u10DC", "\u10D7\u10D4\u10D1", "\u10DB\u10D0\u10E0", "\u10D0\u10DE\u10E0", "\u10DB\u10D0\u10D8", "\u10D8\u10D5\u10DC", "\u10D8\u10D5\u10DA", "\u10D0\u10D2\u10D5", "\u10E1\u10D4\u10E5", "\u10DD\u10E5\u10E2", "\u10DC\u10DD\u10D4", "\u10D3\u10D4\u10D9"],
  wide: ["\u10D8\u10D0\u10DC\u10D5\u10D0\u10E0\u10D8", "\u10D7\u10D4\u10D1\u10D4\u10E0\u10D5\u10D0\u10DA\u10D8", "\u10DB\u10D0\u10E0\u10E2\u10D8", "\u10D0\u10DE\u10E0\u10D8\u10DA\u10D8", "\u10DB\u10D0\u10D8\u10E1\u10D8", "\u10D8\u10D5\u10DC\u10D8\u10E1\u10D8", "\u10D8\u10D5\u10DA\u10D8\u10E1\u10D8", "\u10D0\u10D2\u10D5\u10D8\u10E1\u10E2\u10DD", "\u10E1\u10D4\u10E5\u10E2\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8", "\u10DD\u10E5\u10E2\u10DD\u10DB\u10D1\u10D4\u10E0\u10D8", "\u10DC\u10DD\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8", "\u10D3\u10D4\u10D9\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8"]
};
var ka_lib_localize_dayValues = {
  narrow: ["\u10D9\u10D5", "\u10DD\u10E0", "\u10E1\u10D0", "\u10DD\u10D7", "\u10EE\u10E3", "\u10DE\u10D0", "\u10E8\u10D0"],
  short: ["\u10D9\u10D5\u10D8", "\u10DD\u10E0\u10E8", "\u10E1\u10D0\u10DB", "\u10DD\u10D7\u10EE", "\u10EE\u10E3\u10D7", "\u10DE\u10D0\u10E0", "\u10E8\u10D0\u10D1"],
  abbreviated: ["\u10D9\u10D5\u10D8", "\u10DD\u10E0\u10E8", "\u10E1\u10D0\u10DB", "\u10DD\u10D7\u10EE", "\u10EE\u10E3\u10D7", "\u10DE\u10D0\u10E0", "\u10E8\u10D0\u10D1"],
  wide: ["\u10D9\u10D5\u10D8\u10E0\u10D0", "\u10DD\u10E0\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8", "\u10E1\u10D0\u10DB\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8", "\u10DD\u10D7\u10EE\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8", "\u10EE\u10E3\u10D7\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8", "\u10DE\u10D0\u10E0\u10D0\u10E1\u10D9\u10D4\u10D5\u10D8", "\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8"]
};
var ka_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D4",
    noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4",
    morning: "\u10D3\u10D8\u10DA\u10D0",
    afternoon: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
    evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
    night: "\u10E6\u10D0\u10DB\u10D4"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D4",
    noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4",
    morning: "\u10D3\u10D8\u10DA\u10D0",
    afternoon: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
    evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
    night: "\u10E6\u10D0\u10DB\u10D4"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D4",
    noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4",
    morning: "\u10D3\u10D8\u10DA\u10D0",
    afternoon: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
    evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
    night: "\u10E6\u10D0\u10DB\u10D4"
  }
};
var ka_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D8\u10D7",
    noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D8\u10E1\u10D0\u10E1",
    morning: "\u10D3\u10D8\u10DA\u10D8\u10D7",
    afternoon: "\u10DC\u10D0\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4\u10D5\u10E1",
    evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD\u10E1",
    night: "\u10E6\u10D0\u10DB\u10D8\u10D7"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D8\u10D7",
    noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D8\u10E1\u10D0\u10E1",
    morning: "\u10D3\u10D8\u10DA\u10D8\u10D7",
    afternoon: "\u10DC\u10D0\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4\u10D5\u10E1",
    evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD\u10E1",
    night: "\u10E6\u10D0\u10DB\u10D8\u10D7"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D8\u10D7",
    noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D8\u10E1\u10D0\u10E1",
    morning: "\u10D3\u10D8\u10DA\u10D8\u10D7",
    afternoon: "\u10DC\u10D0\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4\u10D5\u10E1",
    evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD\u10E1",
    night: "\u10E6\u10D0\u10DB\u10D8\u10D7"
  }
};
var ka_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber) {
  var number = Number(dirtyNumber);
  if (number === 1) {
    return number + "-\u10DA\u10D8";
  }
  return number + "-\u10D4";
};
var ka_lib_localize_localize = {
  ordinalNumber: ka_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ka_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ka_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ka_lib_localize = (ka_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/_lib/match/index.js


var ka_lib_match_matchOrdinalNumberPattern = /^(\d+)(-ლი|-ე)?/i;
var ka_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ka_lib_match_matchEraPatterns = {
  narrow: /^(ჩვ?\.წ)/i,
  abbreviated: /^(ჩვ?\.წ)/i,
  wide: /^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე|ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i
};
var ka_lib_match_parseEraPatterns = {
  any: [/^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე)/i, /^(ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i]
};
var ka_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]-(ლი|ე)? კვ/i,
  wide: /^[1234]-(ლი|ე)? კვარტალი/i
};
var ka_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ka_lib_match_matchMonthPatterns = {
  any: /^(ია|თე|მა|აპ|მს|ვნ|ვლ|აგ|სე|ოქ|ნო|დე)/i
};
var ka_lib_match_parseMonthPatterns = {
  any: [/^ია/i, /^თ/i, /^მარ/i, /^აპ/i, /^მაი/i, /^ი?ვნ/i, /^ი?ვლ/i, /^აგ/i, /^ს/i, /^ო/i, /^ნ/i, /^დ/i]
};
var ka_lib_match_matchDayPatterns = {
  narrow: /^(კვ|ორ|სა|ოთ|ხუ|პა|შა)/i,
  short: /^(კვი|ორშ|სამ|ოთხ|ხუთ|პარ|შაბ)/i,
  wide: /^(კვირა|ორშაბათი|სამშაბათი|ოთხშაბათი|ხუთშაბათი|პარასკევი|შაბათი)/i
};
var ka_lib_match_parseDayPatterns = {
  any: [/^კვ/i, /^ორ/i, /^სა/i, /^ოთ/i, /^ხუ/i, /^პა/i, /^შა/i]
};
var ka_lib_match_matchDayPeriodPatterns = {
  any: /^([ap]\.?\s?m\.?|შუაღ|დილ)/i
};
var ka_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^შუაღ/i,
    noon: /^შუადღ/i,
    morning: /^დილ/i,
    afternoon: /ნაშუადღევს/i,
    evening: /საღამო/i,
    night: /ღამ/i
  }
};
var ka_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ka_lib_match_matchOrdinalNumberPattern,
    parsePattern: ka_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ka_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ka_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchMonthPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ka_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ka_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ka_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ka_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ka_lib_match = (ka_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ka/index.js





var ka_locale = {
  code: "ka",
  formatDistance: ka_lib_formatDistance,
  formatLong: ka_lib_formatLong,
  formatRelative: ka_lib_formatRelative,
  localize: ka_lib_localize,
  match: ka_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ka = (ka_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/formatDistance/index.js
var kk_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    regular: {
      one: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u0430\u0437",
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u0430\u0437",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u0430\u0437",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u0430\u0437"
    },
    future: {
      one: "\u0431\u0456\u0440 \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
    }
  },
  xSeconds: {
    regular: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    past: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0431\u04B1\u0440\u044B\u043D",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0431\u04B1\u0440\u044B\u043D",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0431\u04B1\u0440\u044B\u043D"
    },
    future: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
    }
  },
  halfAMinute: function halfAMinute(options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return "\u0436\u0430\u0440\u0442\u044B \u043C\u0438\u043D\u0443\u0442 \u0456\u0448\u0456\u043D\u0434\u0435";
      } else {
        return "\u0436\u0430\u0440\u0442\u044B \u043C\u0438\u043D\u0443\u0442 \u0431\u04B1\u0440\u044B\u043D";
      }
    }
    return "\u0436\u0430\u0440\u0442\u044B \u043C\u0438\u043D\u0443\u0442";
  },
  lessThanXMinutes: {
    regular: {
      one: "1 \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u0430\u0437",
      singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u0430\u0437",
      singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u0430\u0437",
      pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u0430\u0437"
    },
    future: {
      one: "\u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u043C ",
      singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u043C",
      singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u043C",
      pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u043C"
    }
  },
  xMinutes: {
    regular: {
      singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442",
      singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442",
      pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442"
    },
    past: {
      singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u0431\u04B1\u0440\u044B\u043D",
      singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u0431\u04B1\u0440\u044B\u043D",
      pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u0431\u04B1\u0440\u044B\u043D"
    },
    future: {
      singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
    }
  },
  aboutXHours: {
    regular: {
      singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442",
      singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442",
      pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442"
    },
    future: {
      singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
    }
  },
  xHours: {
    regular: {
      singularNominative: "{{count}} \u0441\u0430\u0493\u0430\u0442",
      singularGenitive: "{{count}} \u0441\u0430\u0493\u0430\u0442",
      pluralGenitive: "{{count}} \u0441\u0430\u0493\u0430\u0442"
    }
  },
  xDays: {
    regular: {
      singularNominative: "{{count}} \u043A\u04AF\u043D",
      singularGenitive: "{{count}} \u043A\u04AF\u043D",
      pluralGenitive: "{{count}} \u043A\u04AF\u043D"
    },
    future: {
      singularNominative: "{{count}} \u043A\u04AF\u043D\u043D\u0435\u043D \u043A\u0435\u0439\u0456\u043D",
      singularGenitive: "{{count}} \u043A\u04AF\u043D\u043D\u0435\u043D \u043A\u0435\u0439\u0456\u043D",
      pluralGenitive: "{{count}} \u043A\u04AF\u043D\u043D\u0435\u043D \u043A\u0435\u0439\u0456\u043D"
    }
  },
  aboutXWeeks: {
    type: "weeks",
    one: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D 1 \u0430\u043F\u0442\u0430",
    other: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u043F\u0442\u0430"
  },
  xWeeks: {
    type: "weeks",
    one: "1 \u0430\u043F\u0442\u0430",
    other: "{{count}} \u0430\u043F\u0442\u0430"
  },
  aboutXMonths: {
    regular: {
      singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439",
      singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439",
      pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439"
    },
    future: {
      singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
    }
  },
  xMonths: {
    regular: {
      singularNominative: "{{count}} \u0430\u0439",
      singularGenitive: "{{count}} \u0430\u0439",
      pluralGenitive: "{{count}} \u0430\u0439"
    }
  },
  aboutXYears: {
    regular: {
      singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B",
      singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B",
      pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B"
    },
    future: {
      singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
    }
  },
  xYears: {
    regular: {
      singularNominative: "{{count}} \u0436\u044B\u043B",
      singularGenitive: "{{count}} \u0436\u044B\u043B",
      pluralGenitive: "{{count}} \u0436\u044B\u043B"
    },
    future: {
      singularNominative: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      singularGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      pluralGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
    }
  },
  overXYears: {
    regular: {
      singularNominative: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C",
      singularGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C",
      pluralGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C"
    },
    future: {
      singularNominative: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C",
      singularGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C",
      pluralGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C"
    }
  },
  almostXYears: {
    regular: {
      singularNominative: "{{count}} \u0436\u044B\u043B\u0493\u0430 \u0436\u0430\u049B\u044B\u043D",
      singularGenitive: "{{count}} \u0436\u044B\u043B\u0493\u0430 \u0436\u0430\u049B\u044B\u043D",
      pluralGenitive: "{{count}} \u0436\u044B\u043B\u0493\u0430 \u0436\u0430\u049B\u044B\u043D"
    },
    future: {
      singularNominative: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      singularGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
      pluralGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
    }
  }
};
function _lib_formatDistance_declension(scheme, count) {
  if (scheme.one && count === 1)
    return scheme.one;
  var rem10 = count % 10;
  var rem100 = count % 100;
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}
var kk_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var tokenValue = kk_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "function")
    return tokenValue(options);
  if (tokenValue.type === "weeks") {
    return count === 1 ? tokenValue.one : tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      if (tokenValue.future) {
        return _lib_formatDistance_declension(tokenValue.future, count);
      } else {
        return _lib_formatDistance_declension(tokenValue.regular, count) + " \u043A\u0435\u0439\u0456\u043D";
      }
    } else {
      if (tokenValue.past) {
        return _lib_formatDistance_declension(tokenValue.past, count);
      } else {
        return _lib_formatDistance_declension(tokenValue.regular, count) + " \u0431\u04B1\u0440\u044B\u043D";
      }
    }
  } else {
    return _lib_formatDistance_declension(tokenValue.regular, count);
  }
};
/* harmony default export */ const kk_lib_formatDistance = (kk_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/formatLong/index.js

var kk_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y '\u0436.'",
  long: "do MMMM y '\u0436.'",
  medium: "d MMM y '\u0436.'",
  short: "dd.MM.yyyy"
};
var kk_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var kk_lib_formatLong_dateTimeFormats = {
  any: "{{date}}, {{time}}"
};
var kk_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: kk_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: kk_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: kk_lib_formatLong_dateTimeFormats,
    defaultWidth: "any"
  })
};
/* harmony default export */ const kk_lib_formatLong = (kk_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/formatRelative/index.js

var kk_lib_formatRelative_accusativeWeekdays = ["\u0436\u0435\u043A\u0441\u0435\u043D\u0431\u0456\u0434\u0435", "\u0434\u04AF\u0439\u0441\u0435\u043D\u0431\u0456\u0434\u0435", "\u0441\u0435\u0439\u0441\u0435\u043D\u0431\u0456\u0434\u0435", "\u0441\u04D9\u0440\u0441\u0435\u043D\u0431\u0456\u0434\u0435", "\u0431\u0435\u0439\u0441\u0435\u043D\u0431\u0456\u0434\u0435", "\u0436\u04B1\u043C\u0430\u0434\u0430", "\u0441\u0435\u043D\u0431\u0456\u0434\u0435"];
function kk_lib_formatRelative_lastWeek(day) {
  var weekday = kk_lib_formatRelative_accusativeWeekdays[day];
  return "'\u04E9\u0442\u043A\u0435\u043D " + weekday + " \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'";
}
function kk_lib_formatRelative_thisWeek(day) {
  var weekday = kk_lib_formatRelative_accusativeWeekdays[day];
  return "'" + weekday + " \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'";
}
function kk_lib_formatRelative_nextWeek(day) {
  var weekday = kk_lib_formatRelative_accusativeWeekdays[day];
  return "'\u043A\u0435\u043B\u0435\u0441\u0456 " + weekday + " \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'";
}
var kk_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return kk_lib_formatRelative_thisWeek(day);
    } else {
      return kk_lib_formatRelative_lastWeek(day);
    }
  },
  yesterday: "'\u043A\u0435\u0448\u0435 \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'",
  today: "'\u0431\u04AF\u0433\u0456\u043D \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'",
  tomorrow: "'\u0435\u0440\u0442\u0435\u04A3 \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return kk_lib_formatRelative_thisWeek(day);
    } else {
      return kk_lib_formatRelative_nextWeek(day);
    }
  },
  other: "P"
};
var kk_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = kk_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const kk_lib_formatRelative = (kk_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/localize/index.js

var kk_lib_localize_eraValues = {
  narrow: ["\u0431.\u0437.\u0434.", "\u0431.\u0437."],
  abbreviated: ["\u0431.\u0437.\u0434.", "\u0431.\u0437."],
  wide: ["\u0431\u0456\u0437\u0434\u0456\u04A3 \u0437\u0430\u043C\u0430\u043D\u044B\u043C\u044B\u0437\u0493\u0430 \u0434\u0435\u0439\u0456\u043D", "\u0431\u0456\u0437\u0434\u0456\u04A3 \u0437\u0430\u043C\u0430\u043D\u044B\u043C\u044B\u0437"]
};
var kk_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-\u0448\u0456 \u0442\u043E\u049B.", "2-\u0448\u0456 \u0442\u043E\u049B.", "3-\u0448\u0456 \u0442\u043E\u049B.", "4-\u0448\u0456 \u0442\u043E\u049B."],
  wide: ["1-\u0448\u0456 \u0442\u043E\u049B\u0441\u0430\u043D", "2-\u0448\u0456 \u0442\u043E\u049B\u0441\u0430\u043D", "3-\u0448\u0456 \u0442\u043E\u049B\u0441\u0430\u043D", "4-\u0448\u0456 \u0442\u043E\u049B\u0441\u0430\u043D"]
};
var kk_lib_localize_monthValues = {
  narrow: ["\u049A", "\u0410", "\u041D", "\u0421", "\u041C", "\u041C", "\u0428", "\u0422", "\u049A", "\u049A", "\u049A", "\u0416"],
  abbreviated: ["\u049B\u0430\u04A3", "\u0430\u049B\u043F", "\u043D\u0430\u0443", "\u0441\u04D9\u0443", "\u043C\u0430\u043C", "\u043C\u0430\u0443", "\u0448\u0456\u043B", "\u0442\u0430\u043C", "\u049B\u044B\u0440", "\u049B\u0430\u0437", "\u049B\u0430\u0440", "\u0436\u0435\u043B"],
  wide: ["\u049B\u0430\u04A3\u0442\u0430\u0440", "\u0430\u049B\u043F\u0430\u043D", "\u043D\u0430\u0443\u0440\u044B\u0437", "\u0441\u04D9\u0443\u0456\u0440", "\u043C\u0430\u043C\u044B\u0440", "\u043C\u0430\u0443\u0441\u044B\u043C", "\u0448\u0456\u043B\u0434\u0435", "\u0442\u0430\u043C\u044B\u0437", "\u049B\u044B\u0440\u043A\u04AF\u0439\u0435\u043A", "\u049B\u0430\u0437\u0430\u043D", "\u049B\u0430\u0440\u0430\u0448\u0430", "\u0436\u0435\u043B\u0442\u043E\u049B\u0441\u0430\u043D"]
};
var kk_lib_localize_formattingMonthValues = {
  narrow: ["\u049A", "\u0410", "\u041D", "\u0421", "\u041C", "\u041C", "\u0428", "\u0422", "\u049A", "\u049A", "\u049A", "\u0416"],
  abbreviated: ["\u049B\u0430\u04A3", "\u0430\u049B\u043F", "\u043D\u0430\u0443", "\u0441\u04D9\u0443", "\u043C\u0430\u043C", "\u043C\u0430\u0443", "\u0448\u0456\u043B", "\u0442\u0430\u043C", "\u049B\u044B\u0440", "\u049B\u0430\u0437", "\u049B\u0430\u0440", "\u0436\u0435\u043B"],
  wide: ["\u049B\u0430\u04A3\u0442\u0430\u0440", "\u0430\u049B\u043F\u0430\u043D", "\u043D\u0430\u0443\u0440\u044B\u0437", "\u0441\u04D9\u0443\u0456\u0440", "\u043C\u0430\u043C\u044B\u0440", "\u043C\u0430\u0443\u0441\u044B\u043C", "\u0448\u0456\u043B\u0434\u0435", "\u0442\u0430\u043C\u044B\u0437", "\u049B\u044B\u0440\u043A\u04AF\u0439\u0435\u043A", "\u049B\u0430\u0437\u0430\u043D", "\u049B\u0430\u0440\u0430\u0448\u0430", "\u0436\u0435\u043B\u0442\u043E\u049B\u0441\u0430\u043D"]
};
var kk_lib_localize_dayValues = {
  narrow: ["\u0416", "\u0414", "\u0421", "\u0421", "\u0411", "\u0416", "\u0421"],
  short: ["\u0436\u0441", "\u0434\u0441", "\u0441\u0441", "\u0441\u0440", "\u0431\u0441", "\u0436\u043C", "\u0441\u0431"],
  abbreviated: ["\u0436\u0441", "\u0434\u0441", "\u0441\u0441", "\u0441\u0440", "\u0431\u0441", "\u0436\u043C", "\u0441\u0431"],
  wide: ["\u0436\u0435\u043A\u0441\u0435\u043D\u0431\u0456", "\u0434\u04AF\u0439\u0441\u0435\u043D\u0431\u0456", "\u0441\u0435\u0439\u0441\u0435\u043D\u0431\u0456", "\u0441\u04D9\u0440\u0441\u0435\u043D\u0431\u0456", "\u0431\u0435\u0439\u0441\u0435\u043D\u0431\u0456", "\u0436\u04B1\u043C\u0430", "\u0441\u0435\u043D\u0431\u0456"]
};
var kk_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0422\u0414",
    pm: "\u0422\u041A",
    midnight: "\u0442\u04AF\u043D \u043E\u0440\u0442\u0430\u0441\u044B",
    noon: "\u0442\u04AF\u0441",
    morning: "\u0442\u0430\u04A3",
    afternoon: "\u043A\u04AF\u043D\u0434\u0456\u0437",
    evening: "\u043A\u0435\u0448",
    night: "\u0442\u04AF\u043D"
  },
  wide: {
    am: "\u0422\u0414",
    pm: "\u0422\u041A",
    midnight: "\u0442\u04AF\u043D \u043E\u0440\u0442\u0430\u0441\u044B",
    noon: "\u0442\u04AF\u0441",
    morning: "\u0442\u0430\u04A3",
    afternoon: "\u043A\u04AF\u043D\u0434\u0456\u0437",
    evening: "\u043A\u0435\u0448",
    night: "\u0442\u04AF\u043D"
  }
};
var kk_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0422\u0414",
    pm: "\u0422\u041A",
    midnight: "\u0442\u04AF\u043D \u043E\u0440\u0442\u0430\u0441\u044B\u043D\u0434\u0430",
    noon: "\u0442\u04AF\u0441",
    morning: "\u0442\u0430\u04A3",
    afternoon: "\u043A\u04AF\u043D",
    evening: "\u043A\u0435\u0448",
    night: "\u0442\u04AF\u043D"
  },
  wide: {
    am: "\u0422\u0414",
    pm: "\u0422\u041A",
    midnight: "\u0442\u04AF\u043D \u043E\u0440\u0442\u0430\u0441\u044B\u043D\u0434\u0430",
    noon: "\u0442\u04AF\u0441\u0442\u0435",
    morning: "\u0442\u0430\u04A3\u0435\u0440\u0442\u0435\u04A3",
    afternoon: "\u043A\u04AF\u043D\u0434\u0456\u0437",
    evening: "\u043A\u0435\u0448\u0442\u0435",
    night: "\u0442\u04AF\u043D\u0434\u0435"
  }
};
var localize_suffixes = {
  0: "-\u0448\u0456",
  1: "-\u0448\u0456",
  2: "-\u0448\u0456",
  3: "-\u0448\u0456",
  4: "-\u0448\u0456",
  5: "-\u0448\u0456",
  6: "-\u0448\u044B",
  7: "-\u0448\u0456",
  8: "-\u0448\u0456",
  9: "-\u0448\u044B",
  10: "-\u0448\u044B",
  20: "-\u0448\u044B",
  30: "-\u0448\u044B",
  40: "-\u0448\u044B",
  50: "-\u0448\u0456",
  60: "-\u0448\u044B",
  70: "-\u0448\u0456",
  80: "-\u0448\u0456",
  90: "-\u0448\u044B",
  100: "-\u0448\u0456"
};
var kk_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var mod10 = number % 10;
  var b = number >= 100 ? 100 : null;
  var suffix = localize_suffixes[number] || localize_suffixes[mod10] || b && localize_suffixes[b] || "";
  return number + suffix;
};
var kk_lib_localize_localize = {
  ordinalNumber: kk_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: kk_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: kk_lib_localize_dayPeriodValues,
    defaultWidth: "any",
    formattingValues: kk_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const kk_lib_localize = (kk_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/_lib/match/index.js


var kk_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(ші|шы))?/i;
var kk_lib_match_parseOrdinalNumberPattern = /\d+/i;
var kk_lib_match_matchEraPatterns = {
  narrow: /^((б )?з\.?\s?д\.?)/i,
  abbreviated: /^((б )?з\.?\s?д\.?)/i,
  wide: /^(біздің заманымызға дейін|біздің заманымыз|біздің заманымыздан)/i
};
var kk_lib_match_parseEraPatterns = {
  any: [/^б/i, /^з/i]
};
var kk_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?ші)? тоқ.?/i,
  wide: /^[1234](-?ші)? тоқсан/i
};
var kk_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var kk_lib_match_matchMonthPatterns = {
  narrow: /^(қ|а|н|с|м|мау|ш|т|қыр|қаз|қар|ж)/i,
  abbreviated: /^(қаң|ақп|нау|сәу|мам|мау|шіл|там|қыр|қаз|қар|жел)/i,
  wide: /^(қаңтар|ақпан|наурыз|сәуір|мамыр|маусым|шілде|тамыз|қыркүйек|қазан|қараша|желтоқсан)/i
};
var kk_lib_match_parseMonthPatterns = {
  narrow: [/^қ/i, /^а/i, /^н/i, /^с/i, /^м/i, /^м/i, /^ш/i, /^т/i, /^қ/i, /^қ/i, /^қ/i, /^ж/i],
  abbreviated: [/^қаң/i, /^ақп/i, /^нау/i, /^сәу/i, /^мам/i, /^мау/i, /^шіл/i, /^там/i, /^қыр/i, /^қаз/i, /^қар/i, /^жел/i],
  any: [/^қ/i, /^а/i, /^н/i, /^с/i, /^м/i, /^м/i, /^ш/i, /^т/i, /^қ/i, /^қ/i, /^қ/i, /^ж/i]
};
var kk_lib_match_matchDayPatterns = {
  narrow: /^(ж|д|с|с|б|ж|с)/i,
  short: /^(жс|дс|сс|ср|бс|жм|сб)/i,
  wide: /^(жексенбі|дүйсенбі|сейсенбі|сәрсенбі|бейсенбі|жұма|сенбі)/i
};
var kk_lib_match_parseDayPatterns = {
  narrow: [/^ж/i, /^д/i, /^с/i, /^с/i, /^б/i, /^ж/i, /^с/i],
  short: [/^жс/i, /^дс/i, /^сс/i, /^ср/i, /^бс/i, /^жм/i, /^сб/i],
  any: [/^ж[ек]/i, /^д[үй]/i, /^сe[й]/i, /^сә[р]/i, /^б[ей]/i, /^ж[ұм]/i, /^се[н]/i]
};
var kk_lib_match_matchDayPeriodPatterns = {
  narrow: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
  wide: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
  any: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i
};
var kk_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ТД/i,
    pm: /^ТК/i,
    midnight: /^түн орта/i,
    noon: /^күндіз/i,
    morning: /таң/i,
    afternoon: /түс/i,
    evening: /кеш/i,
    night: /түн/i
  }
};
var kk_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: kk_lib_match_matchOrdinalNumberPattern,
    parsePattern: kk_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: kk_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: kk_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: kk_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: kk_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kk_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: kk_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const kk_lib_match = (kk_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kk/index.js





var kk_locale = {
  code: "kk",
  formatDistance: kk_lib_formatDistance,
  formatLong: kk_lib_formatLong,
  formatRelative: kk_lib_formatRelative,
  localize: kk_lib_localize,
  match: kk_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const kk = (kk_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/formatDistance/index.js
var km_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: "\u178F\u17B7\u1785\u1787\u17B6\u1784 {{count}} \u179C\u17B7\u1793\u17B6\u1791\u17B8",
  xSeconds: "{{count}} \u179C\u17B7\u1793\u17B6\u1791\u17B8",
  halfAMinute: "\u1780\u1793\u17D2\u179B\u17C7\u1793\u17B6\u1791\u17B8",
  lessThanXMinutes: "\u178F\u17B7\u1785\u1787\u17B6\u1784 {{count}} \u1793\u17B6\u1791\u17B8",
  xMinutes: "{{count}} \u1793\u17B6\u1791\u17B8",
  aboutXHours: "\u1794\u17D2\u179A\u17A0\u17C2\u179B {{count}} \u1798\u17C9\u17C4\u1784",
  xHours: "{{count}} \u1798\u17C9\u17C4\u1784",
  xDays: "{{count}} \u1790\u17D2\u1784\u17C3",
  aboutXWeeks: "\u1794\u17D2\u179A\u17A0\u17C2\u179B {{count}} \u179F\u1794\u17D2\u178F\u17B6\u17A0\u17CD",
  xWeeks: "{{count}} \u179F\u1794\u17D2\u178F\u17B6\u17A0\u17CD",
  aboutXMonths: "\u1794\u17D2\u179A\u17A0\u17C2\u179B {{count}} \u1781\u17C2",
  xMonths: "{{count}} \u1781\u17C2",
  aboutXYears: "\u1794\u17D2\u179A\u17A0\u17C2\u179B {{count}} \u1786\u17D2\u1793\u17B6\u17C6",
  xYears: "{{count}} \u1786\u17D2\u1793\u17B6\u17C6",
  overXYears: "\u1787\u17B6\u1784 {{count}} \u1786\u17D2\u1793\u17B6\u17C6",
  almostXYears: "\u1787\u17B7\u178F {{count}} \u1786\u17D2\u1793\u17B6\u17C6"
};
var km_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var tokenValue = km_lib_formatDistance_formatDistanceLocale[token];
  var result = tokenValue;
  if (typeof count === "number") {
    result = result.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u1780\u17D2\u1793\u17BB\u1784\u179A\u1799\u17C8\u1796\u17C1\u179B " + result;
    } else {
      return result + "\u1798\u17BB\u1793";
    }
  }
  return result;
};
/* harmony default export */ const km_lib_formatDistance = (km_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/formatLong/index.js

var km_lib_formatLong_dateFormats = {
  full: "EEEE do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "dd/MM/yyyy"
};
var km_lib_formatLong_timeFormats = {
  full: "h:mm:ss a",
  long: "h:mm:ss a",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var km_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u1798\u17C9\u17C4\u1784' {{time}}",
  long: "{{date}} '\u1798\u17C9\u17C4\u1784' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var km_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: km_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: km_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: km_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const km_lib_formatLong = (km_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/formatRelative/index.js
var km_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u1790\u17D2\u1784\u17C3'eeee'\u179F\u200B\u1794\u17D2\u178F\u17B6\u200B\u17A0\u17CD\u200B\u1798\u17BB\u1793\u1798\u17C9\u17C4\u1784' p",
  yesterday: "'\u1798\u17D2\u179F\u17B7\u179B\u1798\u17B7\u1789\u1793\u17C5\u1798\u17C9\u17C4\u1784' p",
  today: "'\u1790\u17D2\u1784\u17C3\u1793\u17C1\u17C7\u1798\u17C9\u17C4\u1784' p",
  tomorrow: "'\u1790\u17D2\u1784\u17C3\u179F\u17D2\u17A2\u17C2\u1780\u1798\u17C9\u17C4\u1784' p",
  nextWeek: "'\u1790\u17D2\u1784\u17C3'eeee'\u179F\u200B\u1794\u17D2\u178F\u17B6\u200B\u17A0\u17CD\u200B\u1780\u17D2\u179A\u17C4\u1799\u1798\u17C9\u17C4\u1784' p",
  other: "P"
};
var km_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return km_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const km_lib_formatRelative = (km_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/localize/index.js

var km_lib_localize_eraValues = {
  narrow: ["\u1798.\u1782\u179F", "\u1782\u179F"],
  abbreviated: ["\u1798\u17BB\u1793\u1782.\u179F", "\u1782.\u179F"],
  wide: ["\u1798\u17BB\u1793\u1782\u17D2\u179A\u17B7\u179F\u17D2\u178F\u179F\u1780\u179A\u17B6\u1787", "\u1793\u17C3\u1782\u17D2\u179A\u17B7\u179F\u17D2\u178F\u179F\u1780\u179A\u17B6\u1787"]
};
var km_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["\u178F\u17D2\u179A\u17B8\u1798\u17B6\u179F\u1791\u17B8 1", "\u178F\u17D2\u179A\u17B8\u1798\u17B6\u179F\u1791\u17B8 2", "\u178F\u17D2\u179A\u17B8\u1798\u17B6\u179F\u1791\u17B8 3", "\u178F\u17D2\u179A\u17B8\u1798\u17B6\u179F\u1791\u17B8 4"]
};
var km_lib_localize_monthValues = {
  narrow: ["\u1798.\u1780", "\u1780.\u1798", "\u1798\u17B7", "\u1798.\u179F", "\u17A7.\u179F", "\u1798.\u1790", "\u1780.\u178A", "\u179F\u17B8", "\u1780\u1789", "\u178F\u17BB", "\u179C\u17B7", "\u1792"],
  abbreviated: ["\u1798\u1780\u179A\u17B6", "\u1780\u17BB\u1798\u17D2\u1797\u17C8", "\u1798\u17B8\u1793\u17B6", "\u1798\u17C1\u179F\u17B6", "\u17A7\u179F\u1797\u17B6", "\u1798\u17B7\u1790\u17BB\u1793\u17B6", "\u1780\u1780\u17D2\u1780\u178A\u17B6", "\u179F\u17B8\u17A0\u17B6", "\u1780\u1789\u17D2\u1789\u17B6", "\u178F\u17BB\u179B\u17B6", "\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6", "\u1792\u17D2\u1793\u17BC"],
  wide: ["\u1798\u1780\u179A\u17B6", "\u1780\u17BB\u1798\u17D2\u1797\u17C8", "\u1798\u17B8\u1793\u17B6", "\u1798\u17C1\u179F\u17B6", "\u17A7\u179F\u1797\u17B6", "\u1798\u17B7\u1790\u17BB\u1793\u17B6", "\u1780\u1780\u17D2\u1780\u178A\u17B6", "\u179F\u17B8\u17A0\u17B6", "\u1780\u1789\u17D2\u1789\u17B6", "\u178F\u17BB\u179B\u17B6", "\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6", "\u1792\u17D2\u1793\u17BC"]
};
var km_lib_localize_dayValues = {
  narrow: ["\u17A2\u17B6", "\u1785", "\u17A2", "\u1796", "\u1796\u17D2\u179A", "\u179F\u17BB", "\u179F"],
  short: ["\u17A2\u17B6", "\u1785", "\u17A2", "\u1796", "\u1796\u17D2\u179A", "\u179F\u17BB", "\u179F"],
  abbreviated: ["\u17A2\u17B6", "\u1785", "\u17A2", "\u1796", "\u1796\u17D2\u179A", "\u179F\u17BB", "\u179F"],
  wide: ["\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799", "\u1785\u1793\u17D2\u1791", "\u17A2\u1784\u17D2\u1782\u17B6\u179A", "\u1796\u17BB\u1792", "\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD", "\u179F\u17BB\u1780\u17D2\u179A", "\u179F\u17C5\u179A\u17CD"]
};
var km_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u1796\u17D2\u179A\u17B9\u1780",
    pm: "\u179B\u17D2\u1784\u17B6\u1785",
    midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
    noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
    morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
    afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
    evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
    night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
  },
  abbreviated: {
    am: "\u1796\u17D2\u179A\u17B9\u1780",
    pm: "\u179B\u17D2\u1784\u17B6\u1785",
    midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
    noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
    morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
    afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
    evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
    night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
  },
  wide: {
    am: "\u1796\u17D2\u179A\u17B9\u1780",
    pm: "\u179B\u17D2\u1784\u17B6\u1785",
    midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
    noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
    morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
    afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
    evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
    night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
  }
};
var km_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u1796\u17D2\u179A\u17B9\u1780",
    pm: "\u179B\u17D2\u1784\u17B6\u1785",
    midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
    noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
    morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
    afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
    evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
    night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
  },
  abbreviated: {
    am: "\u1796\u17D2\u179A\u17B9\u1780",
    pm: "\u179B\u17D2\u1784\u17B6\u1785",
    midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
    noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
    morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
    afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
    evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
    night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
  },
  wide: {
    am: "\u1796\u17D2\u179A\u17B9\u1780",
    pm: "\u179B\u17D2\u1784\u17B6\u1785",
    midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
    noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
    morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
    afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
    evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
    night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
  }
};
var km_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _) {
  var number = Number(dirtyNumber);
  return number.toString();
};
var km_lib_localize_localize = {
  ordinalNumber: km_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: km_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: km_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const km_lib_localize = (km_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/_lib/match/index.js


var km_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var km_lib_match_parseOrdinalNumberPattern = /\d+/i;
var km_lib_match_matchEraPatterns = {
  narrow: /^(ម\.)?គស/i,
  abbreviated: /^(មុន)?គ\.ស/i,
  wide: /^(មុន|នៃ)គ្រិស្តសករាជ/i
};
var km_lib_match_parseEraPatterns = {
  any: [/^(ម|មុន)គ\.?ស/i, /^(នៃ)?គ\.?ស/i]
};
var km_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^(ត្រីមាស)(ទី)?\s?[1234]/i
};
var km_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var km_lib_match_matchMonthPatterns = {
  narrow: /^(ម\.ក|ក\.ម|មិ|ម\.ស|ឧ\.ស|ម\.ថ|ក\.ដ|សី|កញ|តុ|វិ|ធ)/i,
  abbreviated: /^(មករា|កុម្ភៈ|មីនា|មេសា|ឧសភា|មិថុនា|កក្កដា|សីហា|កញ្ញា|តុលា|វិច្ឆិកា|ធ្នូ)/i,
  wide: /^(មករា|កុម្ភៈ|មីនា|មេសា|ឧសភា|មិថុនា|កក្កដា|សីហា|កញ្ញា|តុលា|វិច្ឆិកា|ធ្នូ)/i
};
var km_lib_match_parseMonthPatterns = {
  narrow: [/^ម\.ក/i, /^ក\.ម/i, /^មិ/i, /^ម\.ស/i, /^ឧ\.ស/i, /^ម\.ថ/i, /^ក\.ដ/i, /^សី/i, /^កញ/i, /^តុ/i, /^វិ/i, /^ធ/i],
  any: [/^មក/i, /^កុ/i, /^មីន/i, /^មេ/i, /^ឧស/i, /^មិថ/i, /^កក/i, /^សី/i, /^កញ/i, /^តុ/i, /^វិច/i, /^ធ/i]
};
var km_lib_match_matchDayPatterns = {
  narrow: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
  short: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
  abbreviated: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
  wide: /^(អាទិត្យ|ចន្ទ|អង្គារ|ពុធ|ព្រហស្បតិ៍|សុក្រ|សៅរ៍)/i
};
var km_lib_match_parseDayPatterns = {
  narrow: [/^អា/i, /^ច/i, /^អ/i, /^ព/i, /^ព្រ/i, /^សុ/i, /^ស/i],
  any: [/^អា/i, /^ច/i, /^អ/i, /^ព/i, /^ព្រ/i, /^សុ/i, /^សៅ/i]
};
var km_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ព្រឹក|ល្ងាច|ពេលព្រឹក|ពេលថ្ងៃត្រង់|ពេលល្ងាច|ពេលរសៀល|ពេលយប់|ពេលកណ្ដាលអធ្រាត្រ)/i,
  any: /^(ព្រឹក|ល្ងាច|ពេលព្រឹក|ពេលថ្ងៃត្រង់|ពេលល្ងាច|ពេលរសៀល|ពេលយប់|ពេលកណ្ដាលអធ្រាត្រ)/i
};
var km_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ព្រឹក/i,
    pm: /^ល្ងាច/i,
    midnight: /^ពេលកណ្ដាលអធ្រាត្រ/i,
    noon: /^ពេលថ្ងៃត្រង់/i,
    morning: /ពេលព្រឹក/i,
    afternoon: /ពេលរសៀល/i,
    evening: /ពេលល្ងាច/i,
    night: /ពេលយប់/i
  }
};
var km_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: km_lib_match_matchOrdinalNumberPattern,
    parsePattern: km_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: km_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: km_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: km_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: km_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: km_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: km_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const km_lib_match = (km_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/km/index.js





var km_locale = {
  code: "km",
  formatDistance: km_lib_formatDistance,
  formatLong: km_lib_formatLong,
  formatRelative: km_lib_formatRelative,
  localize: km_lib_localize,
  match: km_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const km = (km_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/formatDistance/index.js
var kn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      default: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
      future: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
      past: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6"
    },
    other: {
      default: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
      future: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
      past: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6"
    }
  },
  xSeconds: {
    one: {
      default: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD",
      future: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0CA8\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    },
    other: {
      default: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CC1\u0C97\u0CB3\u0CC1",
      future: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  halfAMinute: {
    other: {
      default: "\u0C85\u0CB0\u0CCD\u0CA7 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7",
      future: "\u0C85\u0CB0\u0CCD\u0CA7 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "\u0C85\u0CB0\u0CCD\u0CA7 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  lessThanXMinutes: {
    one: {
      default: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
      future: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
      past: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6"
    },
    other: {
      default: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
      future: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
      past: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6"
    }
  },
  xMinutes: {
    one: {
      default: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7",
      future: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    },
    other: {
      default: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C97\u0CB3\u0CC1",
      future: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  aboutXHours: {
    one: {
      default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0C97\u0C82\u0C9F\u0CC6",
      future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0C97\u0C82\u0C9F\u0CC6\u0CAF\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0C97\u0C82\u0C9F\u0CC6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    },
    other: {
      default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3\u0CC1",
      future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  xHours: {
    one: {
      default: "1 \u0C97\u0C82\u0C9F\u0CC6",
      future: "1 \u0C97\u0C82\u0C9F\u0CC6\u0CAF\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "1 \u0C97\u0C82\u0C9F\u0CC6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    },
    other: {
      default: "{{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3\u0CC1",
      future: "{{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "{{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  xDays: {
    one: {
      default: "1 \u0CA6\u0CBF\u0CA8",
      future: "1 \u0CA6\u0CBF\u0CA8\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "1 \u0CA6\u0CBF\u0CA8\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    },
    other: {
      default: "{{count}} \u0CA6\u0CBF\u0CA8\u0C97\u0CB3\u0CC1",
      future: "{{count}} \u0CA6\u0CBF\u0CA8\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "{{count}} \u0CA6\u0CBF\u0CA8\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  // TODO
  // aboutXWeeks: {},
  // TODO
  // xWeeks: {},
  aboutXMonths: {
    one: {
      default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1",
      future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    },
    other: {
      default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1",
      future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  xMonths: {
    one: {
      default: "1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1",
      future: "1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    },
    other: {
      default: "{{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1",
      future: "{{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "{{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  aboutXYears: {
    one: {
      default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CB5\u0CB0\u0CCD\u0CB7",
      future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    },
    other: {
      default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CC1",
      future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  xYears: {
    one: {
      default: "1 \u0CB5\u0CB0\u0CCD\u0CB7",
      future: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    },
    other: {
      default: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CC1",
      future: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
    }
  },
  overXYears: {
    one: {
      default: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CAE\u0CC7\u0CB2\u0CC6",
      future: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CAE\u0CC7\u0CB2\u0CC6",
      past: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CAE\u0CC7\u0CB2\u0CC6"
    },
    other: {
      default: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CAE\u0CC7\u0CB2\u0CC6",
      future: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CAE\u0CC7\u0CB2\u0CC6",
      past: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CAE\u0CC7\u0CB2\u0CC6"
    }
  },
  almostXYears: {
    one: {
      default: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
      future: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF"
    },
    other: {
      default: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      future: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
      past: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF"
    }
  }
};
function getResultByTense(parentToken, options) {
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return parentToken.future;
    } else {
      return parentToken.past;
    }
  }
  return parentToken.default;
}
var kn_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = kn_lib_formatDistance_formatDistanceLocale[token];
  if (tokenValue.one && count === 1) {
    result = getResultByTense(tokenValue.one, options);
  } else {
    result = getResultByTense(tokenValue.other, options);
  }
  return result.replace("{{count}}", String(count));
};
/* harmony default export */ const kn_lib_formatDistance = (kn_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/formatLong/index.js

var kn_lib_formatLong_dateFormats = {
  full: "EEEE, MMMM d, y",
  // CLDR 1816
  long: "MMMM d, y",
  // CLDR 1817
  medium: "MMM d, y",
  // CLDR 1818
  short: "d/M/yy"
  // CLDR 1819
};
var kn_lib_formatLong_timeFormats = {
  full: "hh:mm:ss a zzzz",
  // CLDR 1820
  long: "hh:mm:ss a z",
  // CLDR 1821
  medium: "hh:mm:ss a",
  // CLDR 1822
  short: "hh:mm a"
  // CLDR 1823
};
var kn_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  // CLDR 1824
  long: "{{date}} {{time}}",
  // CLDR 1825
  medium: "{{date}} {{time}}",
  // CLDR 1826
  short: "{{date}} {{time}}"
  // CLDR 1827
};
var kn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: kn_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: kn_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: kn_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const kn_lib_formatLong = (kn_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/formatRelative/index.js
var kn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0C95\u0CB3\u0CC6\u0CA6' eeee p '\u0C95\u0CCD\u0C95\u0CC6'",
  yesterday: "'\u0CA8\u0CBF\u0CA8\u0CCD\u0CA8\u0CC6' p '\u0C95\u0CCD\u0C95\u0CC6'",
  today: "'\u0C87\u0C82\u0CA6\u0CC1' p '\u0C95\u0CCD\u0C95\u0CC6'",
  tomorrow: "'\u0CA8\u0CBE\u0CB3\u0CC6' p '\u0C95\u0CCD\u0C95\u0CC6'",
  nextWeek: "eeee p '\u0C95\u0CCD\u0C95\u0CC6'",
  other: "P"
};
var kn_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return kn_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const kn_lib_formatRelative = (kn_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/localize/index.js

var kn_lib_localize_eraValues = {
  narrow: ["\u0C95\u0CCD\u0CB0\u0CBF.\u0CAA\u0CC2", "\u0C95\u0CCD\u0CB0\u0CBF.\u0CB6"],
  abbreviated: ["\u0C95\u0CCD\u0CB0\u0CBF.\u0CAA\u0CC2", "\u0C95\u0CCD\u0CB0\u0CBF.\u0CB6"],
  // CLDR #1618, #1620
  wide: ["\u0C95\u0CCD\u0CB0\u0CBF\u0CB8\u0CCD\u0CA4 \u0CAA\u0CC2\u0CB0\u0CCD\u0CB5", "\u0C95\u0CCD\u0CB0\u0CBF\u0CB8\u0CCD\u0CA4 \u0CB6\u0C95"]
  // CLDR #1614, #1616
};
var kn_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u0CA4\u0CCD\u0CB0\u0CC8 1", "\u0CA4\u0CCD\u0CB0\u0CC8 2", "\u0CA4\u0CCD\u0CB0\u0CC8 3", "\u0CA4\u0CCD\u0CB0\u0CC8 4"],
  // CLDR #1630 - #1638
  wide: ["1\u0CA8\u0CC7 \u0CA4\u0CCD\u0CB0\u0CC8\u0CAE\u0CBE\u0CB8\u0CBF\u0C95", "2\u0CA8\u0CC7 \u0CA4\u0CCD\u0CB0\u0CC8\u0CAE\u0CBE\u0CB8\u0CBF\u0C95", "3\u0CA8\u0CC7 \u0CA4\u0CCD\u0CB0\u0CC8\u0CAE\u0CBE\u0CB8\u0CBF\u0C95", "4\u0CA8\u0CC7 \u0CA4\u0CCD\u0CB0\u0CC8\u0CAE\u0CBE\u0CB8\u0CBF\u0C95"]
  // CLDR #1622 - #1629
};
var kn_lib_localize_monthValues = {
  narrow: ["\u0C9C", "\u0CAB\u0CC6", "\u0CAE\u0CBE", "\u0C8F", "\u0CAE\u0CC7", "\u0C9C\u0CC2", "\u0C9C\u0CC1", "\u0C86", "\u0CB8\u0CC6", "\u0C85", "\u0CA8", "\u0CA1\u0CBF"],
  abbreviated: ["\u0C9C\u0CA8", "\u0CAB\u0CC6\u0CAC\u0CCD\u0CB0", "\u0CAE\u0CBE\u0CB0\u0CCD\u0C9A\u0CCD", "\u0C8F\u0CAA\u0CCD\u0CB0\u0CBF", "\u0CAE\u0CC7", "\u0C9C\u0CC2\u0CA8\u0CCD", "\u0C9C\u0CC1\u0CB2\u0CC8", "\u0C86\u0C97", "\u0CB8\u0CC6\u0CAA\u0CCD\u0C9F\u0CC6\u0C82", "\u0C85\u0C95\u0CCD\u0C9F\u0CCB", "\u0CA8\u0CB5\u0CC6\u0C82", "\u0CA1\u0CBF\u0CB8\u0CC6\u0C82"],
  wide: ["\u0C9C\u0CA8\u0CB5\u0CB0\u0CBF", "\u0CAB\u0CC6\u0CAC\u0CCD\u0CB0\u0CB5\u0CB0\u0CBF", "\u0CAE\u0CBE\u0CB0\u0CCD\u0C9A\u0CCD", "\u0C8F\u0CAA\u0CCD\u0CB0\u0CBF\u0CB2\u0CCD", "\u0CAE\u0CC7", "\u0C9C\u0CC2\u0CA8\u0CCD", "\u0C9C\u0CC1\u0CB2\u0CC8", "\u0C86\u0C97\u0CB8\u0CCD\u0C9F\u0CCD", "\u0CB8\u0CC6\u0CAA\u0CCD\u0C9F\u0CC6\u0C82\u0CAC\u0CB0\u0CCD", "\u0C85\u0C95\u0CCD\u0C9F\u0CCB\u0CAC\u0CB0\u0CCD", "\u0CA8\u0CB5\u0CC6\u0C82\u0CAC\u0CB0\u0CCD", "\u0CA1\u0CBF\u0CB8\u0CC6\u0C82\u0CAC\u0CB0\u0CCD"]
};
var kn_lib_localize_dayValues = {
  narrow: ["\u0CAD\u0CBE", "\u0CB8\u0CCB", "\u0CAE\u0C82", "\u0CAC\u0CC1", "\u0C97\u0CC1", "\u0CB6\u0CC1", "\u0CB6"],
  short: ["\u0CAD\u0CBE\u0CA8\u0CC1", "\u0CB8\u0CCB\u0CAE", "\u0CAE\u0C82\u0C97\u0CB3", "\u0CAC\u0CC1\u0CA7", "\u0C97\u0CC1\u0CB0\u0CC1", "\u0CB6\u0CC1\u0C95\u0CCD\u0CB0", "\u0CB6\u0CA8\u0CBF"],
  abbreviated: ["\u0CAD\u0CBE\u0CA8\u0CC1", "\u0CB8\u0CCB\u0CAE", "\u0CAE\u0C82\u0C97\u0CB3", "\u0CAC\u0CC1\u0CA7", "\u0C97\u0CC1\u0CB0\u0CC1", "\u0CB6\u0CC1\u0C95\u0CCD\u0CB0", "\u0CB6\u0CA8\u0CBF"],
  wide: ["\u0CAD\u0CBE\u0CA8\u0CC1\u0CB5\u0CBE\u0CB0", "\u0CB8\u0CCB\u0CAE\u0CB5\u0CBE\u0CB0", "\u0CAE\u0C82\u0C97\u0CB3\u0CB5\u0CBE\u0CB0", "\u0CAC\u0CC1\u0CA7\u0CB5\u0CBE\u0CB0", "\u0C97\u0CC1\u0CB0\u0CC1\u0CB5\u0CBE\u0CB0", "\u0CB6\u0CC1\u0C95\u0CCD\u0CB0\u0CB5\u0CBE\u0CB0", "\u0CB6\u0CA8\u0CBF\u0CB5\u0CBE\u0CB0"]
};
var kn_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
    pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
    midnight: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
    noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CB9\u0CCD\u0CA8",
    morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
    afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CB9\u0CCD\u0CA8",
    evening: "\u0CB8\u0C82\u0C9C\u0CC6",
    night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
  },
  abbreviated: {
    am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
    pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
    midnight: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
    noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
    afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    evening: "\u0CB8\u0C82\u0C9C\u0CC6",
    night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
  },
  wide: {
    am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
    pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
    midnight: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
    noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
    afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    evening: "\u0CB8\u0C82\u0C9C\u0CC6",
    night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
  }
};
var kn_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0CAA\u0CC2",
    pm: "\u0C85",
    midnight: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
    noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
    afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    evening: "\u0CB8\u0C82\u0C9C\u0CC6",
    night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
  },
  abbreviated: {
    am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
    pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
    midnight: "\u0CAE\u0CA7\u0CCD\u0CAF \u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
    noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
    afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    evening: "\u0CB8\u0C82\u0C9C\u0CC6",
    night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
  },
  wide: {
    am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
    pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
    midnight: "\u0CAE\u0CA7\u0CCD\u0CAF \u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
    noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
    afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
    evening: "\u0CB8\u0C82\u0C9C\u0CC6",
    night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
  }
};
var kn_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "\u0CA8\u0CC7";
};
var kn_lib_localize_localize = {
  ordinalNumber: kn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: kn_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: kn_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const kn_lib_localize = (kn_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/_lib/match/index.js


var kn_lib_match_matchOrdinalNumberPattern = /^(\d+)(ನೇ|ನೆ)?/i;
var kn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var kn_lib_match_matchEraPatterns = {
  narrow: /^(ಕ್ರಿ.ಪೂ|ಕ್ರಿ.ಶ)/i,
  abbreviated: /^(ಕ್ರಿ\.?\s?ಪೂ\.?|ಕ್ರಿ\.?\s?ಶ\.?|ಪ್ರ\.?\s?ಶ\.?)/i,
  wide: /^(ಕ್ರಿಸ್ತ ಪೂರ್ವ|ಕ್ರಿಸ್ತ ಶಕ|ಪ್ರಸಕ್ತ ಶಕ)/i
};
var kn_lib_match_parseEraPatterns = {
  any: [/^ಪೂ/i, /^(ಶ|ಪ್ರ)/i]
};
var kn_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^ತ್ರೈ[1234]|ತ್ರೈ [1234]| [1234]ತ್ರೈ/i,
  wide: /^[1234](ನೇ)? ತ್ರೈಮಾಸಿಕ/i
};
var kn_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var kn_lib_match_matchMonthPatterns = {
  narrow: /^(ಜೂ|ಜು|ಜ|ಫೆ|ಮಾ|ಏ|ಮೇ|ಆ|ಸೆ|ಅ|ನ|ಡಿ)/i,
  abbreviated: /^(ಜನ|ಫೆಬ್ರ|ಮಾರ್ಚ್|ಏಪ್ರಿ|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗ|ಸೆಪ್ಟೆಂ|ಅಕ್ಟೋ|ನವೆಂ|ಡಿಸೆಂ)/i,
  wide: /^(ಜನವರಿ|ಫೆಬ್ರವರಿ|ಮಾರ್ಚ್|ಏಪ್ರಿಲ್|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗಸ್ಟ್|ಸೆಪ್ಟೆಂಬರ್|ಅಕ್ಟೋಬರ್|ನವೆಂಬರ್|ಡಿಸೆಂಬರ್)/i
};
var kn_lib_match_parseMonthPatterns = {
  narrow: [/^ಜ$/i, /^ಫೆ/i, /^ಮಾ/i, /^ಏ/i, /^ಮೇ/i, /^ಜೂ/i, /^ಜು$/i, /^ಆ/i, /^ಸೆ/i, /^ಅ/i, /^ನ/i, /^ಡಿ/i],
  any: [/^ಜನ/i, /^ಫೆ/i, /^ಮಾ/i, /^ಏ/i, /^ಮೇ/i, /^ಜೂನ್/i, /^ಜುಲೈ/i, /^ಆ/i, /^ಸೆ/i, /^ಅ/i, /^ನ/i, /^ಡಿ/i]
};
var kn_lib_match_matchDayPatterns = {
  narrow: /^(ಭಾ|ಸೋ|ಮ|ಬು|ಗು|ಶು|ಶ)/i,
  short: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
  abbreviated: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
  wide: /^(ಭಾನುವಾರ|ಸೋಮವಾರ|ಮಂಗಳವಾರ|ಬುಧವಾರ|ಗುರುವಾರ|ಶುಕ್ರವಾರ|ಶನಿವಾರ)/i
};
var kn_lib_match_parseDayPatterns = {
  narrow: [/^ಭಾ/i, /^ಸೋ/i, /^ಮ/i, /^ಬು/i, /^ಗು/i, /^ಶು/i, /^ಶ/i],
  any: [/^ಭಾ/i, /^ಸೋ/i, /^ಮ/i, /^ಬು/i, /^ಗು/i, /^ಶು/i, /^ಶ/i]
};
var kn_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ಪೂ|ಅ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i,
  any: /^(ಪೂರ್ವಾಹ್ನ|ಅಪರಾಹ್ನ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i
};
var kn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ಪೂ/i,
    pm: /^ಅ/i,
    midnight: /ಮಧ್ಯರಾತ್ರಿ/i,
    noon: /ಮಧ್ಯಾನ್ಹ/i,
    morning: /ಬೆಳಗ್ಗೆ/i,
    afternoon: /ಮಧ್ಯಾನ್ಹ/i,
    evening: /ಸಂಜೆ/i,
    night: /ರಾತ್ರಿ/i
  }
};
var kn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: kn_lib_match_matchOrdinalNumberPattern,
    parsePattern: kn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: kn_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: kn_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: kn_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: kn_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: kn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: kn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const kn_lib_match = (kn_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/kn/index.js





var kn_locale = {
  code: "kn",
  formatDistance: kn_lib_formatDistance,
  formatLong: kn_lib_formatLong,
  formatRelative: kn_lib_formatRelative,
  localize: kn_lib_localize,
  match: kn_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const kn = (kn_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/formatDistance/index.js
var ko_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "1\uCD08 \uBBF8\uB9CC",
    other: "{{count}}\uCD08 \uBBF8\uB9CC"
  },
  xSeconds: {
    one: "1\uCD08",
    other: "{{count}}\uCD08"
  },
  halfAMinute: "30\uCD08",
  lessThanXMinutes: {
    one: "1\uBD84 \uBBF8\uB9CC",
    other: "{{count}}\uBD84 \uBBF8\uB9CC"
  },
  xMinutes: {
    one: "1\uBD84",
    other: "{{count}}\uBD84"
  },
  aboutXHours: {
    one: "\uC57D 1\uC2DC\uAC04",
    other: "\uC57D {{count}}\uC2DC\uAC04"
  },
  xHours: {
    one: "1\uC2DC\uAC04",
    other: "{{count}}\uC2DC\uAC04"
  },
  xDays: {
    one: "1\uC77C",
    other: "{{count}}\uC77C"
  },
  aboutXWeeks: {
    one: "\uC57D 1\uC8FC",
    other: "\uC57D {{count}}\uC8FC"
  },
  xWeeks: {
    one: "1\uC8FC",
    other: "{{count}}\uC8FC"
  },
  aboutXMonths: {
    one: "\uC57D 1\uAC1C\uC6D4",
    other: "\uC57D {{count}}\uAC1C\uC6D4"
  },
  xMonths: {
    one: "1\uAC1C\uC6D4",
    other: "{{count}}\uAC1C\uC6D4"
  },
  aboutXYears: {
    one: "\uC57D 1\uB144",
    other: "\uC57D {{count}}\uB144"
  },
  xYears: {
    one: "1\uB144",
    other: "{{count}}\uB144"
  },
  overXYears: {
    one: "1\uB144 \uC774\uC0C1",
    other: "{{count}}\uB144 \uC774\uC0C1"
  },
  almostXYears: {
    one: "\uAC70\uC758 1\uB144",
    other: "\uAC70\uC758 {{count}}\uB144"
  }
};
var ko_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = ko_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " \uD6C4";
    } else {
      return result + " \uC804";
    }
  }
  return result;
};
/* harmony default export */ const ko_lib_formatDistance = (ko_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/formatLong/index.js

var ko_lib_formatLong_dateFormats = {
  full: "y\uB144 M\uC6D4 d\uC77C EEEE",
  long: "y\uB144 M\uC6D4 d\uC77C",
  medium: "y.MM.dd",
  short: "y.MM.dd"
};
var ko_lib_formatLong_timeFormats = {
  full: "a H\uC2DC mm\uBD84 ss\uCD08 zzzz",
  long: "a H:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var ko_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var ko_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ko_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ko_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ko_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ko_lib_formatLong = (ko_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/formatRelative/index.js
var ko_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\uC9C0\uB09C' eeee p",
  yesterday: "'\uC5B4\uC81C' p",
  today: "'\uC624\uB298' p",
  tomorrow: "'\uB0B4\uC77C' p",
  nextWeek: "'\uB2E4\uC74C' eeee p",
  other: "P"
};
var ko_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ko_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ko_lib_formatRelative = (ko_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/localize/index.js

var ko_lib_localize_eraValues = {
  narrow: ["BC", "AD"],
  abbreviated: ["BC", "AD"],
  wide: ["\uAE30\uC6D0\uC804", "\uC11C\uAE30"]
};
var ko_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1\uBD84\uAE30", "2\uBD84\uAE30", "3\uBD84\uAE30", "4\uBD84\uAE30"]
};
var ko_lib_localize_monthValues = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
  abbreviated: ["1\uC6D4", "2\uC6D4", "3\uC6D4", "4\uC6D4", "5\uC6D4", "6\uC6D4", "7\uC6D4", "8\uC6D4", "9\uC6D4", "10\uC6D4", "11\uC6D4", "12\uC6D4"],
  wide: ["1\uC6D4", "2\uC6D4", "3\uC6D4", "4\uC6D4", "5\uC6D4", "6\uC6D4", "7\uC6D4", "8\uC6D4", "9\uC6D4", "10\uC6D4", "11\uC6D4", "12\uC6D4"]
};
var ko_lib_localize_dayValues = {
  narrow: ["\uC77C", "\uC6D4", "\uD654", "\uC218", "\uBAA9", "\uAE08", "\uD1A0"],
  short: ["\uC77C", "\uC6D4", "\uD654", "\uC218", "\uBAA9", "\uAE08", "\uD1A0"],
  abbreviated: ["\uC77C", "\uC6D4", "\uD654", "\uC218", "\uBAA9", "\uAE08", "\uD1A0"],
  wide: ["\uC77C\uC694\uC77C", "\uC6D4\uC694\uC77C", "\uD654\uC694\uC77C", "\uC218\uC694\uC77C", "\uBAA9\uC694\uC77C", "\uAE08\uC694\uC77C", "\uD1A0\uC694\uC77C"]
};
var ko_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\uC624\uC804",
    pm: "\uC624\uD6C4",
    midnight: "\uC790\uC815",
    noon: "\uC815\uC624",
    morning: "\uC544\uCE68",
    afternoon: "\uC624\uD6C4",
    evening: "\uC800\uB141",
    night: "\uBC24"
  },
  abbreviated: {
    am: "\uC624\uC804",
    pm: "\uC624\uD6C4",
    midnight: "\uC790\uC815",
    noon: "\uC815\uC624",
    morning: "\uC544\uCE68",
    afternoon: "\uC624\uD6C4",
    evening: "\uC800\uB141",
    night: "\uBC24"
  },
  wide: {
    am: "\uC624\uC804",
    pm: "\uC624\uD6C4",
    midnight: "\uC790\uC815",
    noon: "\uC815\uC624",
    morning: "\uC544\uCE68",
    afternoon: "\uC624\uD6C4",
    evening: "\uC800\uB141",
    night: "\uBC24"
  }
};
var ko_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\uC624\uC804",
    pm: "\uC624\uD6C4",
    midnight: "\uC790\uC815",
    noon: "\uC815\uC624",
    morning: "\uC544\uCE68",
    afternoon: "\uC624\uD6C4",
    evening: "\uC800\uB141",
    night: "\uBC24"
  },
  abbreviated: {
    am: "\uC624\uC804",
    pm: "\uC624\uD6C4",
    midnight: "\uC790\uC815",
    noon: "\uC815\uC624",
    morning: "\uC544\uCE68",
    afternoon: "\uC624\uD6C4",
    evening: "\uC800\uB141",
    night: "\uBC24"
  },
  wide: {
    am: "\uC624\uC804",
    pm: "\uC624\uD6C4",
    midnight: "\uC790\uC815",
    noon: "\uC815\uC624",
    morning: "\uC544\uCE68",
    afternoon: "\uC624\uD6C4",
    evening: "\uC800\uB141",
    night: "\uBC24"
  }
};
var ko_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  switch (unit) {
    case "minute":
    case "second":
      return String(number);
    case "date":
      return number + "\uC77C";
    default:
      return number + "\uBC88\uC9F8";
  }
};
var ko_lib_localize_localize = {
  ordinalNumber: ko_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ko_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ko_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ko_lib_localize = (ko_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/_lib/match/index.js


var ko_lib_match_matchOrdinalNumberPattern = /^(\d+)(일|번째)?/i;
var ko_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ko_lib_match_matchEraPatterns = {
  narrow: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(기원전|서기)/i
};
var ko_lib_match_parseEraPatterns = {
  any: [/^(bc|기원전)/i, /^(ad|서기)/i]
};
var ko_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]사?분기/i
};
var ko_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ko_lib_match_matchMonthPatterns = {
  narrow: /^(1[012]|[123456789])/,
  abbreviated: /^(1[012]|[123456789])월/i,
  wide: /^(1[012]|[123456789])월/i
};
var ko_lib_match_parseMonthPatterns = {
  any: [/^1월?$/, /^2/, /^3/, /^4/, /^5/, /^6/, /^7/, /^8/, /^9/, /^10/, /^11/, /^12/]
};
var ko_lib_match_matchDayPatterns = {
  narrow: /^[일월화수목금토]/,
  short: /^[일월화수목금토]/,
  abbreviated: /^[일월화수목금토]/,
  wide: /^[일월화수목금토]요일/
};
var ko_lib_match_parseDayPatterns = {
  any: [/^일/, /^월/, /^화/, /^수/, /^목/, /^금/, /^토/]
};
var ko_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|오전|오후|자정|정오|아침|저녁|밤)/i
};
var ko_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(am|오전)/i,
    pm: /^(pm|오후)/i,
    midnight: /^자정/i,
    noon: /^정오/i,
    morning: /^아침/i,
    afternoon: /^오후/i,
    evening: /^저녁/i,
    night: /^밤/i
  }
};
var ko_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ko_lib_match_matchOrdinalNumberPattern,
    parsePattern: ko_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ko_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ko_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ko_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ko_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ko_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ko_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ko_lib_match = (ko_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ko/index.js





var ko_locale = {
  code: "ko",
  formatDistance: ko_lib_formatDistance,
  formatLong: ko_lib_formatLong,
  formatRelative: ko_lib_formatRelative,
  localize: ko_lib_localize,
  match: ko_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ko = (ko_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/formatDistance/index.js
var lb_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    standalone: {
      one: "manner w\xE9i eng Sekonn",
      other: "manner w\xE9i {{count}} Sekonnen"
    },
    withPreposition: {
      one: "manner w\xE9i enger Sekonn",
      other: "manner w\xE9i {{count}} Sekonnen"
    }
  },
  xSeconds: {
    standalone: {
      one: "eng Sekonn",
      other: "{{count}} Sekonnen"
    },
    withPreposition: {
      one: "enger Sekonn",
      other: "{{count}} Sekonnen"
    }
  },
  halfAMinute: {
    standalone: "eng hallef Minutt",
    withPreposition: "enger hallwer Minutt"
  },
  lessThanXMinutes: {
    standalone: {
      one: "manner w\xE9i eng Minutt",
      other: "manner w\xE9i {{count}} Minutten"
    },
    withPreposition: {
      one: "manner w\xE9i enger Minutt",
      other: "manner w\xE9i {{count}} Minutten"
    }
  },
  xMinutes: {
    standalone: {
      one: "eng Minutt",
      other: "{{count}} Minutten"
    },
    withPreposition: {
      one: "enger Minutt",
      other: "{{count}} Minutten"
    }
  },
  aboutXHours: {
    standalone: {
      one: "ongef\xE9ier eng Stonn",
      other: "ongef\xE9ier {{count}} Stonnen"
    },
    withPreposition: {
      one: "ongef\xE9ier enger Stonn",
      other: "ongef\xE9ier {{count}} Stonnen"
    }
  },
  xHours: {
    standalone: {
      one: "eng Stonn",
      other: "{{count}} Stonnen"
    },
    withPreposition: {
      one: "enger Stonn",
      other: "{{count}} Stonnen"
    }
  },
  xDays: {
    standalone: {
      one: "een Dag",
      other: "{{count}} Deeg"
    },
    withPreposition: {
      one: "engem Dag",
      other: "{{count}} Deeg"
    }
  },
  aboutXWeeks: {
    standalone: {
      one: "ongef\xE9ier eng Woch",
      other: "ongef\xE9ier {{count}} Wochen"
    },
    withPreposition: {
      one: "ongef\xE9ier enger Woche",
      other: "ongef\xE9ier {{count}} Wochen"
    }
  },
  xWeeks: {
    standalone: {
      one: "eng Woch",
      other: "{{count}} Wochen"
    },
    withPreposition: {
      one: "enger Woch",
      other: "{{count}} Wochen"
    }
  },
  aboutXMonths: {
    standalone: {
      one: "ongef\xE9ier ee Mount",
      other: "ongef\xE9ier {{count}} M\xE9int"
    },
    withPreposition: {
      one: "ongef\xE9ier engem Mount",
      other: "ongef\xE9ier {{count}} M\xE9int"
    }
  },
  xMonths: {
    standalone: {
      one: "ee Mount",
      other: "{{count}} M\xE9int"
    },
    withPreposition: {
      one: "engem Mount",
      other: "{{count}} M\xE9int"
    }
  },
  aboutXYears: {
    standalone: {
      one: "ongef\xE9ier ee Joer",
      other: "ongef\xE9ier {{count}} Joer"
    },
    withPreposition: {
      one: "ongef\xE9ier engem Joer",
      other: "ongef\xE9ier {{count}} Joer"
    }
  },
  xYears: {
    standalone: {
      one: "ee Joer",
      other: "{{count}} Joer"
    },
    withPreposition: {
      one: "engem Joer",
      other: "{{count}} Joer"
    }
  },
  overXYears: {
    standalone: {
      one: "m\xE9i w\xE9i ee Joer",
      other: "m\xE9i w\xE9i {{count}} Joer"
    },
    withPreposition: {
      one: "m\xE9i w\xE9i engem Joer",
      other: "m\xE9i w\xE9i {{count}} Joer"
    }
  },
  almostXYears: {
    standalone: {
      one: "bal ee Joer",
      other: "bal {{count}} Joer"
    },
    withPreposition: {
      one: "bal engem Joer",
      other: "bal {{count}} Joer"
    }
  }
};
var EXCEPTION_CONSONANTS = ["d", "h", "n", "t", "z"];
var VOWELS = ["a,", "e", "i", "o", "u"];
var DIGITS_SPOKEN_N_NEEDED = [0, 1, 2, 3, 8, 9];
var FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED = [40, 50, 60, 70];
function isFinalNNeeded(nextWords) {
  var firstLetter = nextWords.charAt(0).toLowerCase();
  if (VOWELS.indexOf(firstLetter) != -1 || EXCEPTION_CONSONANTS.indexOf(firstLetter) != -1) {
    return true;
  }
  var firstWord = nextWords.split(" ")[0];
  var number = parseInt(firstWord);
  if (!isNaN(number) && DIGITS_SPOKEN_N_NEEDED.indexOf(number % 10) != -1 && FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED.indexOf(parseInt(firstWord.substring(0, 2))) == -1) {
    return true;
  }
  return false;
}
var lb_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = lb_lib_formatDistance_formatDistanceLocale[token];
  var usageGroup = options !== null && options !== void 0 && options.addSuffix ? tokenValue.withPreposition : tokenValue.standalone;
  if (typeof usageGroup === "string") {
    result = usageGroup;
  } else if (count === 1) {
    result = usageGroup.one;
  } else {
    result = usageGroup.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "a" + (isFinalNNeeded(result) ? "n" : "") + " " + result;
    } else {
      return "viru" + (isFinalNNeeded(result) ? "n" : "") + " " + result;
    }
  }
  return result;
};
/* harmony default export */ const lb_lib_formatDistance = (lb_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/formatLong/index.js

var lb_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y",
  // Méindeg, 7. Januar 2018
  long: "do MMMM y",
  // 7. Januar 2018
  medium: "do MMM y",
  // 7. Jan 2018
  short: "dd.MM.yy"
  // 07.01.18
};
var lb_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var lb_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'um' {{time}}",
  long: "{{date}} 'um' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var lb_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: lb_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: lb_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: lb_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const lb_lib_formatLong = (lb_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/formatRelative/index.js
var lb_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var day = date.getUTCDay();
    var result = "'l\xE4schte";
    if (day === 2 || day === 4) {
      result += "n";
    }
    result += "' eeee 'um' p";
    return result;
  },
  yesterday: "'g\xEBschter um' p",
  today: "'haut um' p",
  tomorrow: "'moien um' p",
  nextWeek: "eeee 'um' p",
  other: "P"
};
var lb_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  var format = lb_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const lb_lib_formatRelative = (lb_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/localize/index.js

var lb_lib_localize_eraValues = {
  narrow: ["v.Chr.", "n.Chr."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["viru Christus", "no Christus"]
};
var lb_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. Quartal", "2. Quartal", "3. Quartal", "4. Quartal"]
};
var lb_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "M\xE4e", "Abr", "Mee", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
  wide: ["Januar", "Februar", "M\xE4erz", "Abr\xEBll", "Mee", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"]
};
var lb_lib_localize_dayValues = {
  narrow: ["S", "M", "D", "M", "D", "F", "S"],
  short: ["So", "M\xE9", "D\xEB", "M\xEB", "Do", "Fr", "Sa"],
  abbreviated: ["So.", "M\xE9.", "D\xEB.", "M\xEB.", "Do.", "Fr.", "Sa."],
  wide: ["Sonndeg", "M\xE9indeg", "D\xEBnschdeg", "M\xEBttwoch", "Donneschdeg", "Freideg", "Samschdeg"]
};
var lb_lib_localize_dayPeriodValues = {
  narrow: {
    am: "mo.",
    pm: "nom\xEB.",
    midnight: "M\xEBtternuecht",
    noon: "M\xEBtteg",
    morning: "Moien",
    afternoon: "Nom\xEBtteg",
    evening: "Owend",
    night: "Nuecht"
  },
  abbreviated: {
    am: "moies",
    pm: "nom\xEBttes",
    midnight: "M\xEBtternuecht",
    noon: "M\xEBtteg",
    morning: "Moien",
    afternoon: "Nom\xEBtteg",
    evening: "Owend",
    night: "Nuecht"
  },
  wide: {
    am: "moies",
    pm: "nom\xEBttes",
    midnight: "M\xEBtternuecht",
    noon: "M\xEBtteg",
    morning: "Moien",
    afternoon: "Nom\xEBtteg",
    evening: "Owend",
    night: "Nuecht"
  }
};
var lb_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "mo.",
    pm: "nom.",
    midnight: "M\xEBtternuecht",
    noon: "m\xEBttes",
    morning: "moies",
    afternoon: "nom\xEBttes",
    evening: "owes",
    night: "nuets"
  },
  abbreviated: {
    am: "moies",
    pm: "nom\xEBttes",
    midnight: "M\xEBtternuecht",
    noon: "m\xEBttes",
    morning: "moies",
    afternoon: "nom\xEBttes",
    evening: "owes",
    night: "nuets"
  },
  wide: {
    am: "moies",
    pm: "nom\xEBttes",
    midnight: "M\xEBtternuecht",
    noon: "m\xEBttes",
    morning: "moies",
    afternoon: "nom\xEBttes",
    evening: "owes",
    night: "nuets"
  }
};
var lb_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var lb_lib_localize_localize = {
  ordinalNumber: lb_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: lb_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: lb_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const lb_lib_localize = (lb_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/_lib/match/index.js


var lb_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var lb_lib_match_parseOrdinalNumberPattern = /\d+/i;
var lb_lib_match_matchEraPatterns = {
  narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
  wide: /^(viru Christus|virun eiser Zäitrechnung|no Christus|eiser Zäitrechnung)/i
};
var lb_lib_match_parseEraPatterns = {
  any: [/^v/i, /^n/i]
};
var lb_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? Quartal/i
};
var lb_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var lb_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mäe|abr|mee|jun|jul|aug|sep|okt|nov|dez)/i,
  wide: /^(januar|februar|mäerz|abrëll|mee|juni|juli|august|september|oktober|november|dezember)/i
};
var lb_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mä/i, /^ab/i, /^me/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var lb_lib_match_matchDayPatterns = {
  narrow: /^[smdf]/i,
  short: /^(so|mé|dë|më|do|fr|sa)/i,
  abbreviated: /^(son?|méi?|dën?|mët?|don?|fre?|sam?)\.?/i,
  wide: /^(sonndeg|méindeg|dënschdeg|mëttwoch|donneschdeg|freideg|samschdeg)/i
};
var lb_lib_match_parseDayPatterns = {
  any: [/^so/i, /^mé/i, /^dë/i, /^më/i, /^do/i, /^f/i, /^sa/i]
};
var lb_lib_match_matchDayPeriodPatterns = {
  narrow: /^(mo\.?|nomë\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
  abbreviated: /^(moi\.?|nomët\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
  wide: /^(moies|nomëttes|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i
};
var lb_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^m/i,
    pm: /^n/i,
    midnight: /^Mëtter/i,
    noon: /^mëttes/i,
    morning: /moies/i,
    afternoon: /nomëttes/i,
    // will never be matched. Afternoon is matched by `pm`
    evening: /owes/i,
    night: /nuets/i
    // will never be matched. Night is matched by `pm`
  }
};
var lb_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: lb_lib_match_matchOrdinalNumberPattern,
    parsePattern: lb_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lb_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lb_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lb_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lb_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lb_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lb_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const lb_lib_match = (lb_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lb/index.js





var lb_locale = {
  code: "lb",
  formatDistance: lb_lib_formatDistance,
  formatLong: lb_lib_formatLong,
  formatRelative: lb_lib_formatRelative,
  localize: lb_lib_localize,
  match: lb_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const lb = (lb_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/formatDistance/index.js
var formatDistance_translations = {
  xseconds_other: "sekund\u0117_sekund\u017Ei\u0173_sekundes",
  xminutes_one: "minut\u0117_minut\u0117s_minut\u0119",
  xminutes_other: "minut\u0117s_minu\u010Di\u0173_minutes",
  xhours_one: "valanda_valandos_valand\u0105",
  xhours_other: "valandos_valand\u0173_valandas",
  xdays_one: "diena_dienos_dien\u0105",
  xdays_other: "dienos_dien\u0173_dienas",
  xweeks_one: "savait\u0117_savait\u0117s_savait\u0119",
  xweeks_other: "savait\u0117s_savai\u010Di\u0173_savaites",
  xmonths_one: "m\u0117nuo_m\u0117nesio_m\u0117nes\u012F",
  xmonths_other: "m\u0117nesiai_m\u0117nesi\u0173_m\u0117nesius",
  xyears_one: "metai_met\u0173_metus",
  xyears_other: "metai_met\u0173_metus",
  about: "apie",
  over: "daugiau nei",
  almost: "beveik",
  lessthan: "ma\u017Eiau nei"
};
var translateSeconds = function translateSeconds2(_number, addSuffix, _key, isFuture) {
  if (!addSuffix) {
    return "kelios sekund\u0117s";
  } else {
    return isFuture ? "keli\u0173 sekund\u017Ei\u0173" : "kelias sekundes";
  }
};
var translateSingular = function translateSingular2(_number, addSuffix, key, isFuture) {
  return !addSuffix ? formatDistance_forms(key)[0] : isFuture ? formatDistance_forms(key)[1] : formatDistance_forms(key)[2];
};
var translate = function translate2(number, addSuffix, key, isFuture) {
  var result = number + " ";
  if (number === 1) {
    return result + translateSingular(number, addSuffix, key, isFuture);
  } else if (!addSuffix) {
    return result + (special(number) ? formatDistance_forms(key)[1] : formatDistance_forms(key)[0]);
  } else {
    if (isFuture) {
      return result + formatDistance_forms(key)[1];
    } else {
      return result + (special(number) ? formatDistance_forms(key)[1] : formatDistance_forms(key)[2]);
    }
  }
};
function special(number) {
  return number % 10 === 0 || number > 10 && number < 20;
}
function formatDistance_forms(key) {
  return formatDistance_translations[key].split("_");
}
var lt_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: translateSeconds,
    other: translate
  },
  xSeconds: {
    one: translateSeconds,
    other: translate
  },
  halfAMinute: "pus\u0117 minut\u0117s",
  lessThanXMinutes: {
    one: translateSingular,
    other: translate
  },
  xMinutes: {
    one: translateSingular,
    other: translate
  },
  aboutXHours: {
    one: translateSingular,
    other: translate
  },
  xHours: {
    one: translateSingular,
    other: translate
  },
  xDays: {
    one: translateSingular,
    other: translate
  },
  aboutXWeeks: {
    one: translateSingular,
    other: translate
  },
  xWeeks: {
    one: translateSingular,
    other: translate
  },
  aboutXMonths: {
    one: translateSingular,
    other: translate
  },
  xMonths: {
    one: translateSingular,
    other: translate
  },
  aboutXYears: {
    one: translateSingular,
    other: translate
  },
  xYears: {
    one: translateSingular,
    other: translate
  },
  overXYears: {
    one: translateSingular,
    other: translate
  },
  almostXYears: {
    one: translateSingular,
    other: translate
  }
};
var lt_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var adverb = token.match(/about|over|almost|lessthan/i);
  var unit = adverb ? token.replace(adverb[0], "") : token;
  var isFuture = (options === null || options === void 0 ? void 0 : options.comparison) !== void 0 && options.comparison > 0;
  var result;
  var tokenValue = lt_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + "_one", isFuture);
  } else {
    result = tokenValue.other(count, (options === null || options === void 0 ? void 0 : options.addSuffix) === true, unit.toLowerCase() + "_other", isFuture);
  }
  if (adverb) {
    var _key2 = adverb[0].toLowerCase();
    result = formatDistance_translations[_key2] + " " + result;
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "po " + result;
    } else {
      return "prie\u0161 " + result;
    }
  }
  return result;
};
/* harmony default export */ const lt_lib_formatDistance = (lt_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/formatLong/index.js

var lt_lib_formatLong_dateFormats = {
  full: "y 'm'. MMMM d 'd'., EEEE",
  long: "y 'm'. MMMM d 'd'.",
  medium: "y-MM-dd",
  short: "y-MM-dd"
};
var lt_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var lt_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var lt_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: lt_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: lt_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: lt_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const lt_lib_formatLong = (lt_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/formatRelative/index.js
var lt_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'Pra\u0117jus\u012F' eeee p",
  yesterday: "'Vakar' p",
  today: "'\u0160iandien' p",
  tomorrow: "'Rytoj' p",
  nextWeek: "eeee p",
  other: "P"
};
var lt_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return lt_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const lt_lib_formatRelative = (lt_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/localize/index.js

var lt_lib_localize_eraValues = {
  narrow: ["pr. Kr.", "po Kr."],
  abbreviated: ["pr. Kr.", "po Kr."],
  wide: ["prie\u0161 Krist\u0173", "po Kristaus"]
};
var lt_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["I ketv.", "II ketv.", "III ketv.", "IV ketv."],
  wide: ["I ketvirtis", "II ketvirtis", "III ketvirtis", "IV ketvirtis"]
};
var localize_formattingQuarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["I k.", "II k.", "III k.", "IV k."],
  wide: ["I ketvirtis", "II ketvirtis", "III ketvirtis", "IV ketvirtis"]
};
var lt_lib_localize_monthValues = {
  narrow: ["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"],
  abbreviated: ["saus.", "vas.", "kov.", "bal.", "geg.", "bir\u017E.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod."],
  wide: ["sausis", "vasaris", "kovas", "balandis", "gegu\u017E\u0117", "bir\u017Eelis", "liepa", "rugpj\u016Btis", "rugs\u0117jis", "spalis", "lapkritis", "gruodis"]
};
var lt_lib_localize_formattingMonthValues = {
  narrow: ["S", "V", "K", "B", "G", "B", "L", "R", "R", "S", "L", "G"],
  abbreviated: ["saus.", "vas.", "kov.", "bal.", "geg.", "bir\u017E.", "liep.", "rugp.", "rugs.", "spal.", "lapkr.", "gruod."],
  wide: ["sausio", "vasario", "kovo", "baland\u017Eio", "gegu\u017E\u0117s", "bir\u017Eelio", "liepos", "rugpj\u016B\u010Dio", "rugs\u0117jo", "spalio", "lapkri\u010Dio", "gruod\u017Eio"]
};
var lt_lib_localize_dayValues = {
  narrow: ["S", "P", "A", "T", "K", "P", "\u0160"],
  short: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "\u0160t"],
  abbreviated: ["sk", "pr", "an", "tr", "kt", "pn", "\u0161t"],
  wide: ["sekmadienis", "pirmadienis", "antradienis", "tre\u010Diadienis", "ketvirtadienis", "penktadienis", "\u0161e\u0161tadienis"]
};
var localize_formattingDayValues = {
  narrow: ["S", "P", "A", "T", "K", "P", "\u0160"],
  short: ["Sk", "Pr", "An", "Tr", "Kt", "Pn", "\u0160t"],
  abbreviated: ["sk", "pr", "an", "tr", "kt", "pn", "\u0161t"],
  wide: ["sekmadien\u012F", "pirmadien\u012F", "antradien\u012F", "tre\u010Diadien\u012F", "ketvirtadien\u012F", "penktadien\u012F", "\u0161e\u0161tadien\u012F"]
};
var lt_lib_localize_dayPeriodValues = {
  narrow: {
    am: "pr. p.",
    pm: "pop.",
    midnight: "vidurnaktis",
    noon: "vidurdienis",
    morning: "rytas",
    afternoon: "diena",
    evening: "vakaras",
    night: "naktis"
  },
  abbreviated: {
    am: "prie\u0161piet",
    pm: "popiet",
    midnight: "vidurnaktis",
    noon: "vidurdienis",
    morning: "rytas",
    afternoon: "diena",
    evening: "vakaras",
    night: "naktis"
  },
  wide: {
    am: "prie\u0161piet",
    pm: "popiet",
    midnight: "vidurnaktis",
    noon: "vidurdienis",
    morning: "rytas",
    afternoon: "diena",
    evening: "vakaras",
    night: "naktis"
  }
};
var lt_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "pr. p.",
    pm: "pop.",
    midnight: "vidurnaktis",
    noon: "perpiet",
    morning: "rytas",
    afternoon: "popiet\u0117",
    evening: "vakaras",
    night: "naktis"
  },
  abbreviated: {
    am: "prie\u0161piet",
    pm: "popiet",
    midnight: "vidurnaktis",
    noon: "perpiet",
    morning: "rytas",
    afternoon: "popiet\u0117",
    evening: "vakaras",
    night: "naktis"
  },
  wide: {
    am: "prie\u0161piet",
    pm: "popiet",
    midnight: "vidurnaktis",
    noon: "perpiet",
    morning: "rytas",
    afternoon: "popiet\u0117",
    evening: "vakaras",
    night: "naktis"
  }
};
var lt_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "-oji";
};
var lt_lib_localize_localize = {
  ordinalNumber: lt_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_quarterValues,
    defaultWidth: "wide",
    formattingValues: localize_formattingQuarterValues,
    defaultFormattingWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: lt_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_dayValues,
    defaultWidth: "wide",
    formattingValues: localize_formattingDayValues,
    defaultFormattingWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: lt_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: lt_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const lt_lib_localize = (lt_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/_lib/match/index.js


var lt_lib_match_matchOrdinalNumberPattern = /^(\d+)(-oji)?/i;
var lt_lib_match_parseOrdinalNumberPattern = /\d+/i;
var lt_lib_match_matchEraPatterns = {
  narrow: /^p(r|o)\.?\s?(kr\.?|me)/i,
  abbreviated: /^(pr\.\s?(kr\.|m\.\s?e\.)|po\s?kr\.|mūsų eroje)/i,
  wide: /^(prieš Kristų|prieš mūsų erą|po Kristaus|mūsų eroje)/i
};
var lt_lib_match_parseEraPatterns = {
  wide: [/prieš/i, /(po|mūsų)/i],
  any: [/^pr/i, /^(po|m)/i]
};
var lt_lib_match_matchQuarterPatterns = {
  narrow: /^([1234])/i,
  abbreviated: /^(I|II|III|IV)\s?ketv?\.?/i,
  wide: /^(I|II|III|IV)\s?ketvirtis/i
};
var lt_lib_match_parseQuarterPatterns = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/I$/i, /II$/i, /III/i, /IV/i]
};
var lt_lib_match_matchMonthPatterns = {
  narrow: /^[svkbglr]/i,
  abbreviated: /^(saus\.|vas\.|kov\.|bal\.|geg\.|birž\.|liep\.|rugp\.|rugs\.|spal\.|lapkr\.|gruod\.)/i,
  wide: /^(sausi(s|o)|vasari(s|o)|kov(a|o)s|balandž?i(s|o)|gegužės?|birželi(s|o)|liep(a|os)|rugpjū(t|č)i(s|o)|rugsėj(is|o)|spali(s|o)|lapkri(t|č)i(s|o)|gruodž?i(s|o))/i
};
var lt_lib_match_parseMonthPatterns = {
  narrow: [/^s/i, /^v/i, /^k/i, /^b/i, /^g/i, /^b/i, /^l/i, /^r/i, /^r/i, /^s/i, /^l/i, /^g/i],
  any: [/^saus/i, /^vas/i, /^kov/i, /^bal/i, /^geg/i, /^birž/i, /^liep/i, /^rugp/i, /^rugs/i, /^spal/i, /^lapkr/i, /^gruod/i]
};
var lt_lib_match_matchDayPatterns = {
  narrow: /^[spatkš]/i,
  short: /^(sk|pr|an|tr|kt|pn|št)/i,
  abbreviated: /^(sk|pr|an|tr|kt|pn|št)/i,
  wide: /^(sekmadien(is|į)|pirmadien(is|į)|antradien(is|į)|trečiadien(is|į)|ketvirtadien(is|į)|penktadien(is|į)|šeštadien(is|į))/i
};
var lt_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^p/i, /^a/i, /^t/i, /^k/i, /^p/i, /^š/i],
  wide: [/^se/i, /^pi/i, /^an/i, /^tr/i, /^ke/i, /^pe/i, /^še/i],
  any: [/^sk/i, /^pr/i, /^an/i, /^tr/i, /^kt/i, /^pn/i, /^št/i]
};
var lt_lib_match_matchDayPeriodPatterns = {
  narrow: /^(pr.\s?p.|pop.|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i,
  any: /^(priešpiet|popiet$|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i
};
var lt_lib_match_parseDayPeriodPatterns = {
  narrow: {
    am: /^pr/i,
    pm: /^pop./i,
    midnight: /^vidurnaktis/i,
    noon: /^(vidurdienis|perp)/i,
    morning: /rytas/i,
    afternoon: /(die|popietė)/i,
    evening: /vakaras/i,
    night: /naktis/i
  },
  any: {
    am: /^pr/i,
    pm: /^popiet$/i,
    midnight: /^vidurnaktis/i,
    noon: /^(vidurdienis|perp)/i,
    morning: /rytas/i,
    afternoon: /(die|popietė)/i,
    evening: /vakaras/i,
    night: /naktis/i
  }
};
var lt_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: lt_lib_match_matchOrdinalNumberPattern,
    parsePattern: lt_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lt_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lt_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lt_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lt_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lt_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: lt_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const lt_lib_match = (lt_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lt/index.js





var lt_locale = {
  code: "lt",
  formatDistance: lt_lib_formatDistance,
  formatLong: lt_lib_formatLong,
  formatRelative: lt_lib_formatRelative,
  localize: lt_lib_localize,
  match: lt_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const lt = (lt_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/formatDistance/index.js
function _lib_formatDistance_buildLocalizeTokenFn(schema) {
  return function(count, options) {
    if (count === 1) {
      if (options !== null && options !== void 0 && options.addSuffix) {
        return schema.one[0].replace("{{time}}", schema.one[2]);
      } else {
        return schema.one[0].replace("{{time}}", schema.one[1]);
      }
    } else {
      var rem = count % 10 === 1 && count % 100 !== 11;
      if (options !== null && options !== void 0 && options.addSuffix) {
        return schema.other[0].replace("{{time}}", rem ? schema.other[3] : schema.other[4]).replace("{{count}}", String(count));
      } else {
        return schema.other[0].replace("{{time}}", rem ? schema.other[1] : schema.other[2]).replace("{{count}}", String(count));
      }
    }
  };
}
var lv_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["maz\u0101k par {{time}}", "sekundi", "sekundi"],
    other: ["maz\u0101k nek\u0101 {{count}} {{time}}", "sekunde", "sekundes", "sekundes", "sekund\u0113m"]
  }),
  xSeconds: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["1 {{time}}", "sekunde", "sekundes"],
    other: ["{{count}} {{time}}", "sekunde", "sekundes", "sekundes", "sekund\u0113m"]
  }),
  halfAMinute: function halfAMinute(_count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      return "pusmin\u016Btes";
    } else {
      return "pusmin\u016Bte";
    }
  },
  lessThanXMinutes: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["maz\u0101k par {{time}}", "min\u016Bti", "min\u016Bti"],
    other: ["maz\u0101k nek\u0101 {{count}} {{time}}", "min\u016Bte", "min\u016Btes", "min\u016Btes", "min\u016Bt\u0113m"]
  }),
  xMinutes: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["1 {{time}}", "min\u016Bte", "min\u016Btes"],
    other: ["{{count}} {{time}}", "min\u016Bte", "min\u016Btes", "min\u016Btes", "min\u016Bt\u0113m"]
  }),
  aboutXHours: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["apm\u0113ram 1 {{time}}", "stunda", "stundas"],
    other: ["apm\u0113ram {{count}} {{time}}", "stunda", "stundas", "stundas", "stund\u0101m"]
  }),
  xHours: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["1 {{time}}", "stunda", "stundas"],
    other: ["{{count}} {{time}}", "stunda", "stundas", "stundas", "stund\u0101m"]
  }),
  xDays: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["1 {{time}}", "diena", "dienas"],
    other: ["{{count}} {{time}}", "diena", "dienas", "dienas", "dien\u0101m"]
  }),
  aboutXWeeks: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["apm\u0113ram 1 {{time}}", "ned\u0113\u013Ca", "ned\u0113\u013Cas"],
    other: ["apm\u0113ram {{count}} {{time}}", "ned\u0113\u013Ca", "ned\u0113\u013Cu", "ned\u0113\u013Cas", "ned\u0113\u013C\u0101m"]
  }),
  xWeeks: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["1 {{time}}", "ned\u0113\u013Ca", "ned\u0113\u013Cas"],
    other: [
      "{{count}} {{time}}",
      // TODO
      "ned\u0113\u013Ca",
      "ned\u0113\u013Cu",
      "ned\u0113\u013Cas",
      "ned\u0113\u013C\u0101m"
    ]
  }),
  aboutXMonths: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["apm\u0113ram 1 {{time}}", "m\u0113nesis", "m\u0113ne\u0161a"],
    other: ["apm\u0113ram {{count}} {{time}}", "m\u0113nesis", "m\u0113ne\u0161i", "m\u0113ne\u0161a", "m\u0113ne\u0161iem"]
  }),
  xMonths: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["1 {{time}}", "m\u0113nesis", "m\u0113ne\u0161a"],
    other: ["{{count}} {{time}}", "m\u0113nesis", "m\u0113ne\u0161i", "m\u0113ne\u0161a", "m\u0113ne\u0161iem"]
  }),
  aboutXYears: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["apm\u0113ram 1 {{time}}", "gads", "gada"],
    other: ["apm\u0113ram {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
  }),
  xYears: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["1 {{time}}", "gads", "gada"],
    other: ["{{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
  }),
  overXYears: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["ilg\u0101k par 1 {{time}}", "gadu", "gadu"],
    other: ["vair\u0101k nek\u0101 {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
  }),
  almostXYears: _lib_formatDistance_buildLocalizeTokenFn({
    one: ["gandr\u012Bz 1 {{time}}", "gads", "gada"],
    other: ["vair\u0101k nek\u0101 {{count}} {{time}}", "gads", "gadi", "gada", "gadiem"]
  })
};
var lv_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result = lv_lib_formatDistance_formatDistanceLocale[token](count, options);
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "p\u0113c " + result;
    } else {
      return "pirms " + result;
    }
  }
  return result;
};
/* harmony default export */ const lv_lib_formatDistance = (lv_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/formatLong/index.js

var lv_lib_formatLong_dateFormats = {
  full: "EEEE, y. 'gada' d. MMMM",
  long: "y. 'gada' d. MMMM",
  medium: "dd.MM.y.",
  short: "dd.MM.y."
};
var lv_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var lv_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'plkst.' {{time}}",
  long: "{{date}} 'plkst.' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var lv_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: lv_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: lv_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: lv_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const lv_lib_formatLong = (lv_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/formatRelative/index.js

var _lib_formatRelative_weekdays = ["sv\u0113tdien\u0101", "pirmdien\u0101", "otrdien\u0101", "tre\u0161dien\u0101", "ceturtdien\u0101", "piektdien\u0101", "sestdien\u0101"];
var lv_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    if (isSameUTCWeek(date, baseDate, options)) {
      return "eeee 'plkst.' p";
    }
    var weekday = _lib_formatRelative_weekdays[date.getUTCDay()];
    return "'Pag\u0101ju\u0161\u0101 " + weekday + " plkst.' p";
  },
  yesterday: "'Vakar plkst.' p",
  today: "'\u0160odien plkst.' p",
  tomorrow: "'R\u012Bt plkst.' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    if (isSameUTCWeek(date, baseDate, options)) {
      return "eeee 'plkst.' p";
    }
    var weekday = _lib_formatRelative_weekdays[date.getUTCDay()];
    return "'N\u0101kamaj\u0101 " + weekday + " plkst.' p";
  },
  other: "P"
};
var lv_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = lv_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const lv_lib_formatRelative = (lv_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/localize/index.js

var lv_lib_localize_eraValues = {
  narrow: ["p.m.\u0113", "m.\u0113"],
  abbreviated: ["p. m. \u0113.", "m. \u0113."],
  wide: ["pirms m\u016Bsu \u0113ras", "m\u016Bsu \u0113r\u0101"]
};
var lv_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. cet.", "2. cet.", "3. cet.", "4. cet."],
  wide: ["pirmais ceturksnis", "otrais ceturksnis", "tre\u0161ais ceturksnis", "ceturtais ceturksnis"]
};
var _lib_localize_formattingQuarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. cet.", "2. cet.", "3. cet.", "4. cet."],
  wide: ["pirmaj\u0101 ceturksn\u012B", "otraj\u0101 ceturksn\u012B", "tre\u0161aj\u0101 ceturksn\u012B", "ceturtaj\u0101 ceturksn\u012B"]
};
var lv_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["janv.", "febr.", "marts", "apr.", "maijs", "j\u016Bn.", "j\u016Bl.", "aug.", "sept.", "okt.", "nov.", "dec."],
  wide: ["janv\u0101ris", "febru\u0101ris", "marts", "apr\u012Blis", "maijs", "j\u016Bnijs", "j\u016Blijs", "augusts", "septembris", "oktobris", "novembris", "decembris"]
};
var lv_lib_localize_formattingMonthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["janv.", "febr.", "mart\u0101", "apr.", "maijs", "j\u016Bn.", "j\u016Bl.", "aug.", "sept.", "okt.", "nov.", "dec."],
  wide: ["janv\u0101r\u012B", "febru\u0101r\u012B", "mart\u0101", "apr\u012Bl\u012B", "maij\u0101", "j\u016Bnij\u0101", "j\u016Blij\u0101", "august\u0101", "septembr\u012B", "oktobr\u012B", "novembr\u012B", "decembr\u012B"]
};
var lv_lib_localize_dayValues = {
  narrow: ["S", "P", "O", "T", "C", "P", "S"],
  short: ["Sv", "P", "O", "T", "C", "Pk", "S"],
  abbreviated: ["sv\u0113td.", "pirmd.", "otrd.", "tre\u0161d.", "ceturtd.", "piektd.", "sestd."],
  wide: ["sv\u0113tdiena", "pirmdiena", "otrdiena", "tre\u0161diena", "ceturtdiena", "piektdiena", "sestdiena"]
};
var _lib_localize_formattingDayValues = {
  narrow: ["S", "P", "O", "T", "C", "P", "S"],
  short: ["Sv", "P", "O", "T", "C", "Pk", "S"],
  abbreviated: ["sv\u0113td.", "pirmd.", "otrd.", "tre\u0161d.", "ceturtd.", "piektd.", "sestd."],
  wide: ["sv\u0113tdien\u0101", "pirmdien\u0101", "otrdien\u0101", "tre\u0161dien\u0101", "ceturtdien\u0101", "piektdien\u0101", "sestdien\u0101"]
};
var lv_lib_localize_dayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "pusn.",
    noon: "pusd.",
    morning: "r\u012Bts",
    afternoon: "diena",
    evening: "vakars",
    night: "nakts"
  },
  abbreviated: {
    am: "am",
    pm: "pm",
    midnight: "pusn.",
    noon: "pusd.",
    morning: "r\u012Bts",
    afternoon: "p\u0113cpusd.",
    evening: "vakars",
    night: "nakts"
  },
  wide: {
    am: "am",
    pm: "pm",
    midnight: "pusnakts",
    noon: "pusdienlaiks",
    morning: "r\u012Bts",
    afternoon: "p\u0113cpusdiena",
    evening: "vakars",
    night: "nakts"
  }
};
var lv_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "pusn.",
    noon: "pusd.",
    morning: "r\u012Bt\u0101",
    afternoon: "dien\u0101",
    evening: "vakar\u0101",
    night: "nakt\u012B"
  },
  abbreviated: {
    am: "am",
    pm: "pm",
    midnight: "pusn.",
    noon: "pusd.",
    morning: "r\u012Bt\u0101",
    afternoon: "p\u0113cpusd.",
    evening: "vakar\u0101",
    night: "nakt\u012B"
  },
  wide: {
    am: "am",
    pm: "pm",
    midnight: "pusnakt\u012B",
    noon: "pusdienlaik\u0101",
    morning: "r\u012Bt\u0101",
    afternoon: "p\u0113cpusdien\u0101",
    evening: "vakar\u0101",
    night: "nakt\u012B"
  }
};
var lv_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var lv_lib_localize_localize = {
  ordinalNumber: lv_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_quarterValues,
    defaultWidth: "wide",
    formattingValues: _lib_localize_formattingQuarterValues,
    defaultFormattingWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: lv_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_dayValues,
    defaultWidth: "wide",
    formattingValues: _lib_localize_formattingDayValues,
    defaultFormattingWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: lv_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: lv_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const lv_lib_localize = (lv_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/_lib/match/index.js


var lv_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var lv_lib_match_parseOrdinalNumberPattern = /\d+/i;
var lv_lib_match_matchEraPatterns = {
  narrow: /^(p\.m\.ē|m\.ē)/i,
  abbreviated: /^(p\. m\. ē\.|m\. ē\.)/i,
  wide: /^(pirms mūsu ēras|mūsu ērā)/i
};
var lv_lib_match_parseEraPatterns = {
  any: [/^p/i, /^m/i]
};
var lv_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](\. cet\.)/i,
  wide: /^(pirma(is|jā)|otra(is|jā)|treša(is|jā)|ceturta(is|jā)) ceturksn(is|ī)/i
};
var lv_lib_match_parseQuarterPatterns = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i],
  abbreviated: [/^1/i, /^2/i, /^3/i, /^4/i],
  wide: [/^p/i, /^o/i, /^t/i, /^c/i]
};
var lv_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(janv\.|febr\.|marts|apr\.|maijs|jūn\.|jūl\.|aug\.|sept\.|okt\.|nov\.|dec\.)/i,
  wide: /^(janvār(is|ī)|februār(is|ī)|mart[sā]|aprīl(is|ī)|maij[sā]|jūnij[sā]|jūlij[sā]|august[sā]|septembr(is|ī)|oktobr(is|ī)|novembr(is|ī)|decembr(is|ī))/i
};
var lv_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jūn/i, /^jūl/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var lv_lib_match_matchDayPatterns = {
  narrow: /^[spotc]/i,
  short: /^(sv|pi|o|t|c|pk|s)/i,
  abbreviated: /^(svētd\.|pirmd\.|otrd.\|trešd\.|ceturtd\.|piektd\.|sestd\.)/i,
  wide: /^(svētdien(a|ā)|pirmdien(a|ā)|otrdien(a|ā)|trešdien(a|ā)|ceturtdien(a|ā)|piektdien(a|ā)|sestdien(a|ā))/i
};
var lv_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^p/i, /^o/i, /^t/i, /^c/i, /^p/i, /^s/i],
  any: [/^sv/i, /^pi/i, /^o/i, /^t/i, /^c/i, /^p/i, /^se/i]
};
var lv_lib_match_matchDayPeriodPatterns = {
  narrow: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|dien(a|ā)|vakar(s|ā)|nakt(s|ī))/,
  abbreviated: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|pēcpusd\.|vakar(s|ā)|nakt(s|ī))/,
  wide: /^(am|pm|pusnakt(s|ī)|pusdienlaik(s|ā)|rīt(s|ā)|pēcpusdien(a|ā)|vakar(s|ā)|nakt(s|ī))/i
};
var lv_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^pusn/i,
    noon: /^pusd/i,
    morning: /^r/i,
    afternoon: /^(d|pēc)/i,
    evening: /^v/i,
    night: /^n/i
  }
};
var lv_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: lv_lib_match_matchOrdinalNumberPattern,
    parsePattern: lv_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lv_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lv_lib_match_parseQuarterPatterns,
    defaultParseWidth: "wide",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lv_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lv_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: lv_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: lv_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const lv_lib_match = (lv_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/lv/index.js





var lv_locale = {
  code: "lv",
  formatDistance: lv_lib_formatDistance,
  formatLong: lv_lib_formatLong,
  formatRelative: lv_lib_formatRelative,
  localize: lv_lib_localize,
  match: lv_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const lv = (lv_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/formatDistance/index.js
var mk_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u043F\u043E\u043C\u0430\u043B\u043A\u0443 \u043E\u0434 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
    other: "\u043F\u043E\u043C\u0430\u043B\u043A\u0443 \u043E\u0434 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
  },
  xSeconds: {
    one: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
    other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
  },
  halfAMinute: "\u043F\u043E\u043B\u043E\u0432\u0438\u043D\u0430 \u043C\u0438\u043D\u0443\u0442\u0430",
  lessThanXMinutes: {
    one: "\u043F\u043E\u043C\u0430\u043B\u043A\u0443 \u043E\u0434 \u043C\u0438\u043D\u0443\u0442\u0430",
    other: "\u043F\u043E\u043C\u0430\u043B\u043A\u0443 \u043E\u0434 {{count}} \u043C\u0438\u043D\u0443\u0442\u0438"
  },
  xMinutes: {
    one: "1 \u043C\u0438\u043D\u0443\u0442\u0430",
    other: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0438"
  },
  aboutXHours: {
    one: "\u043E\u043A\u043E\u043B\u0443 1 \u0447\u0430\u0441",
    other: "\u043E\u043A\u043E\u043B\u0443 {{count}} \u0447\u0430\u0441\u0430"
  },
  xHours: {
    one: "1 \u0447\u0430\u0441",
    other: "{{count}} \u0447\u0430\u0441\u0430"
  },
  xDays: {
    one: "1 \u0434\u0435\u043D",
    other: "{{count}} \u0434\u0435\u043D\u0430"
  },
  aboutXWeeks: {
    one: "\u043E\u043A\u043E\u043B\u0443 1 \u043D\u0435\u0434\u0435\u043B\u0430",
    other: "\u043E\u043A\u043E\u043B\u0443 {{count}} \u043C\u0435\u0441\u0435\u0446\u0438"
  },
  xWeeks: {
    one: "1 \u043D\u0435\u0434\u0435\u043B\u0430",
    other: "{{count}} \u043D\u0435\u0434\u0435\u043B\u0438"
  },
  aboutXMonths: {
    one: "\u043E\u043A\u043E\u043B\u0443 1 \u043C\u0435\u0441\u0435\u0446",
    other: "\u043E\u043A\u043E\u043B\u0443 {{count}} \u043D\u0435\u0434\u0435\u043B\u0438"
  },
  xMonths: {
    one: "1 \u043C\u0435\u0441\u0435\u0446",
    other: "{{count}} \u043C\u0435\u0441\u0435\u0446\u0438"
  },
  aboutXYears: {
    one: "\u043E\u043A\u043E\u043B\u0443 1 \u0433\u043E\u0434\u0438\u043D\u0430",
    other: "\u043E\u043A\u043E\u043B\u0443 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
  },
  xYears: {
    one: "1 \u0433\u043E\u0434\u0438\u043D\u0430",
    other: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
  },
  overXYears: {
    one: "\u043F\u043E\u0432\u0435\u045C\u0435 \u043E\u0434 1 \u0433\u043E\u0434\u0438\u043D\u0430",
    other: "\u043F\u043E\u0432\u0435\u045C\u0435 \u043E\u0434 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
  },
  almostXYears: {
    one: "\u0431\u0435\u0437\u043C\u0430\u043B\u043A\u0443 1 \u0433\u043E\u0434\u0438\u043D\u0430",
    other: "\u0431\u0435\u0437\u043C\u0430\u043B\u043A\u0443 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
  }
};
var mk_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = mk_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0437\u0430 " + result;
    } else {
      return "\u043F\u0440\u0435\u0434 " + result;
    }
  }
  return result;
};
/* harmony default export */ const mk_lib_formatDistance = (mk_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/formatLong/index.js

var mk_lib_formatLong_dateFormats = {
  full: "EEEE, dd MMMM yyyy",
  long: "dd MMMM yyyy",
  medium: "dd MMM yyyy",
  short: "dd/MM/yyyy"
};
var mk_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "H:mm"
};
var mk_lib_formatLong_dateTimeFormats = {
  any: "{{date}} {{time}}"
};
var mk_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: mk_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: mk_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: mk_lib_formatLong_dateTimeFormats,
    defaultWidth: "any"
  })
};
/* harmony default export */ const mk_lib_formatLong = (mk_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/formatRelative/index.js

var mk_lib_formatRelative_weekdays = ["\u043D\u0435\u0434\u0435\u043B\u0430", "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A", "\u0432\u0442\u043E\u0440\u043D\u0438\u043A", "\u0441\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0440\u0442\u043E\u043A", "\u043F\u0435\u0442\u043E\u043A", "\u0441\u0430\u0431\u043E\u0442\u0430"];
function mk_lib_formatRelative_lastWeek(day) {
  var weekday = mk_lib_formatRelative_weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'\u043C\u0438\u043D\u0430\u0442\u0430\u0442\u0430 " + weekday + " \u0432\u043E' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'\u043C\u0438\u043D\u0430\u0442\u0438\u043E\u0442 " + weekday + " \u0432\u043E' p";
  }
}
function mk_lib_formatRelative_thisWeek(day) {
  var weekday = mk_lib_formatRelative_weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'\u043E\u0432\u0430 " + weekday + " \u0432o' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'\u043E\u0432\u043E\u0458 " + weekday + " \u0432o' p";
  }
}
function mk_lib_formatRelative_nextWeek(day) {
  var weekday = mk_lib_formatRelative_weekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'\u0441\u043B\u0435\u0434\u043D\u0430\u0442\u0430 " + weekday + " \u0432o' p";
    case 1:
    case 2:
    case 4:
    case 5:
      return "'\u0441\u043B\u0435\u0434\u043D\u0438\u043E\u0442 " + weekday + " \u0432o' p";
  }
}
var mk_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return mk_lib_formatRelative_thisWeek(day);
    } else {
      return mk_lib_formatRelative_lastWeek(day);
    }
  },
  yesterday: "'\u0432\u0447\u0435\u0440\u0430 \u0432\u043E' p",
  today: "'\u0434\u0435\u043D\u0435\u0441 \u0432\u043E' p",
  tomorrow: "'\u0443\u0442\u0440\u0435 \u0432\u043E' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return mk_lib_formatRelative_thisWeek(day);
    } else {
      return mk_lib_formatRelative_nextWeek(day);
    }
  },
  other: "P"
};
var mk_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = mk_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const mk_lib_formatRelative = (mk_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/localize/index.js

var mk_lib_localize_eraValues = {
  narrow: ["\u043F\u0440.\u043D.\u0435.", "\u043D.\u0435."],
  abbreviated: ["\u043F\u0440\u0435\u0434 \u043D. \u0435.", "\u043D. \u0435."],
  wide: ["\u043F\u0440\u0435\u0434 \u043D\u0430\u0448\u0430\u0442\u0430 \u0435\u0440\u0430", "\u043D\u0430\u0448\u0430\u0442\u0430 \u0435\u0440\u0430"]
};
var mk_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-\u0432\u0438 \u043A\u0432.", "2-\u0440\u0438 \u043A\u0432.", "3-\u0442\u0438 \u043A\u0432.", "4-\u0442\u0438 \u043A\u0432."],
  wide: ["1-\u0432\u0438 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "2-\u0440\u0438 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "3-\u0442\u0438 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "4-\u0442\u0438 \u043A\u0432\u0430\u0440\u0442\u0430\u043B"]
};
var mk_lib_localize_monthValues = {
  abbreviated: ["\u0458\u0430\u043D", "\u0444\u0435\u0432", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043F\u0442", "\u043E\u043A\u0442", "\u043D\u043E\u0435\u043C", "\u0434\u0435\u043A"],
  wide: ["\u0458\u0430\u043D\u0443\u0430\u0440\u0438", "\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0438\u043B", "\u043C\u0430\u0458", "\u0458\u0443\u043D\u0438", "\u0458\u0443\u043B\u0438", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438", "\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438", "\u043D\u043E\u0435\u043C\u0432\u0440\u0438", "\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438"]
};
var mk_lib_localize_dayValues = {
  narrow: ["\u041D", "\u041F", "\u0412", "\u0421", "\u0427", "\u041F", "\u0421"],
  short: ["\u043D\u0435", "\u043F\u043E", "\u0432\u0442", "\u0441\u0440", "\u0447\u0435", "\u043F\u0435", "\u0441\u0430"],
  abbreviated: ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0432\u0442\u043E", "\u0441\u0440\u0435", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u0430\u0431"],
  wide: ["\u043D\u0435\u0434\u0435\u043B\u0430", "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A", "\u0432\u0442\u043E\u0440\u043D\u0438\u043A", "\u0441\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0440\u0442\u043E\u043A", "\u043F\u0435\u0442\u043E\u043A", "\u0441\u0430\u0431\u043E\u0442\u0430"]
};
var mk_lib_localize_dayPeriodValues = {
  wide: {
    am: "\u043F\u0440\u0435\u0442\u043F\u043B\u0430\u0434\u043D\u0435",
    pm: "\u043F\u043E\u043F\u043B\u0430\u0434\u043D\u0435",
    midnight: "\u043F\u043E\u043B\u043D\u043E\u045C",
    noon: "\u043D\u0430\u043F\u043B\u0430\u0434\u043D\u0435",
    morning: "\u043D\u0430\u0443\u0442\u0440\u043E",
    afternoon: "\u043F\u043E\u043F\u043B\u0430\u0434\u043D\u0435",
    evening: "\u043D\u0430\u0432\u0435\u0447\u0435\u0440",
    night: "\u043D\u043E\u045C\u0435"
  }
};
var mk_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "-\u0432\u0438";
      case 2:
        return number + "-\u0440\u0438";
      case 7:
      case 8:
        return number + "-\u043C\u0438";
    }
  }
  return number + "-\u0442\u0438";
};
var mk_lib_localize_localize = {
  ordinalNumber: mk_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: mk_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const mk_lib_localize = (mk_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/_lib/match/index.js


var mk_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?[врмт][и])?/i;
var mk_lib_match_parseOrdinalNumberPattern = /\d+/i;
var mk_lib_match_matchEraPatterns = {
  narrow: /^((пр)?н\.?\s?е\.?)/i,
  abbreviated: /^((пр)?н\.?\s?е\.?)/i,
  wide: /^(пред нашата ера|нашата ера)/i
};
var mk_lib_match_parseEraPatterns = {
  any: [/^п/i, /^н/i]
};
var mk_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[врт]?и?)? кв.?/i,
  wide: /^[1234](-?[врт]?и?)? квартал/i
};
var mk_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var mk_lib_match_matchDayPatterns = {
  narrow: /^[нпвсч]/i,
  short: /^(не|по|вт|ср|че|пе|са)/i,
  abbreviated: /^(нед|пон|вто|сре|чет|пет|саб)/i,
  wide: /^(недела|понеделник|вторник|среда|четврток|петок|сабота)/i
};
var mk_lib_match_parseDayPatterns = {
  narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н[ед]/i, /^п[он]/i, /^вт/i, /^ср/i, /^ч[ет]/i, /^п[ет]/i, /^с[аб]/i]
};
var mk_lib_match_matchMonthPatterns = {
  abbreviated: /^(јан|фев|мар|апр|мај|јун|јул|авг|сеп|окт|ноем|дек)/i,
  wide: /^(јануари|февруари|март|април|мај|јуни|јули|август|септември|октомври|ноември|декември)/i
};
var mk_lib_match_parseMonthPatterns = {
  any: [/^ја/i, /^Ф/i, /^мар/i, /^ап/i, /^мај/i, /^јун/i, /^јул/i, /^ав/i, /^се/i, /^окт/i, /^но/i, /^де/i]
};
var mk_lib_match_matchDayPeriodPatterns = {
  any: /^(претп|попл|полноќ|утро|пладне|вечер|ноќ)/i
};
var mk_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /претпладне/i,
    pm: /попладне/i,
    midnight: /полноќ/i,
    noon: /напладне/i,
    morning: /наутро/i,
    afternoon: /попладне/i,
    evening: /навечер/i,
    night: /ноќе/i
  }
};
var mk_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: mk_lib_match_matchOrdinalNumberPattern,
    parsePattern: mk_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mk_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mk_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mk_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mk_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mk_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: mk_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const mk_lib_match = (mk_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mk/index.js





var mk_locale = {
  code: "mk",
  formatDistance: mk_lib_formatDistance,
  formatLong: mk_lib_formatLong,
  formatRelative: mk_lib_formatRelative,
  localize: mk_lib_localize,
  match: mk_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const mk = (mk_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/formatDistance/index.js
var mn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0441\u0435\u043A\u0443\u043D\u0434 \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439",
    other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439"
  },
  xSeconds: {
    one: "1 \u0441\u0435\u043A\u0443\u043D\u0434",
    other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
  },
  halfAMinute: "\u0445\u0430\u0433\u0430\u0441 \u043C\u0438\u043D\u0443\u0442",
  lessThanXMinutes: {
    one: "\u043C\u0438\u043D\u0443\u0442 \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439",
    other: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439"
  },
  xMinutes: {
    one: "1 \u043C\u0438\u043D\u0443\u0442",
    other: "{{count}} \u043C\u0438\u043D\u0443\u0442"
  },
  aboutXHours: {
    one: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 1 \u0446\u0430\u0433",
    other: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 {{count}} \u0446\u0430\u0433"
  },
  xHours: {
    one: "1 \u0446\u0430\u0433",
    other: "{{count}} \u0446\u0430\u0433"
  },
  xDays: {
    one: "1 \u04E9\u0434\u04E9\u0440",
    other: "{{count}} \u04E9\u0434\u04E9\u0440"
  },
  aboutXWeeks: {
    one: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 1 \u0434\u043E\u043B\u043E\u043E \u0445\u043E\u043D\u043E\u0433",
    other: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 {{count}} \u0434\u043E\u043B\u043E\u043E \u0445\u043E\u043D\u043E\u0433"
  },
  xWeeks: {
    one: "1 \u0434\u043E\u043B\u043E\u043E \u0445\u043E\u043D\u043E\u0433",
    other: "{{count}} \u0434\u043E\u043B\u043E\u043E \u0445\u043E\u043D\u043E\u0433"
  },
  aboutXMonths: {
    one: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 1 \u0441\u0430\u0440",
    other: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 {{count}} \u0441\u0430\u0440"
  },
  xMonths: {
    one: "1 \u0441\u0430\u0440",
    other: "{{count}} \u0441\u0430\u0440"
  },
  aboutXYears: {
    one: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 1 \u0436\u0438\u043B",
    other: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 {{count}} \u0436\u0438\u043B"
  },
  xYears: {
    one: "1 \u0436\u0438\u043B",
    other: "{{count}} \u0436\u0438\u043B"
  },
  overXYears: {
    one: "1 \u0436\u0438\u043B \u0433\u0430\u0440\u0430\u043D",
    other: "{{count}} \u0436\u0438\u043B \u0433\u0430\u0440\u0430\u043D"
  },
  almostXYears: {
    one: "\u0431\u0430\u0440\u0430\u0433 1 \u0436\u0438\u043B",
    other: "\u0431\u0430\u0440\u0430\u0433 {{count}} \u0436\u0438\u043B"
  }
};
var mn_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = mn_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    var words = result.split(" ");
    var lastword = words.pop();
    result = words.join(" ");
    switch (lastword) {
      case "\u0441\u0435\u043A\u0443\u043D\u0434":
        result += " \u0441\u0435\u043A\u0443\u043D\u0434\u0438\u0439\u043D";
        break;
      case "\u043C\u0438\u043D\u0443\u0442":
        result += " \u043C\u0438\u043D\u0443\u0442\u044B\u043D";
        break;
      case "\u0446\u0430\u0433":
        result += " \u0446\u0430\u0433\u0438\u0439\u043D";
        break;
      case "\u04E9\u0434\u04E9\u0440":
        result += " \u04E9\u0434\u0440\u0438\u0439\u043D";
        break;
      case "\u0441\u0430\u0440":
        result += " \u0441\u0430\u0440\u044B\u043D";
        break;
      case "\u0436\u0438\u043B":
        result += " \u0436\u0438\u043B\u0438\u0439\u043D";
        break;
      case "\u0445\u043E\u043D\u043E\u0433":
        result += " \u0445\u043E\u043D\u043E\u0433\u0438\u0439\u043D";
        break;
      case "\u0433\u0430\u0440\u0430\u043D":
        result += " \u0433\u0430\u0440\u0430\u043D\u044B";
        break;
      case "\u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439":
        result += " \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439 \u0445\u0443\u0433\u0430\u0446\u0430\u0430\u043D\u044B";
        break;
      default:
        result += lastword + "-\u043D";
    }
    if (options.comparison && options.comparison > 0) {
      return result + " \u0434\u0430\u0440\u0430\u0430";
    } else {
      return result + " \u04E9\u043C\u043D\u04E9";
    }
  }
  return result;
};
/* harmony default export */ const mn_lib_formatDistance = (mn_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/formatLong/index.js

var mn_lib_formatLong_dateFormats = {
  full: "y '\u043E\u043D\u044B' MMMM'\u044B\u043D' d, EEEE '\u0433\u0430\u0440\u0430\u0433'",
  long: "y '\u043E\u043D\u044B' MMMM'\u044B\u043D' d",
  medium: "y '\u043E\u043D\u044B' MMM'\u044B\u043D' d",
  short: "y.MM.dd"
};
var mn_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var mn_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var mn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: mn_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: mn_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: mn_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const mn_lib_formatLong = (mn_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/formatRelative/index.js
var mn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u04E9\u043D\u0433\u04E9\u0440\u0441\u04E9\u043D' eeee '\u0433\u0430\u0440\u0430\u0433\u0438\u0439\u043D' p '\u0446\u0430\u0433\u0442'",
  yesterday: "'\u04E9\u0447\u0438\u0433\u0434\u04E9\u0440' p '\u0446\u0430\u0433\u0442'",
  today: "'\u04E9\u043D\u04E9\u04E9\u0434\u04E9\u0440' p '\u0446\u0430\u0433\u0442'",
  tomorrow: "'\u043C\u0430\u0440\u0433\u0430\u0430\u0448' p '\u0446\u0430\u0433\u0442'",
  nextWeek: "'\u0438\u0440\u044D\u0445' eeee '\u0433\u0430\u0440\u0430\u0433\u0438\u0439\u043D' p '\u0446\u0430\u0433\u0442'",
  other: "P"
};
var mn_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return mn_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const mn_lib_formatRelative = (mn_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/localize/index.js

var mn_lib_localize_eraValues = {
  narrow: ["\u041D\u0422\u04E8", "\u041D\u0422"],
  abbreviated: ["\u041D\u0422\u04E8", "\u041D\u0422"],
  wide: ["\u043D\u0438\u0439\u0442\u0438\u0439\u043D \u0442\u043E\u043E\u043B\u043B\u044B\u043D \u04E9\u043C\u043D\u04E9\u0445", "\u043D\u0438\u0439\u0442\u0438\u0439\u043D \u0442\u043E\u043E\u043B\u043B\u044B\u043D"]
};
var mn_lib_localize_quarterValues = {
  narrow: ["I", "II", "III", "IV"],
  abbreviated: ["I \u0443\u043B\u0438\u0440\u0430\u043B", "II \u0443\u043B\u0438\u0440\u0430\u043B", "III \u0443\u043B\u0438\u0440\u0430\u043B", "IV \u0443\u043B\u0438\u0440\u0430\u043B"],
  wide: ["1-\u0440 \u0443\u043B\u0438\u0440\u0430\u043B", "2-\u0440 \u0443\u043B\u0438\u0440\u0430\u043B", "3-\u0440 \u0443\u043B\u0438\u0440\u0430\u043B", "4-\u0440 \u0443\u043B\u0438\u0440\u0430\u043B"]
};
var mn_lib_localize_monthValues = {
  narrow: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII"],
  abbreviated: ["1-\u0440 \u0441\u0430\u0440", "2-\u0440 \u0441\u0430\u0440", "3-\u0440 \u0441\u0430\u0440", "4-\u0440 \u0441\u0430\u0440", "5-\u0440 \u0441\u0430\u0440", "6-\u0440 \u0441\u0430\u0440", "7-\u0440 \u0441\u0430\u0440", "8-\u0440 \u0441\u0430\u0440", "9-\u0440 \u0441\u0430\u0440", "10-\u0440 \u0441\u0430\u0440", "11-\u0440 \u0441\u0430\u0440", "12-\u0440 \u0441\u0430\u0440"],
  wide: ["\u041D\u044D\u0433\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440", "\u0425\u043E\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0413\u0443\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0414\u04E9\u0440\u04E9\u0432\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440", "\u0422\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0417\u0443\u0440\u0433\u0430\u0430\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0414\u043E\u043B\u043E\u043E\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u041D\u0430\u0439\u043C\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0415\u0441\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440", "\u0410\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0410\u0440\u0432\u0430\u043D\u043D\u044D\u0433\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440", "\u0410\u0440\u0432\u0430\u043D \u0445\u043E\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440"]
};
var mn_lib_localize_formattingMonthValues = {
  narrow: ["I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI", "XII"],
  abbreviated: ["1-\u0440 \u0441\u0430\u0440", "2-\u0440 \u0441\u0430\u0440", "3-\u0440 \u0441\u0430\u0440", "4-\u0440 \u0441\u0430\u0440", "5-\u0440 \u0441\u0430\u0440", "6-\u0440 \u0441\u0430\u0440", "7-\u0440 \u0441\u0430\u0440", "8-\u0440 \u0441\u0430\u0440", "9-\u0440 \u0441\u0430\u0440", "10-\u0440 \u0441\u0430\u0440", "11-\u0440 \u0441\u0430\u0440", "12-\u0440 \u0441\u0430\u0440"],
  wide: ["\u043D\u044D\u0433\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440", "\u0445\u043E\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0433\u0443\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0434\u04E9\u0440\u04E9\u0432\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440", "\u0442\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0437\u0443\u0440\u0433\u0430\u0430\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0434\u043E\u043B\u043E\u043E\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u043D\u0430\u0439\u043C\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0435\u0441\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440", "\u0430\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440", "\u0430\u0440\u0432\u0430\u043D\u043D\u044D\u0433\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440", "\u0430\u0440\u0432\u0430\u043D \u0445\u043E\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440"]
};
var mn_lib_localize_dayValues = {
  narrow: ["\u041D", "\u0414", "\u041C", "\u041B", "\u041F", "\u0411", "\u0411"],
  short: ["\u041D\u044F", "\u0414\u0430", "\u041C\u044F", "\u041B\u0445", "\u041F\u04AF", "\u0411\u0430", "\u0411\u044F"],
  abbreviated: ["\u041D\u044F\u043C", "\u0414\u0430\u0432", "\u041C\u044F\u0433", "\u041B\u0445\u0430", "\u041F\u04AF\u0440", "\u0411\u0430\u0430", "\u0411\u044F\u043C"],
  wide: ["\u041D\u044F\u043C", "\u0414\u0430\u0432\u0430\u0430", "\u041C\u044F\u0433\u043C\u0430\u0440", "\u041B\u0445\u0430\u0433\u0432\u0430", "\u041F\u04AF\u0440\u044D\u0432", "\u0411\u0430\u0430\u0441\u0430\u043D", "\u0411\u044F\u043C\u0431\u0430"]
};
var mn_lib_localize_formattingDayValues = {
  narrow: ["\u041D", "\u0414", "\u041C", "\u041B", "\u041F", "\u0411", "\u0411"],
  short: ["\u041D\u044F", "\u0414\u0430", "\u041C\u044F", "\u041B\u0445", "\u041F\u04AF", "\u0411\u0430", "\u0411\u044F"],
  abbreviated: ["\u041D\u044F\u043C", "\u0414\u0430\u0432", "\u041C\u044F\u0433", "\u041B\u0445\u0430", "\u041F\u04AF\u0440", "\u0411\u0430\u0430", "\u0411\u044F\u043C"],
  wide: ["\u043D\u044F\u043C", "\u0434\u0430\u0432\u0430\u0430", "\u043C\u044F\u0433\u043C\u0430\u0440", "\u043B\u0445\u0430\u0433\u0432\u0430", "\u043F\u04AF\u0440\u044D\u0432", "\u0431\u0430\u0430\u0441\u0430\u043D", "\u0431\u044F\u043C\u0431\u0430"]
};
var mn_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u04AF.\u04E9.",
    pm: "\u04AF.\u0445.",
    midnight: "\u0448\u04E9\u043D\u04E9 \u0434\u0443\u043D\u0434",
    noon: "\u04AF\u0434 \u0434\u0443\u043D\u0434",
    morning: "\u04E9\u0433\u043B\u04E9\u04E9",
    afternoon: "\u04E9\u0434\u04E9\u0440",
    evening: "\u043E\u0440\u043E\u0439",
    night: "\u0448\u04E9\u043D\u04E9"
  },
  abbreviated: {
    am: "\u04AF.\u04E9.",
    pm: "\u04AF.\u0445.",
    midnight: "\u0448\u04E9\u043D\u04E9 \u0434\u0443\u043D\u0434",
    noon: "\u04AF\u0434 \u0434\u0443\u043D\u0434",
    morning: "\u04E9\u0433\u043B\u04E9\u04E9",
    afternoon: "\u04E9\u0434\u04E9\u0440",
    evening: "\u043E\u0440\u043E\u0439",
    night: "\u0448\u04E9\u043D\u04E9"
  },
  wide: {
    am: "\u04AF.\u04E9.",
    pm: "\u04AF.\u0445.",
    midnight: "\u0448\u04E9\u043D\u04E9 \u0434\u0443\u043D\u0434",
    noon: "\u04AF\u0434 \u0434\u0443\u043D\u0434",
    morning: "\u04E9\u0433\u043B\u04E9\u04E9",
    afternoon: "\u04E9\u0434\u04E9\u0440",
    evening: "\u043E\u0440\u043E\u0439",
    night: "\u0448\u04E9\u043D\u04E9"
  }
};
var mn_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var mn_lib_localize_localize = {
  ordinalNumber: mn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: mn_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_dayValues,
    defaultWidth: "wide",
    formattingValues: mn_lib_localize_formattingDayValues,
    defaultFormattingWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: mn_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const mn_lib_localize = (mn_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/_lib/match/index.js


var mn_lib_match_matchOrdinalNumberPattern = /\d+/i;
var mn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var mn_lib_match_matchEraPatterns = {
  narrow: /^(нтө|нт)/i,
  abbreviated: /^(нтө|нт)/i,
  wide: /^(нийтийн тооллын өмнө|нийтийн тооллын)/i
};
var mn_lib_match_parseEraPatterns = {
  any: [/^(нтө|нийтийн тооллын өмнө)/i, /^(нт|нийтийн тооллын)/i]
};
var mn_lib_match_matchQuarterPatterns = {
  narrow: /^(iv|iii|ii|i)/i,
  abbreviated: /^(iv|iii|ii|i) улирал/i,
  wide: /^[1-4]-р улирал/i
};
var mn_lib_match_parseQuarterPatterns = {
  any: [/^(i(\s|$)|1)/i, /^(ii(\s|$)|2)/i, /^(iii(\s|$)|3)/i, /^(iv(\s|$)|4)/i]
};
var mn_lib_match_matchMonthPatterns = {
  narrow: /^(xii|xi|x|ix|viii|vii|vi|v|iv|iii|ii|i)/i,
  abbreviated: /^(1-р сар|2-р сар|3-р сар|4-р сар|5-р сар|6-р сар|7-р сар|8-р сар|9-р сар|10-р сар|11-р сар|12-р сар)/i,
  wide: /^(нэгдүгээр сар|хоёрдугаар сар|гуравдугаар сар|дөрөвдүгээр сар|тавдугаар сар|зургаадугаар сар|долоодугаар сар|наймдугаар сар|есдүгээр сар|аравдугаар сар|арван нэгдүгээр сар|арван хоёрдугаар сар)/i
};
var mn_lib_match_parseMonthPatterns = {
  narrow: [/^i$/i, /^ii$/i, /^iii$/i, /^iv$/i, /^v$/i, /^vi$/i, /^vii$/i, /^viii$/i, /^ix$/i, /^x$/i, /^xi$/i, /^xii$/i],
  any: [/^(1|нэгдүгээр)/i, /^(2|хоёрдугаар)/i, /^(3|гуравдугаар)/i, /^(4|дөрөвдүгээр)/i, /^(5|тавдугаар)/i, /^(6|зургаадугаар)/i, /^(7|долоодугаар)/i, /^(8|наймдугаар)/i, /^(9|есдүгээр)/i, /^(10|аравдугаар)/i, /^(11|арван нэгдүгээр)/i, /^(12|арван хоёрдугаар)/i]
};
var mn_lib_match_matchDayPatterns = {
  narrow: /^[ндмлпбб]/i,
  short: /^(ня|да|мя|лх|пү|ба|бя)/i,
  abbreviated: /^(ням|дав|мяг|лха|пүр|баа|бям)/i,
  wide: /^(ням|даваа|мягмар|лхагва|пүрэв|баасан|бямба)/i
};
var mn_lib_match_parseDayPatterns = {
  narrow: [/^н/i, /^д/i, /^м/i, /^л/i, /^п/i, /^б/i, /^б/i],
  any: [/^ня/i, /^да/i, /^мя/i, /^лх/i, /^пү/i, /^ба/i, /^бя/i]
};
var mn_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ү\.ө\.|ү\.х\.|шөнө дунд|үд дунд|өглөө|өдөр|орой|шөнө)/i,
  any: /^(ү\.ө\.|ү\.х\.|шөнө дунд|үд дунд|өглөө|өдөр|орой|шөнө)/i
};
var mn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ү\.ө\./i,
    pm: /^ү\.х\./i,
    midnight: /^шөнө дунд/i,
    noon: /^үд дунд/i,
    morning: /өглөө/i,
    afternoon: /өдөр/i,
    evening: /орой/i,
    night: /шөнө/i
  }
};
var mn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: mn_lib_match_matchOrdinalNumberPattern,
    parsePattern: mn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mn_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mn_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mn_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mn_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: mn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const mn_lib_match = (mn_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mn/index.js





var mn_locale = {
  code: "mn",
  formatDistance: mn_lib_formatDistance,
  formatLong: mn_lib_formatLong,
  formatRelative: mn_lib_formatRelative,
  localize: mn_lib_localize,
  match: mn_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const mn = (mn_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/formatDistance/index.js
var ms_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "kurang dari 1 saat",
    other: "kurang dari {{count}} saat"
  },
  xSeconds: {
    one: "1 saat",
    other: "{{count}} saat"
  },
  halfAMinute: "setengah minit",
  lessThanXMinutes: {
    one: "kurang dari 1 minit",
    other: "kurang dari {{count}} minit"
  },
  xMinutes: {
    one: "1 minit",
    other: "{{count}} minit"
  },
  aboutXHours: {
    one: "sekitar 1 jam",
    other: "sekitar {{count}} jam"
  },
  xHours: {
    one: "1 jam",
    other: "{{count}} jam"
  },
  xDays: {
    one: "1 hari",
    other: "{{count}} hari"
  },
  aboutXWeeks: {
    one: "sekitar 1 minggu",
    other: "sekitar {{count}} minggu"
  },
  xWeeks: {
    one: "1 minggu",
    other: "{{count}} minggu"
  },
  aboutXMonths: {
    one: "sekitar 1 bulan",
    other: "sekitar {{count}} bulan"
  },
  xMonths: {
    one: "1 bulan",
    other: "{{count}} bulan"
  },
  aboutXYears: {
    one: "sekitar 1 tahun",
    other: "sekitar {{count}} tahun"
  },
  xYears: {
    one: "1 tahun",
    other: "{{count}} tahun"
  },
  overXYears: {
    one: "lebih dari 1 tahun",
    other: "lebih dari {{count}} tahun"
  },
  almostXYears: {
    one: "hampir 1 tahun",
    other: "hampir {{count}} tahun"
  }
};
var ms_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = ms_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "dalam masa " + result;
    } else {
      return result + " yang lalu";
    }
  }
  return result;
};
/* harmony default export */ const ms_lib_formatDistance = (ms_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/formatLong/index.js

var ms_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "d/M/yyyy"
};
var ms_lib_formatLong_timeFormats = {
  full: "HH.mm.ss",
  long: "HH.mm.ss",
  medium: "HH.mm",
  short: "HH.mm"
};
var ms_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'pukul' {{time}}",
  long: "{{date}} 'pukul' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ms_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ms_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ms_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ms_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ms_lib_formatLong = (ms_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/formatRelative/index.js
var ms_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'lepas pada jam' p",
  yesterday: "'Semalam pada jam' p",
  today: "'Hari ini pada jam' p",
  tomorrow: "'Esok pada jam' p",
  nextWeek: "eeee 'pada jam' p",
  other: "P"
};
var ms_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ms_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ms_lib_formatRelative = (ms_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/localize/index.js

var ms_lib_localize_eraValues = {
  narrow: ["SM", "M"],
  abbreviated: ["SM", "M"],
  wide: ["Sebelum Masihi", "Masihi"]
};
var ms_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["S1", "S2", "S3", "S4"],
  wide: ["Suku pertama", "Suku kedua", "Suku ketiga", "Suku keempat"]
};
var ms_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "O", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mac", "Apr", "Mei", "Jun", "Jul", "Ogo", "Sep", "Okt", "Nov", "Dis"],
  wide: ["Januari", "Februari", "Mac", "April", "Mei", "Jun", "Julai", "Ogos", "September", "Oktober", "November", "Disember"]
};
var ms_lib_localize_dayValues = {
  narrow: ["A", "I", "S", "R", "K", "J", "S"],
  short: ["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"],
  abbreviated: ["Ahd", "Isn", "Sel", "Rab", "Kha", "Jum", "Sab"],
  wide: ["Ahad", "Isnin", "Selasa", "Rabu", "Khamis", "Jumaat", "Sabtu"]
};
var ms_lib_localize_dayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "tgh malam",
    noon: "tgh hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam"
  }
};
var ms_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "tengah malam",
    noon: "tengah hari",
    morning: "pagi",
    afternoon: "tengah hari",
    evening: "petang",
    night: "malam"
  }
};
var ms_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return "ke-" + Number(dirtyNumber);
};
var ms_lib_localize_localize = {
  ordinalNumber: ms_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ms_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ms_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ms_lib_localize = (ms_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/_lib/match/index.js


var ms_lib_match_matchOrdinalNumberPattern = /^ke-(\d+)?/i;
var ms_lib_match_parseOrdinalNumberPattern = /petama|\d+/i;
var ms_lib_match_matchEraPatterns = {
  narrow: /^(sm|m)/i,
  abbreviated: /^(s\.?\s?m\.?|m\.?)/i,
  wide: /^(sebelum masihi|masihi)/i
};
var ms_lib_match_parseEraPatterns = {
  any: [/^s/i, /^(m)/i]
};
var ms_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^S[1234]/i,
  wide: /Suku (pertama|kedua|ketiga|keempat)/i
};
var ms_lib_match_parseQuarterPatterns = {
  any: [/pertama|1/i, /kedua|2/i, /ketiga|3/i, /keempat|4/i]
};
var ms_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mac|apr|mei|jun|jul|ogo|sep|okt|nov|dis)/i,
  wide: /^(januari|februari|mac|april|mei|jun|julai|ogos|september|oktober|november|disember)/i
};
var ms_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^o/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^ma/i, /^ap/i, /^me/i, /^jun/i, /^jul/i, /^og/i, /^s/i, /^ok/i, /^n/i, /^d/i]
};
var ms_lib_match_matchDayPatterns = {
  narrow: /^[aisrkj]/i,
  short: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  abbreviated: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
  wide: /^(ahad|isnin|selasa|rabu|khamis|jumaat|sabtu)/i
};
var ms_lib_match_parseDayPatterns = {
  narrow: [/^a/i, /^i/i, /^s/i, /^r/i, /^k/i, /^j/i, /^s/i],
  any: [/^a/i, /^i/i, /^se/i, /^r/i, /^k/i, /^j/i, /^sa/i]
};
var ms_lib_match_matchDayPeriodPatterns = {
  narrow: /^(am|pm|tengah malam|tengah hari|pagi|petang|malam)/i,
  any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|pagi|petang|malam)/i
};
var ms_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^pm/i,
    midnight: /^tengah m/i,
    noon: /^tengah h/i,
    morning: /pa/i,
    afternoon: /tengah h/i,
    evening: /pe/i,
    night: /m/i
  }
};
var ms_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ms_lib_match_matchOrdinalNumberPattern,
    parsePattern: ms_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ms_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ms_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ms_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ms_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ms_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ms_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ms_lib_match = (ms_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ms/index.js





var ms_locale = {
  code: "ms",
  formatDistance: ms_lib_formatDistance,
  formatLong: ms_lib_formatLong,
  formatRelative: ms_lib_formatRelative,
  localize: ms_lib_localize,
  match: ms_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ms = (ms_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/formatDistance/index.js
var mt_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "inqas minn sekonda",
    other: "inqas minn {{count}} sekondi"
  },
  xSeconds: {
    one: "sekonda",
    other: "{{count}} sekondi"
  },
  halfAMinute: "nofs minuta",
  lessThanXMinutes: {
    one: "inqas minn minuta",
    other: "inqas minn {{count}} minuti"
  },
  xMinutes: {
    one: "minuta",
    other: "{{count}} minuti"
  },
  aboutXHours: {
    one: "madwar sieg\u0127a",
    other: "madwar {{count}} sieg\u0127at"
  },
  xHours: {
    one: "sieg\u0127a",
    other: "{{count}} sieg\u0127at"
  },
  xDays: {
    one: "\u0121urnata",
    other: "{{count}} \u0121ranet"
  },
  aboutXWeeks: {
    one: "madwar \u0121img\u0127a",
    other: "madwar {{count}} \u0121img\u0127at"
  },
  xWeeks: {
    one: "\u0121img\u0127a",
    other: "{{count}} \u0121img\u0127at"
  },
  aboutXMonths: {
    one: "madwar xahar",
    other: "madwar {{count}} xhur"
  },
  xMonths: {
    one: "xahar",
    other: "{{count}} xhur"
  },
  aboutXYears: {
    one: "madwar sena",
    two: "madwar sentejn",
    other: "madwar {{count}} snin"
  },
  xYears: {
    one: "sena",
    two: "sentejn",
    other: "{{count}} snin"
  },
  overXYears: {
    one: "aktar minn sena",
    two: "aktar minn sentejn",
    other: "aktar minn {{count}} snin"
  },
  almostXYears: {
    one: "kwa\u017Ci sena",
    two: "kwa\u017Ci sentejn",
    other: "kwa\u017Ci {{count}} snin"
  }
};
var mt_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = mt_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else if (count === 2 && tokenValue.two) {
    result = tokenValue.two;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "f'" + result;
    } else {
      return result + " ilu";
    }
  }
  return result;
};
/* harmony default export */ const mt_lib_formatDistance = (mt_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/formatLong/index.js

var mt_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd/MM/yyyy"
};
var mt_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var mt_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var mt_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: mt_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: mt_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: mt_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const mt_lib_formatLong = (mt_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/formatRelative/index.js
var mt_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'li g\u0127adda' 'fil-'p",
  yesterday: "'Il-biera\u0127 fil-'p",
  today: "'Illum fil-'p",
  tomorrow: "'G\u0127ada fil-'p",
  nextWeek: "eeee 'fil-'p",
  other: "P"
};
var mt_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return mt_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const mt_lib_formatRelative = (mt_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/localize/index.js

var mt_lib_localize_eraValues = {
  narrow: ["Q", "W"],
  abbreviated: ["QK", "WK"],
  wide: ["qabel Kristu", "wara Kristu"]
};
var mt_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1. kwart", "2. kwart", "3. kwart", "4. kwart"]
};
var mt_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "\u0120", "L", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Fra", "Mar", "Apr", "Mej", "\u0120un", "Lul", "Aww", "Set", "Ott", "Nov", "Di\u010B"],
  wide: ["Jannar", "Frar", "Marzu", "April", "Mejju", "\u0120unju", "Lulju", "Awwissu", "Settembru", "Ottubru", "Novembru", "Di\u010Bembru"]
};
var mt_lib_localize_dayValues = {
  narrow: ["\u0126", "T", "T", "E", "\u0126", "\u0120", "S"],
  short: ["\u0126a", "Tn", "Tl", "Er", "\u0126a", "\u0120i", "Si"],
  abbreviated: ["\u0126ad", "Tne", "Tli", "Erb", "\u0126am", "\u0120im", "Sib"],
  wide: ["Il-\u0126add", "It-Tnejn", "It-Tlieta", "L-Erbg\u0127a", "Il-\u0126amis", "Il-\u0120img\u0127a", "Is-Sibt"]
};
var mt_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "nofsillejl",
    noon: "nofsinhar",
    morning: "g\u0127odwa",
    afternoon: "wara nofsinhar",
    evening: "filg\u0127axija",
    night: "lejl"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "nofsillejl",
    noon: "nofsinhar",
    morning: "g\u0127odwa",
    afternoon: "wara nofsinhar",
    evening: "filg\u0127axija",
    night: "lejl"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "nofsillejl",
    noon: "nofsinhar",
    morning: "g\u0127odwa",
    afternoon: "wara nofsinhar",
    evening: "filg\u0127axija",
    night: "lejl"
  }
};
var mt_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: "filg\u0127odu",
    afternoon: "wara nofsinhar",
    evening: "filg\u0127axija",
    night: "billejl"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: "filg\u0127odu",
    afternoon: "wara nofsinhar",
    evening: "filg\u0127axija",
    night: "billejl"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "f'nofsillejl",
    noon: "f'nofsinhar",
    morning: "filg\u0127odu",
    afternoon: "wara nofsinhar",
    evening: "filg\u0127axija",
    night: "billejl"
  }
};
var mt_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "\xBA";
};
var mt_lib_localize_localize = {
  ordinalNumber: mt_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: mt_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: mt_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const mt_lib_localize = (mt_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/_lib/match/index.js


var mt_lib_match_matchOrdinalNumberPattern = /^(\d+)(º)?/i;
var mt_lib_match_parseOrdinalNumberPattern = /\d+/i;
var mt_lib_match_matchEraPatterns = {
  narrow: /^(q|w)/i,
  abbreviated: /^(q\.?\s?k\.?|b\.?\s?c\.?\s?e\.?|w\.?\s?k\.?)/i,
  wide: /^(qabel kristu|before common era|wara kristu|common era)/i
};
var mt_lib_match_parseEraPatterns = {
  any: [/^(q|b)/i, /^(w|c)/i]
};
var mt_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^k[1234]/i,
  wide: /^[1234](\.)? kwart/i
};
var mt_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var mt_lib_match_matchMonthPatterns = {
  narrow: /^[jfmaglsond]/i,
  abbreviated: /^(jan|fra|mar|apr|mej|ġun|lul|aww|set|ott|nov|diċ)/i,
  wide: /^(jannar|frar|marzu|april|mejju|ġunju|lulju|awwissu|settembru|ottubru|novembru|diċembru)/i
};
var mt_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^ġ/i, /^l/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mej/i, /^ġ/i, /^l/i, /^aw/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var mt_lib_match_matchDayPatterns = {
  narrow: /^[ħteġs]/i,
  short: /^(ħa|tn|tl|er|ħa|ġi|si)/i,
  abbreviated: /^(ħad|tne|tli|erb|ħam|ġim|sib)/i,
  wide: /^(il-ħadd|it-tnejn|it-tlieta|l-erbgħa|il-ħamis|il-ġimgħa|is-sibt)/i
};
var mt_lib_match_parseDayPatterns = {
  narrow: [/^ħ/i, /^t/i, /^t/i, /^e/i, /^ħ/i, /^ġ/i, /^s/i],
  any: [/^(il-)?ħad/i, /^(it-)?tn/i, /^(it-)?tl/i, /^(l-)?er/i, /^(il-)?ham/i, /^(il-)?ġi/i, /^(is-)?si/i]
};
var mt_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i,
  any: /^([ap]\.?\s?m\.?|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i
};
var mt_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^f'nofsillejl/i,
    noon: /^f'nofsinhar/i,
    morning: /għodwa/i,
    afternoon: /wara(\s.*)nofsinhar/i,
    evening: /filgħaxija/i,
    night: /lejl/i
  }
};
var mt_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: mt_lib_match_matchOrdinalNumberPattern,
    parsePattern: mt_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mt_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mt_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mt_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: mt_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: mt_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: mt_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const mt_lib_match = (mt_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/mt/index.js





var mt_locale = {
  code: "mt",
  formatDistance: mt_lib_formatDistance,
  formatLong: mt_lib_formatLong,
  formatRelative: mt_lib_formatRelative,
  localize: mt_lib_localize,
  match: mt_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const mt = (mt_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/formatDistance/index.js
var nb_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "mindre enn ett sekund",
    other: "mindre enn {{count}} sekunder"
  },
  xSeconds: {
    one: "ett sekund",
    other: "{{count}} sekunder"
  },
  halfAMinute: "et halvt minutt",
  lessThanXMinutes: {
    one: "mindre enn ett minutt",
    other: "mindre enn {{count}} minutter"
  },
  xMinutes: {
    one: "ett minutt",
    other: "{{count}} minutter"
  },
  aboutXHours: {
    one: "omtrent en time",
    other: "omtrent {{count}} timer"
  },
  xHours: {
    one: "en time",
    other: "{{count}} timer"
  },
  xDays: {
    one: "en dag",
    other: "{{count}} dager"
  },
  aboutXWeeks: {
    one: "omtrent en uke",
    other: "omtrent {{count}} uker"
  },
  xWeeks: {
    one: "en uke",
    other: "{{count}} uker"
  },
  aboutXMonths: {
    one: "omtrent en m\xE5ned",
    other: "omtrent {{count}} m\xE5neder"
  },
  xMonths: {
    one: "en m\xE5ned",
    other: "{{count}} m\xE5neder"
  },
  aboutXYears: {
    one: "omtrent ett \xE5r",
    other: "omtrent {{count}} \xE5r"
  },
  xYears: {
    one: "ett \xE5r",
    other: "{{count}} \xE5r"
  },
  overXYears: {
    one: "over ett \xE5r",
    other: "over {{count}} \xE5r"
  },
  almostXYears: {
    one: "nesten ett \xE5r",
    other: "nesten {{count}} \xE5r"
  }
};
var nb_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = nb_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " siden";
    }
  }
  return result;
};
/* harmony default export */ const nb_lib_formatDistance = (nb_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/formatLong/index.js

var nb_lib_formatLong_dateFormats = {
  full: "EEEE d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd.MM.y"
};
var nb_lib_formatLong_timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var nb_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var nb_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: nb_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: nb_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: nb_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const nb_lib_formatLong = (nb_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/formatRelative/index.js
var nb_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'forrige' eeee 'kl.' p",
  yesterday: "'i g\xE5r kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgen kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: "P"
};
var nb_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return nb_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const nb_lib_formatRelative = (nb_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/localize/index.js

var nb_lib_localize_eraValues = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["f\xF8r Kristus", "etter Kristus"]
};
var nb_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
};
var nb_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des."],
  wide: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
};
var nb_lib_localize_dayValues = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["s\xF8", "ma", "ti", "on", "to", "fr", "l\xF8"],
  abbreviated: ["s\xF8n", "man", "tir", "ons", "tor", "fre", "l\xF8r"],
  wide: ["s\xF8ndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "l\xF8rdag"]
};
var nb_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnatt",
    noon: "middag",
    morning: "p\xE5 morg.",
    afternoon: "p\xE5 etterm.",
    evening: "p\xE5 kvelden",
    night: "p\xE5 natten"
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "p\xE5 morg.",
    afternoon: "p\xE5 etterm.",
    evening: "p\xE5 kvelden",
    night: "p\xE5 natten"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "p\xE5 morgenen",
    afternoon: "p\xE5 ettermiddagen",
    evening: "p\xE5 kvelden",
    night: "p\xE5 natten"
  }
};
var nb_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var nb_lib_localize_localize = {
  ordinalNumber: nb_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: nb_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const nb_lib_localize = (nb_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/_lib/match/index.js


var nb_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var nb_lib_match_parseOrdinalNumberPattern = /\d+/i;
var nb_lib_match_matchEraPatterns = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
};
var nb_lib_match_parseEraPatterns = {
  any: [/^f/i, /^e/i]
};
var nb_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var nb_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var nb_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
var nb_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var nb_lib_match_matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(sø|ma|ti|on|to|fr|lø)/i,
  abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
  wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
var nb_lib_match_parseDayPatterns = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var nb_lib_match_matchDayPeriodPatterns = {
  narrow: /^(midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten))/i
};
var nb_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgen/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i
  }
};
var nb_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: nb_lib_match_matchOrdinalNumberPattern,
    parsePattern: nb_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nb_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nb_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nb_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nb_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nb_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: nb_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const nb_lib_match = (nb_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nb/index.js





var nb_locale = {
  code: "nb",
  formatDistance: nb_lib_formatDistance,
  formatLong: nb_lib_formatLong,
  formatRelative: nb_lib_formatRelative,
  localize: nb_lib_localize,
  match: nb_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const nb = (nb_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/formatDistance/index.js
var nl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "minder dan een seconde",
    other: "minder dan {{count}} seconden"
  },
  xSeconds: {
    one: "1 seconde",
    other: "{{count}} seconden"
  },
  halfAMinute: "een halve minuut",
  lessThanXMinutes: {
    one: "minder dan een minuut",
    other: "minder dan {{count}} minuten"
  },
  xMinutes: {
    one: "een minuut",
    other: "{{count}} minuten"
  },
  aboutXHours: {
    one: "ongeveer 1 uur",
    other: "ongeveer {{count}} uur"
  },
  xHours: {
    one: "1 uur",
    other: "{{count}} uur"
  },
  xDays: {
    one: "1 dag",
    other: "{{count}} dagen"
  },
  aboutXWeeks: {
    one: "ongeveer 1 week",
    other: "ongeveer {{count}} weken"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weken"
  },
  aboutXMonths: {
    one: "ongeveer 1 maand",
    other: "ongeveer {{count}} maanden"
  },
  xMonths: {
    one: "1 maand",
    other: "{{count}} maanden"
  },
  aboutXYears: {
    one: "ongeveer 1 jaar",
    other: "ongeveer {{count}} jaar"
  },
  xYears: {
    one: "1 jaar",
    other: "{{count}} jaar"
  },
  overXYears: {
    one: "meer dan 1 jaar",
    other: "meer dan {{count}} jaar"
  },
  almostXYears: {
    one: "bijna 1 jaar",
    other: "bijna {{count}} jaar"
  }
};
var nl_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = nl_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "over " + result;
    } else {
      return result + " geleden";
    }
  }
  return result;
};
/* harmony default export */ const nl_lib_formatDistance = (nl_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/formatLong/index.js

var nl_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd-MM-y"
};
var nl_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var nl_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var nl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const nl_lib_formatLong = (nl_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/formatRelative/index.js
var nl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'afgelopen' eeee 'om' p",
  yesterday: "'gisteren om' p",
  today: "'vandaag om' p",
  tomorrow: "'morgen om' p",
  nextWeek: "eeee 'om' p",
  other: "P"
};
var nl_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return nl_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const nl_lib_formatRelative = (nl_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/localize/index.js

var nl_lib_localize_eraValues = {
  narrow: ["v.C.", "n.C."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["voor Christus", "na Christus"]
};
var nl_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1e kwartaal", "2e kwartaal", "3e kwartaal", "4e kwartaal"]
};
var nl_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jan.", "feb.", "mrt.", "apr.", "mei", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec."],
  wide: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"]
};
var nl_lib_localize_dayValues = {
  narrow: ["Z", "M", "D", "W", "D", "V", "Z"],
  short: ["zo", "ma", "di", "wo", "do", "vr", "za"],
  abbreviated: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
  wide: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"]
};
var nl_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middaguur",
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middaguur",
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middaguur",
    morning: "'s ochtends",
    afternoon: "'s middags",
    evening: "'s avonds",
    night: "'s nachts"
  }
};
var nl_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "e";
};
var nl_lib_localize_localize = {
  ordinalNumber: nl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: nl_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const nl_lib_localize = (nl_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/_lib/match/index.js


var nl_lib_match_matchOrdinalNumberPattern = /^(\d+)e?/i;
var nl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var nl_lib_match_matchEraPatterns = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?Chr\.?)/,
  wide: /^((voor|na) Christus)/
};
var nl_lib_match_parseEraPatterns = {
  any: [/^v/, /^n/]
};
var nl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e kwartaal/i
};
var nl_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var nl_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
};
var nl_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
};
var nl_lib_match_matchDayPatterns = {
  narrow: /^[zmdwv]/i,
  short: /^(zo|ma|di|wo|do|vr|za)/i,
  abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
  wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
};
var nl_lib_match_parseDayPatterns = {
  narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
  any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
};
var nl_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
};
var nl_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^het middaguur/i,
    morning: /ochtend/i,
    afternoon: /middag/i,
    evening: /avond/i,
    night: /nacht/i
  }
};
var nl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: nl_lib_match_matchOrdinalNumberPattern,
    parsePattern: nl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nl_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nl_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nl_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nl_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: nl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const nl_lib_match = (nl_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl/index.js





var nl_locale = {
  code: "nl",
  formatDistance: nl_lib_formatDistance,
  formatLong: nl_lib_formatLong,
  formatRelative: nl_lib_formatRelative,
  localize: nl_lib_localize,
  match: nl_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const nl = (nl_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/formatDistance/index.js
var nl_BE_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "minder dan een seconde",
    other: "minder dan {{count}} seconden"
  },
  xSeconds: {
    one: "1 seconde",
    other: "{{count}} seconden"
  },
  halfAMinute: "een halve minuut",
  lessThanXMinutes: {
    one: "minder dan een minuut",
    other: "minder dan {{count}} minuten"
  },
  xMinutes: {
    one: "een minuut",
    other: "{{count}} minuten"
  },
  aboutXHours: {
    one: "ongeveer 1 uur",
    other: "ongeveer {{count}} uur"
  },
  xHours: {
    one: "1 uur",
    other: "{{count}} uur"
  },
  xDays: {
    one: "1 dag",
    other: "{{count}} dagen"
  },
  aboutXWeeks: {
    one: "ongeveer 1 week",
    other: "ongeveer {{count}} weken"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weken"
  },
  aboutXMonths: {
    one: "ongeveer 1 maand",
    other: "ongeveer {{count}} maanden"
  },
  xMonths: {
    one: "1 maand",
    other: "{{count}} maanden"
  },
  aboutXYears: {
    one: "ongeveer 1 jaar",
    other: "ongeveer {{count}} jaar"
  },
  xYears: {
    one: "1 jaar",
    other: "{{count}} jaar"
  },
  overXYears: {
    one: "meer dan 1 jaar",
    other: "meer dan {{count}} jaar"
  },
  almostXYears: {
    one: "bijna 1 jaar",
    other: "bijna {{count}} jaar"
  }
};
var nl_BE_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = nl_BE_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "over " + result;
    } else {
      return result + " geleden";
    }
  }
  return result;
};
/* harmony default export */ const nl_BE_lib_formatDistance = (nl_BE_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/formatLong/index.js

var nl_BE_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd.MM.y"
};
var nl_BE_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var nl_BE_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'om' {{time}}",
  long: "{{date}} 'om' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var nl_BE_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_BE_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_BE_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: nl_BE_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const nl_BE_lib_formatLong = (nl_BE_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/formatRelative/index.js
var nl_BE_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'vorige' eeee 'om' p",
  yesterday: "'gisteren om' p",
  today: "'vandaag om' p",
  tomorrow: "'morgen om' p",
  nextWeek: "eeee 'om' p",
  other: "P"
};
var nl_BE_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return nl_BE_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const nl_BE_lib_formatRelative = (nl_BE_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/localize/index.js

var nl_BE_lib_localize_eraValues = {
  narrow: ["v.C.", "n.C."],
  abbreviated: ["v.Chr.", "n.Chr."],
  wide: ["voor Christus", "na Christus"]
};
var nl_BE_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["K1", "K2", "K3", "K4"],
  wide: ["1e kwartaal", "2e kwartaal", "3e kwartaal", "4e kwartaal"]
};
var nl_BE_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jan.", "feb.", "mrt.", "apr.", "mei", "jun.", "jul.", "aug.", "sep.", "okt.", "nov.", "dec."],
  wide: ["januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december"]
};
var nl_BE_lib_localize_dayValues = {
  narrow: ["Z", "M", "D", "W", "D", "V", "Z"],
  short: ["zo", "ma", "di", "wo", "do", "vr", "za"],
  abbreviated: ["zon", "maa", "din", "woe", "don", "vri", "zat"],
  wide: ["zondag", "maandag", "dinsdag", "woensdag", "donderdag", "vrijdag", "zaterdag"]
};
var nl_BE_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middag",
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middag",
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "middernacht",
    noon: "het middag",
    morning: "'s ochtends",
    afternoon: "'s namiddags",
    evening: "'s avonds",
    night: "'s nachts"
  }
};
var nl_BE_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "e";
};
var nl_BE_lib_localize_localize = {
  ordinalNumber: nl_BE_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: nl_BE_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const nl_BE_lib_localize = (nl_BE_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/_lib/match/index.js


var nl_BE_lib_match_matchOrdinalNumberPattern = /^(\d+)e?/i;
var nl_BE_lib_match_parseOrdinalNumberPattern = /\d+/i;
var nl_BE_lib_match_matchEraPatterns = {
  narrow: /^([vn]\.? ?C\.?)/,
  abbreviated: /^([vn]\. ?Chr\.?)/,
  wide: /^((voor|na) Christus)/
};
var nl_BE_lib_match_parseEraPatterns = {
  any: [/^v/, /^n/]
};
var nl_BE_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^K[1234]/i,
  wide: /^[1234]e kwartaal/i
};
var nl_BE_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var nl_BE_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
  wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
};
var nl_BE_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^jan/i, /^feb/i, /^m(r|a)/i, /^apr/i, /^mei/i, /^jun/i, /^jul/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i]
};
var nl_BE_lib_match_matchDayPatterns = {
  narrow: /^[zmdwv]/i,
  short: /^(zo|ma|di|wo|do|vr|za)/i,
  abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
  wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
};
var nl_BE_lib_match_parseDayPatterns = {
  narrow: [/^z/i, /^m/i, /^d/i, /^w/i, /^d/i, /^v/i, /^z/i],
  any: [/^zo/i, /^ma/i, /^di/i, /^wo/i, /^do/i, /^vr/i, /^za/i]
};
var nl_BE_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
};
var nl_BE_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /^middernacht/i,
    noon: /^het middaguur/i,
    morning: /ochtend/i,
    afternoon: /middag/i,
    evening: /avond/i,
    night: /nacht/i
  }
};
var nl_BE_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: nl_BE_lib_match_matchOrdinalNumberPattern,
    parsePattern: nl_BE_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nl_BE_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nl_BE_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nl_BE_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nl_BE_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nl_BE_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: nl_BE_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const nl_BE_lib_match = (nl_BE_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nl-BE/index.js





var nl_BE_locale = {
  code: "nl-BE",
  formatDistance: nl_BE_lib_formatDistance,
  formatLong: nl_BE_lib_formatLong,
  formatRelative: nl_BE_lib_formatRelative,
  localize: nl_BE_lib_localize,
  match: nl_BE_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const nl_BE = (nl_BE_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/formatDistance/index.js
var nn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "mindre enn eitt sekund",
    other: "mindre enn {{count}} sekund"
  },
  xSeconds: {
    one: "eitt sekund",
    other: "{{count}} sekund"
  },
  halfAMinute: "eit halvt minutt",
  lessThanXMinutes: {
    one: "mindre enn eitt minutt",
    other: "mindre enn {{count}} minutt"
  },
  xMinutes: {
    one: "eitt minutt",
    other: "{{count}} minutt"
  },
  aboutXHours: {
    one: "omtrent ein time",
    other: "omtrent {{count}} timar"
  },
  xHours: {
    one: "ein time",
    other: "{{count}} timar"
  },
  xDays: {
    one: "ein dag",
    other: "{{count}} dagar"
  },
  aboutXWeeks: {
    one: "omtrent ei veke",
    other: "omtrent {{count}} veker"
  },
  xWeeks: {
    one: "ei veke",
    other: "{{count}} veker"
  },
  aboutXMonths: {
    one: "omtrent ein m\xE5nad",
    other: "omtrent {{count}} m\xE5nader"
  },
  xMonths: {
    one: "ein m\xE5nad",
    other: "{{count}} m\xE5nader"
  },
  aboutXYears: {
    one: "omtrent eitt \xE5r",
    other: "omtrent {{count}} \xE5r"
  },
  xYears: {
    one: "eitt \xE5r",
    other: "{{count}} \xE5r"
  },
  overXYears: {
    one: "over eitt \xE5r",
    other: "over {{count}} \xE5r"
  },
  almostXYears: {
    one: "nesten eitt \xE5r",
    other: "nesten {{count}} \xE5r"
  }
};
var wordMapping = ["null", "ein", "to", "tre", "fire", "fem", "seks", "sju", "\xE5tte", "ni", "ti", "elleve", "tolv"];
var nn_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = nn_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    if (options && options.onlyNumeric) {
      result = tokenValue.other.replace("{{count}}", String(count));
    } else {
      result = tokenValue.other.replace("{{count}}", count < 13 ? wordMapping[count] : String(count));
    }
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " sidan";
    }
  }
  return result;
};
/* harmony default export */ const nn_lib_formatDistance = (nn_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/formatLong/index.js

var nn_lib_formatLong_dateFormats = {
  full: "EEEE d. MMMM y",
  long: "d. MMMM y",
  medium: "d. MMM y",
  short: "dd.MM.y"
};
var nn_lib_formatLong_timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var nn_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var nn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: nn_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: nn_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: nn_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const nn_lib_formatLong = (nn_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/formatRelative/index.js
var nn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'f\xF8rre' eeee 'kl.' p",
  yesterday: "'i g\xE5r kl.' p",
  today: "'i dag kl.' p",
  tomorrow: "'i morgon kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: "P"
};
var nn_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return nn_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const nn_lib_formatRelative = (nn_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/localize/index.js

var nn_lib_localize_eraValues = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["f\xF8r Kristus", "etter Kristus"]
};
var nn_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
};
var nn_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jan.", "feb.", "mars", "apr.", "mai", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "des."],
  wide: ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"]
};
var nn_lib_localize_dayValues = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["su", "m\xE5", "ty", "on", "to", "fr", "lau"],
  abbreviated: ["sun", "m\xE5n", "tys", "ons", "tor", "fre", "laur"],
  wide: ["sundag", "m\xE5ndag", "tysdag", "onsdag", "torsdag", "fredag", "laurdag"]
};
var nn_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "midnatt",
    noon: "middag",
    morning: "p\xE5 morg.",
    afternoon: "p\xE5 etterm.",
    evening: "p\xE5 kvelden",
    night: "p\xE5 natta"
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "p\xE5 morg.",
    afternoon: "p\xE5 etterm.",
    evening: "p\xE5 kvelden",
    night: "p\xE5 natta"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "p\xE5 morgonen",
    afternoon: "p\xE5 ettermiddagen",
    evening: "p\xE5 kvelden",
    night: "p\xE5 natta"
  }
};
var nn_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var nn_lib_localize_localize = {
  ordinalNumber: nn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: nn_lib_localize_dayPeriodValues,
    defaultWidth: "wide"
  })
};
/* harmony default export */ const nn_lib_localize = (nn_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/_lib/match/index.js


var nn_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var nn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var nn_lib_match_matchEraPatterns = {
  narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
  wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
};
var nn_lib_match_parseEraPatterns = {
  any: [/^f/i, /^e/i]
};
var nn_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](\.)? kvartal/i
};
var nn_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var nn_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
  wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
var nn_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^jun/i, /^jul/i, /^aug/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var nn_lib_match_matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(su|må|ty|on|to|fr|la)/i,
  abbreviated: /^(sun|mån|tys|ons|tor|fre|laur)/i,
  wide: /^(sundag|måndag|tysdag|onsdag|torsdag|fredag|laurdag)/i
};
var nn_lib_match_parseDayPatterns = {
  any: [/^s/i, /^m/i, /^ty/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var nn_lib_match_matchDayPeriodPatterns = {
  narrow: /^(midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta)|[ap])/i,
  any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta))/i
};
var nn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a(\.?\s?m\.?)?$/i,
    pm: /^p(\.?\s?m\.?)?$/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgon/i,
    afternoon: /ettermiddag/i,
    evening: /kveld/i,
    night: /natt/i
  }
};
var nn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: nn_lib_match_matchOrdinalNumberPattern,
    parsePattern: nn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nn_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nn_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nn_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: nn_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: nn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: nn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const nn_lib_match = (nn_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/nn/index.js





var nn_locale = {
  code: "nn",
  formatDistance: nn_lib_formatDistance,
  formatLong: nn_lib_formatLong,
  formatRelative: nn_lib_formatRelative,
  localize: nn_lib_localize,
  match: nn_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const nn = (nn_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/formatDistance/index.js
var oc_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "mens d\u2019una segonda",
    other: "mens de {{count}} segondas"
  },
  xSeconds: {
    one: "1 segonda",
    other: "{{count}} segondas"
  },
  halfAMinute: "30 segondas",
  lessThanXMinutes: {
    one: "mens d\u2019una minuta",
    other: "mens de {{count}} minutas"
  },
  xMinutes: {
    one: "1 minuta",
    other: "{{count}} minutas"
  },
  aboutXHours: {
    one: "environ 1 ora",
    other: "environ {{count}} oras"
  },
  xHours: {
    one: "1 ora",
    other: "{{count}} oras"
  },
  xDays: {
    one: "1 jorn",
    other: "{{count}} jorns"
  },
  aboutXWeeks: {
    one: "environ 1 setmana",
    other: "environ {{count}} setmanas"
  },
  xWeeks: {
    one: "1 setmana",
    other: "{{count}} setmanas"
  },
  aboutXMonths: {
    one: "environ 1 mes",
    other: "environ {{count}} meses"
  },
  xMonths: {
    one: "1 mes",
    other: "{{count}} meses"
  },
  aboutXYears: {
    one: "environ 1 an",
    other: "environ {{count}} ans"
  },
  xYears: {
    one: "1 an",
    other: "{{count}} ans"
  },
  overXYears: {
    one: "mai d\u2019un an",
    other: "mai de {{count}} ans"
  },
  almostXYears: {
    one: "gaireben un an",
    other: "gaireben {{count}} ans"
  }
};
var oc_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = oc_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "d\u2019aqu\xED " + result;
    } else {
      return "fa " + result;
    }
  }
  return result;
};
/* harmony default export */ const oc_lib_formatDistance = (oc_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/formatLong/index.js

var oc_lib_formatLong_dateFormats = {
  full: "EEEE d 'de' MMMM y",
  long: "d 'de' MMMM y",
  medium: "d MMM y",
  short: "dd/MM/y"
};
var oc_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var oc_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'a' {{time}}",
  long: "{{date}} 'a' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var oc_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: oc_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: oc_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: oc_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const oc_lib_formatLong = (oc_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/formatRelative/index.js
var oc_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'passat a' p",
  yesterday: "'i\xE8r a' p",
  today: "'u\xE8i a' p",
  tomorrow: "'deman a' p",
  nextWeek: "eeee 'a' p",
  other: "P"
};
var oc_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return oc_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const oc_lib_formatRelative = (oc_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/localize/index.js

var oc_lib_localize_eraValues = {
  narrow: ["ab. J.C.", "apr. J.C."],
  abbreviated: ["ab. J.C.", "apr. J.C."],
  wide: ["abans J\xE8sus-Crist", "apr\xE8s J\xE8sus-Crist"]
};
var oc_lib_localize_quarterValues = {
  narrow: ["T1", "T2", "T3", "T4"],
  abbreviated: ["1\xE8r trim.", "2nd trim.", "3en trim.", "4en trim."],
  wide: ["1\xE8r trim\xE8stre", "2nd trim\xE8stre", "3en trim\xE8stre", "4en trim\xE8stre"]
};
var oc_lib_localize_monthValues = {
  narrow: ["GN", "FB", "M\xC7", "AB", "MA", "JN", "JL", "AG", "ST", "OC", "NV", "DC"],
  abbreviated: ["gen.", "febr.", "mar\xE7", "abr.", "mai", "junh", "jul.", "ag.", "set.", "oct.", "nov.", "dec."],
  wide: ["geni\xE8r", "febri\xE8r", "mar\xE7", "abril", "mai", "junh", "julhet", "agost", "setembre", "oct\xF2bre", "novembre", "decembre"]
};
var oc_lib_localize_dayValues = {
  narrow: ["dg.", "dl.", "dm.", "dc.", "dj.", "dv.", "ds."],
  short: ["dg.", "dl.", "dm.", "dc.", "dj.", "dv.", "ds."],
  abbreviated: ["dg.", "dl.", "dm.", "dc.", "dj.", "dv.", "ds."],
  wide: ["dimenge", "diluns", "dimars", "dim\xE8cres", "dij\xF2us", "divendres", "dissabte"]
};
var oc_lib_localize_dayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "mi\xE8janu\xE8ch",
    noon: "mi\xE8gjorn",
    morning: "matin",
    afternoon: "apr\xE8p-mi\xE8gjorn",
    evening: "v\xE8spre",
    night: "nu\xE8ch"
  },
  abbreviated: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "mi\xE8janu\xE8ch",
    noon: "mi\xE8gjorn",
    morning: "matin",
    afternoon: "apr\xE8p-mi\xE8gjorn",
    evening: "v\xE8spre",
    night: "nu\xE8ch"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "mi\xE8janu\xE8ch",
    noon: "mi\xE8gjorn",
    morning: "matin",
    afternoon: "apr\xE8p-mi\xE8gjorn",
    evening: "v\xE8spre",
    night: "nu\xE8ch"
  }
};
var oc_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "mi\xE8janu\xE8ch",
    noon: "mi\xE8gjorn",
    morning: "del matin",
    afternoon: "de l\u2019apr\xE8p-mi\xE8gjorn",
    evening: "del ser",
    night: "de la nu\xE8ch"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "mi\xE8janu\xE8ch",
    noon: "mi\xE8gjorn",
    morning: "del matin",
    afternoon: "de l\u2019apr\xE8p-mi\xE8gjorn",
    evening: "del ser",
    night: "de la nu\xE8ch"
  },
  wide: {
    am: "ante meridiem",
    pm: "post meridiem",
    midnight: "mi\xE8janu\xE8ch",
    noon: "mi\xE8gjorn",
    morning: "del matin",
    afternoon: "de l\u2019apr\xE8p-mi\xE8gjorn",
    evening: "del ser",
    night: "de la nu\xE8ch"
  }
};
var oc_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  var ordinal;
  switch (number) {
    case 1:
      ordinal = "\xE8r";
      break;
    case 2:
      ordinal = "nd";
      break;
    default:
      ordinal = "en";
  }
  if (unit === "year" || unit === "week" || unit === "hour" || unit === "minute" || unit === "second") {
    ordinal += "a";
  }
  return number + ordinal;
};
var oc_lib_localize_localize = {
  ordinalNumber: oc_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: oc_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: oc_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const oc_lib_localize = (oc_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/_lib/match/index.js


var oc_lib_match_matchOrdinalNumberPattern = /^(\d+)(èr|nd|en)?[a]?/i;
var oc_lib_match_parseOrdinalNumberPattern = /\d+/i;
var oc_lib_match_matchEraPatterns = {
  narrow: /^(ab\.J\.C|apr\.J\.C|apr\.J\.-C)/i,
  abbreviated: /^(ab\.J\.-C|ab\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
  wide: /^(abans Jèsus-Crist|après Jèsus-Crist)/i
};
var oc_lib_match_parseEraPatterns = {
  any: [/^ab/i, /^ap/i]
};
var oc_lib_match_matchQuarterPatterns = {
  narrow: /^T[1234]/i,
  abbreviated: /^[1234](èr|nd|en)? trim\.?/i,
  wide: /^[1234](èr|nd|en)? trimèstre/i
};
var oc_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var oc_lib_match_matchMonthPatterns = {
  narrow: /^(GN|FB|MÇ|AB|MA|JN|JL|AG|ST|OC|NV|DC)/i,
  abbreviated: /^(gen|febr|març|abr|mai|junh|jul|ag|set|oct|nov|dec)\.?/i,
  wide: /^(genièr|febrièr|març|abril|mai|junh|julhet|agost|setembre|octòbre|novembre|decembre)/i
};
var oc_lib_match_parseMonthPatterns = {
  any: [/^g/i, /^f/i, /^ma[r?]|MÇ/i, /^ab/i, /^ma[i?]/i, /^ju[n?]|JN/i, /^ju[l?]|JL/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var oc_lib_match_matchDayPatterns = {
  narrow: /^d[glmcjvs]\.?/i,
  short: /^d[glmcjvs]\.?/i,
  abbreviated: /^d[glmcjvs]\.?/i,
  wide: /^(dimenge|diluns|dimars|dimècres|dijòus|divendres|dissabte)/i
};
var oc_lib_match_parseDayPatterns = {
  narrow: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  short: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  abbreviated: [/^dg/i, /^dl/i, /^dm/i, /^dc/i, /^dj/i, /^dv/i, /^ds/i],
  any: [/^dg|dime/i, /^dl|dil/i, /^dm|dima/i, /^dc|dimè/i, /^dj|dij/i, /^dv|div/i, /^ds|dis/i]
};
var oc_lib_match_matchDayPeriodPatterns = {
  any: /(^(a\.?m|p\.?m))|(ante meridiem|post meridiem)|((del |de la |de l’)(matin|aprèp-miègjorn|vèspre|ser|nuèch))/i
};
var oc_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /(^a)|ante meridiem/i,
    pm: /(^p)|post meridiem/i,
    midnight: /^mièj/i,
    noon: /^mièg/i,
    morning: /matin/i,
    afternoon: /aprèp-miègjorn/i,
    evening: /vèspre|ser/i,
    night: /nuèch/i
  }
};
var oc_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: oc_lib_match_matchOrdinalNumberPattern,
    parsePattern: oc_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: oc_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: oc_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: oc_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: oc_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: oc_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: oc_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const oc_lib_match = (oc_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/oc/index.js





var oc_locale = {
  code: "oc",
  formatDistance: oc_lib_formatDistance,
  formatLong: oc_lib_formatLong,
  formatRelative: oc_lib_formatRelative,
  localize: oc_lib_localize,
  match: oc_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const oc = (oc_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/formatDistance/index.js
var pl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      regular: "mniej ni\u017C sekunda",
      past: "mniej ni\u017C sekund\u0119",
      future: "mniej ni\u017C sekund\u0119"
    },
    twoFour: "mniej ni\u017C {{count}} sekundy",
    other: "mniej ni\u017C {{count}} sekund"
  },
  xSeconds: {
    one: {
      regular: "sekunda",
      past: "sekund\u0119",
      future: "sekund\u0119"
    },
    twoFour: "{{count}} sekundy",
    other: "{{count}} sekund"
  },
  halfAMinute: {
    one: "p\xF3\u0142 minuty",
    twoFour: "p\xF3\u0142 minuty",
    other: "p\xF3\u0142 minuty"
  },
  lessThanXMinutes: {
    one: {
      regular: "mniej ni\u017C minuta",
      past: "mniej ni\u017C minut\u0119",
      future: "mniej ni\u017C minut\u0119"
    },
    twoFour: "mniej ni\u017C {{count}} minuty",
    other: "mniej ni\u017C {{count}} minut"
  },
  xMinutes: {
    one: {
      regular: "minuta",
      past: "minut\u0119",
      future: "minut\u0119"
    },
    twoFour: "{{count}} minuty",
    other: "{{count}} minut"
  },
  aboutXHours: {
    one: {
      regular: "oko\u0142o godziny",
      past: "oko\u0142o godziny",
      future: "oko\u0142o godzin\u0119"
    },
    twoFour: "oko\u0142o {{count}} godziny",
    other: "oko\u0142o {{count}} godzin"
  },
  xHours: {
    one: {
      regular: "godzina",
      past: "godzin\u0119",
      future: "godzin\u0119"
    },
    twoFour: "{{count}} godziny",
    other: "{{count}} godzin"
  },
  xDays: {
    one: {
      regular: "dzie\u0144",
      past: "dzie\u0144",
      future: "1 dzie\u0144"
    },
    twoFour: "{{count}} dni",
    other: "{{count}} dni"
  },
  aboutXWeeks: {
    one: "oko\u0142o tygodnia",
    twoFour: "oko\u0142o {{count}} tygodni",
    other: "oko\u0142o {{count}} tygodni"
  },
  xWeeks: {
    one: "tydzie\u0144",
    twoFour: "{{count}} tygodnie",
    other: "{{count}} tygodni"
  },
  aboutXMonths: {
    one: "oko\u0142o miesi\u0105c",
    twoFour: "oko\u0142o {{count}} miesi\u0105ce",
    other: "oko\u0142o {{count}} miesi\u0119cy"
  },
  xMonths: {
    one: "miesi\u0105c",
    twoFour: "{{count}} miesi\u0105ce",
    other: "{{count}} miesi\u0119cy"
  },
  aboutXYears: {
    one: "oko\u0142o rok",
    twoFour: "oko\u0142o {{count}} lata",
    other: "oko\u0142o {{count}} lat"
  },
  xYears: {
    one: "rok",
    twoFour: "{{count}} lata",
    other: "{{count}} lat"
  },
  overXYears: {
    one: "ponad rok",
    twoFour: "ponad {{count}} lata",
    other: "ponad {{count}} lat"
  },
  almostXYears: {
    one: "prawie rok",
    twoFour: "prawie {{count}} lata",
    other: "prawie {{count}} lat"
  }
};
function declensionGroup(scheme, count) {
  if (count === 1) {
    return scheme.one;
  }
  var rem100 = count % 100;
  if (rem100 <= 20 && rem100 > 10) {
    return scheme.other;
  }
  var rem10 = rem100 % 10;
  if (rem10 >= 2 && rem10 <= 4) {
    return scheme.twoFour;
  }
  return scheme.other;
}
function pl_lib_formatDistance_declension(scheme, count, time) {
  var group = declensionGroup(scheme, count);
  var finalText = typeof group === "string" ? group : group[time];
  return finalText.replace("{{count}}", String(count));
}
var pl_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var scheme = pl_lib_formatDistance_formatDistanceLocale[token];
  if (!(options !== null && options !== void 0 && options.addSuffix)) {
    return pl_lib_formatDistance_declension(scheme, count, "regular");
  }
  if (options.comparison && options.comparison > 0) {
    return "za " + pl_lib_formatDistance_declension(scheme, count, "future");
  } else {
    return pl_lib_formatDistance_declension(scheme, count, "past") + " temu";
  }
};
/* harmony default export */ const pl_lib_formatDistance = (pl_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/formatLong/index.js

var pl_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y",
  long: "do MMMM y",
  medium: "do MMM y",
  short: "dd.MM.y"
};
var pl_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var pl_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var pl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: pl_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: pl_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: pl_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const pl_lib_formatLong = (pl_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/formatRelative/index.js

var adjectivesLastWeek = {
  masculine: "ostatni",
  feminine: "ostatnia"
};
var adjectivesThisWeek = {
  masculine: "ten",
  feminine: "ta"
};
var adjectivesNextWeek = {
  masculine: "nast\u0119pny",
  feminine: "nast\u0119pna"
};
var dayGrammaticalGender = {
  0: "feminine",
  1: "masculine",
  2: "masculine",
  3: "feminine",
  4: "masculine",
  5: "masculine",
  6: "feminine"
};
function dayAndTimeWithAdjective(token, date, baseDate, options) {
  var adjectives;
  if (isSameUTCWeek(date, baseDate, options)) {
    adjectives = adjectivesThisWeek;
  } else if (token === "lastWeek") {
    adjectives = adjectivesLastWeek;
  } else if (token === "nextWeek") {
    adjectives = adjectivesNextWeek;
  } else {
    throw new Error("Cannot determine adjectives for token ".concat(token));
  }
  var day = date.getUTCDay();
  var grammaticalGender = dayGrammaticalGender[day];
  var adjective = adjectives[grammaticalGender];
  return "'".concat(adjective, "' eeee 'o' p");
}
var pl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: dayAndTimeWithAdjective,
  yesterday: "'wczoraj o' p",
  today: "'dzisiaj o' p",
  tomorrow: "'jutro o' p",
  nextWeek: dayAndTimeWithAdjective,
  other: "P"
};
var pl_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = pl_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(token, date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const pl_lib_formatRelative = (pl_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/localize/index.js

var pl_lib_localize_eraValues = {
  narrow: ["p.n.e.", "n.e."],
  abbreviated: ["p.n.e.", "n.e."],
  wide: ["przed nasz\u0105 er\u0105", "naszej ery"]
};
var pl_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["I kw.", "II kw.", "III kw.", "IV kw."],
  wide: ["I kwarta\u0142", "II kwarta\u0142", "III kwarta\u0142", "IV kwarta\u0142"]
};
var pl_lib_localize_monthValues = {
  narrow: ["S", "L", "M", "K", "M", "C", "L", "S", "W", "P", "L", "G"],
  abbreviated: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "pa\u017A", "lis", "gru"],
  wide: ["stycze\u0144", "luty", "marzec", "kwiecie\u0144", "maj", "czerwiec", "lipiec", "sierpie\u0144", "wrzesie\u0144", "pa\u017Adziernik", "listopad", "grudzie\u0144"]
};
var monthFormattingValues = {
  narrow: ["s", "l", "m", "k", "m", "c", "l", "s", "w", "p", "l", "g"],
  abbreviated: ["sty", "lut", "mar", "kwi", "maj", "cze", "lip", "sie", "wrz", "pa\u017A", "lis", "gru"],
  wide: ["stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "wrze\u015Bnia", "pa\u017Adziernika", "listopada", "grudnia"]
};
var pl_lib_localize_dayValues = {
  narrow: ["N", "P", "W", "\u015A", "C", "P", "S"],
  short: ["nie", "pon", "wto", "\u015Bro", "czw", "pi\u0105", "sob"],
  abbreviated: ["niedz.", "pon.", "wt.", "\u015Br.", "czw.", "pt.", "sob."],
  wide: ["niedziela", "poniedzia\u0142ek", "wtorek", "\u015Broda", "czwartek", "pi\u0105tek", "sobota"]
};
var dayFormattingValues = {
  narrow: ["n", "p", "w", "\u015B", "c", "p", "s"],
  short: ["nie", "pon", "wto", "\u015Bro", "czw", "pi\u0105", "sob"],
  abbreviated: ["niedz.", "pon.", "wt.", "\u015Br.", "czw.", "pt.", "sob."],
  wide: ["niedziela", "poniedzia\u0142ek", "wtorek", "\u015Broda", "czwartek", "pi\u0105tek", "sobota"]
};
var pl_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "p\xF3\u0142n.",
    noon: "po\u0142",
    morning: "rano",
    afternoon: "popo\u0142.",
    evening: "wiecz.",
    night: "noc"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "p\xF3\u0142noc",
    noon: "po\u0142udnie",
    morning: "rano",
    afternoon: "popo\u0142udnie",
    evening: "wiecz\xF3r",
    night: "noc"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "p\xF3\u0142noc",
    noon: "po\u0142udnie",
    morning: "rano",
    afternoon: "popo\u0142udnie",
    evening: "wiecz\xF3r",
    night: "noc"
  }
};
var dayPeriodFormattingValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "o p\xF3\u0142n.",
    noon: "w po\u0142.",
    morning: "rano",
    afternoon: "po po\u0142.",
    evening: "wiecz.",
    night: "w nocy"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "o p\xF3\u0142nocy",
    noon: "w po\u0142udnie",
    morning: "rano",
    afternoon: "po po\u0142udniu",
    evening: "wieczorem",
    night: "w nocy"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "o p\xF3\u0142nocy",
    noon: "w po\u0142udnie",
    morning: "rano",
    afternoon: "po po\u0142udniu",
    evening: "wieczorem",
    night: "w nocy"
  }
};
var pl_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var pl_lib_localize_localize = {
  ordinalNumber: pl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: monthFormattingValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_dayValues,
    defaultWidth: "wide",
    formattingValues: dayFormattingValues,
    defaultFormattingWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: pl_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: dayPeriodFormattingValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const pl_lib_localize = (pl_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/_lib/match/index.js


var pl_lib_match_matchOrdinalNumberPattern = /^(\d+)?/i;
var pl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var pl_lib_match_matchEraPatterns = {
  narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
  wide: /^(przed\s*nasz(ą|a)\s*er(ą|a)|naszej\s*ery)/i
};
var pl_lib_match_parseEraPatterns = {
  any: [/^p/i, /^n/i]
};
var pl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
  wide: /^(I|II|III|IV)\s*kwarta(ł|l)/i
};
var pl_lib_match_parseQuarterPatterns = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/^I kw/i, /^II kw/i, /^III kw/i, /^IV kw/i]
};
var pl_lib_match_matchMonthPatterns = {
  narrow: /^[slmkcwpg]/i,
  abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(ź|z)|lis|gru)/i,
  wide: /^(stycznia|stycze(ń|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(ń|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(ń|n)|wrze(ś|s)nia|wrzesie(ń|n)|pa(ź|z)dziernika|pa(ź|z)dziernik|listopada|listopad|grudnia|grudzie(ń|n))/i
};
var pl_lib_match_parseMonthPatterns = {
  narrow: [/^s/i, /^l/i, /^m/i, /^k/i, /^m/i, /^c/i, /^l/i, /^s/i, /^w/i, /^p/i, /^l/i, /^g/i],
  any: [/^st/i, /^lu/i, /^mar/i, /^k/i, /^maj/i, /^c/i, /^lip/i, /^si/i, /^w/i, /^p/i, /^lis/i, /^g/i]
};
var pl_lib_match_matchDayPatterns = {
  narrow: /^[npwścs]/i,
  short: /^(nie|pon|wto|(ś|s)ro|czw|pi(ą|a)|sob)/i,
  abbreviated: /^(niedz|pon|wt|(ś|s)r|czw|pt|sob)\.?/i,
  wide: /^(niedziela|poniedzia(ł|l)ek|wtorek|(ś|s)roda|czwartek|pi(ą|a)tek|sobota)/i
};
var pl_lib_match_parseDayPatterns = {
  narrow: [/^n/i, /^p/i, /^w/i, /^ś/i, /^c/i, /^p/i, /^s/i],
  abbreviated: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pt/i, /^so/i],
  any: [/^n/i, /^po/i, /^w/i, /^(ś|s)r/i, /^c/i, /^pi/i, /^so/i]
};
var pl_lib_match_matchDayPeriodPatterns = {
  narrow: /^(^a$|^p$|pó(ł|l)n\.?|o\s*pó(ł|l)n\.?|po(ł|l)\.?|w\s*po(ł|l)\.?|po\s*po(ł|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
  any: /^(am|pm|pó(ł|l)noc|o\s*pó(ł|l)nocy|po(ł|l)udnie|w\s*po(ł|l)udnie|popo(ł|l)udnie|po\s*po(ł|l)udniu|rano|wieczór|wieczorem|noc|w\s*nocy)/i
};
var pl_lib_match_parseDayPeriodPatterns = {
  narrow: {
    am: /^a$/i,
    pm: /^p$/i,
    midnight: /pó(ł|l)n/i,
    noon: /po(ł|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(ł|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  },
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /pó(ł|l)n/i,
    noon: /po(ł|l)/i,
    morning: /rano/i,
    afternoon: /po\s*po(ł|l)/i,
    evening: /wiecz/i,
    night: /noc/i
  }
};
var pl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: pl_lib_match_matchOrdinalNumberPattern,
    parsePattern: pl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pl_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pl_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pl_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pl_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: pl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const pl_lib_match = (pl_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pl/index.js





var pl_locale = {
  code: "pl",
  formatDistance: pl_lib_formatDistance,
  formatLong: pl_lib_formatLong,
  formatRelative: pl_lib_formatRelative,
  localize: pl_lib_localize,
  match: pl_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const pl = (pl_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/formatDistance/index.js
var pt_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "menos de um segundo",
    other: "menos de {{count}} segundos"
  },
  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundos"
  },
  halfAMinute: "meio minuto",
  lessThanXMinutes: {
    one: "menos de um minuto",
    other: "menos de {{count}} minutos"
  },
  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutos"
  },
  aboutXHours: {
    one: "aproximadamente 1 hora",
    other: "aproximadamente {{count}} horas"
  },
  xHours: {
    one: "1 hora",
    other: "{{count}} horas"
  },
  xDays: {
    one: "1 dia",
    other: "{{count}} dias"
  },
  aboutXWeeks: {
    one: "aproximadamente 1 semana",
    other: "aproximadamente {{count}} semanas"
  },
  xWeeks: {
    one: "1 semana",
    other: "{{count}} semanas"
  },
  aboutXMonths: {
    one: "aproximadamente 1 m\xEAs",
    other: "aproximadamente {{count}} meses"
  },
  xMonths: {
    one: "1 m\xEAs",
    other: "{{count}} meses"
  },
  aboutXYears: {
    one: "aproximadamente 1 ano",
    other: "aproximadamente {{count}} anos"
  },
  xYears: {
    one: "1 ano",
    other: "{{count}} anos"
  },
  overXYears: {
    one: "mais de 1 ano",
    other: "mais de {{count}} anos"
  },
  almostXYears: {
    one: "quase 1 ano",
    other: "quase {{count}} anos"
  }
};
var pt_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = pt_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "daqui a " + result;
    } else {
      return "h\xE1 " + result;
    }
  }
  return result;
};
/* harmony default export */ const pt_lib_formatDistance = (pt_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/formatLong/index.js

var pt_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: "d 'de' MMM 'de' y",
  short: "dd/MM/y"
};
var pt_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var pt_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\xE0s' {{time}}",
  long: "{{date}} '\xE0s' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var pt_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const pt_lib_formatLong = (pt_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/formatRelative/index.js
var pt_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var weekday = date.getUTCDay();
    var last = weekday === 0 || weekday === 6 ? "\xFAltimo" : "\xFAltima";
    return "'" + last + "' eeee '\xE0s' p";
  },
  yesterday: "'ontem \xE0s' p",
  today: "'hoje \xE0s' p",
  tomorrow: "'amanh\xE3 \xE0s' p",
  nextWeek: "eeee '\xE0s' p",
  other: "P"
};
var pt_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  var format = pt_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const pt_lib_formatRelative = (pt_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/localize/index.js

var pt_lib_localize_eraValues = {
  narrow: ["aC", "dC"],
  abbreviated: ["a.C.", "d.C."],
  wide: ["antes de Cristo", "depois de Cristo"]
};
var pt_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1\xBA trimestre", "2\xBA trimestre", "3\xBA trimestre", "4\xBA trimestre"]
};
var pt_lib_localize_monthValues = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"],
  wide: ["janeiro", "fevereiro", "mar\xE7o", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"]
};
var pt_lib_localize_dayValues = {
  narrow: ["d", "s", "t", "q", "q", "s", "s"],
  short: ["dom", "seg", "ter", "qua", "qui", "sex", "s\xE1b"],
  abbreviated: ["dom", "seg", "ter", "qua", "qui", "sex", "s\xE1b"],
  wide: ["domingo", "segunda-feira", "ter\xE7a-feira", "quarta-feira", "quinta-feira", "sexta-feira", "s\xE1bado"]
};
var pt_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manh\xE3",
    afternoon: "tarde",
    evening: "noite",
    night: "madrugada"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manh\xE3",
    afternoon: "tarde",
    evening: "noite",
    night: "madrugada"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manh\xE3",
    afternoon: "tarde",
    evening: "noite",
    night: "madrugada"
  }
};
var pt_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manh\xE3",
    afternoon: "da tarde",
    evening: "da noite",
    night: "da madrugada"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manh\xE3",
    afternoon: "da tarde",
    evening: "da noite",
    night: "da madrugada"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manh\xE3",
    afternoon: "da tarde",
    evening: "da noite",
    night: "da madrugada"
  }
};
var pt_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "\xBA";
};
var pt_lib_localize_localize = {
  ordinalNumber: pt_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: pt_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: pt_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const pt_lib_localize = (pt_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/_lib/match/index.js


var pt_lib_match_matchOrdinalNumberPattern = /^(\d+)(º|ª)?/i;
var pt_lib_match_parseOrdinalNumberPattern = /\d+/i;
var pt_lib_match_matchEraPatterns = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
  wide: /^(antes de cristo|antes da era comum|depois de cristo|era comum)/i
};
var pt_lib_match_parseEraPatterns = {
  any: [/^ac/i, /^dc/i],
  wide: [/^(antes de cristo|antes da era comum)/i, /^(depois de cristo|era comum)/i]
};
var pt_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º|ª)? trimestre/i
};
var pt_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var pt_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
var pt_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ab/i, /^mai/i, /^jun/i, /^jul/i, /^ag/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var pt_lib_match_matchDayPatterns = {
  narrow: /^[dstq]/i,
  short: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
  wide: /^(domingo|segunda-?\s?feira|terça-?\s?feira|quarta-?\s?feira|quinta-?\s?feira|sexta-?\s?feira|s[áa]bado)/i
};
var pt_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^s/i, /^t/i, /^q/i, /^q/i, /^s/i, /^s/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[áa]/i]
};
var pt_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i,
  any: /^([ap]\.?\s?m\.?|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i
};
var pt_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^meia/i,
    noon: /^meio/i,
    morning: /manh[ãa]/i,
    afternoon: /tarde/i,
    evening: /noite/i,
    night: /madrugada/i
  }
};
var pt_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: pt_lib_match_matchOrdinalNumberPattern,
    parsePattern: pt_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pt_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pt_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pt_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pt_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: pt_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const pt_lib_match = (pt_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt/index.js





var pt_locale = {
  code: "pt",
  formatDistance: pt_lib_formatDistance,
  formatLong: pt_lib_formatLong,
  formatRelative: pt_lib_formatRelative,
  localize: pt_lib_localize,
  match: pt_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const pt = (pt_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/formatDistance/index.js
var pt_BR_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "menos de um segundo",
    other: "menos de {{count}} segundos"
  },
  xSeconds: {
    one: "1 segundo",
    other: "{{count}} segundos"
  },
  halfAMinute: "meio minuto",
  lessThanXMinutes: {
    one: "menos de um minuto",
    other: "menos de {{count}} minutos"
  },
  xMinutes: {
    one: "1 minuto",
    other: "{{count}} minutos"
  },
  aboutXHours: {
    one: "cerca de 1 hora",
    other: "cerca de {{count}} horas"
  },
  xHours: {
    one: "1 hora",
    other: "{{count}} horas"
  },
  xDays: {
    one: "1 dia",
    other: "{{count}} dias"
  },
  aboutXWeeks: {
    one: "cerca de 1 semana",
    other: "cerca de {{count}} semanas"
  },
  xWeeks: {
    one: "1 semana",
    other: "{{count}} semanas"
  },
  aboutXMonths: {
    one: "cerca de 1 m\xEAs",
    other: "cerca de {{count}} meses"
  },
  xMonths: {
    one: "1 m\xEAs",
    other: "{{count}} meses"
  },
  aboutXYears: {
    one: "cerca de 1 ano",
    other: "cerca de {{count}} anos"
  },
  xYears: {
    one: "1 ano",
    other: "{{count}} anos"
  },
  overXYears: {
    one: "mais de 1 ano",
    other: "mais de {{count}} anos"
  },
  almostXYears: {
    one: "quase 1 ano",
    other: "quase {{count}} anos"
  }
};
var pt_BR_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = pt_BR_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "em " + result;
    } else {
      return "h\xE1 " + result;
    }
  }
  return result;
};
/* harmony default export */ const pt_BR_lib_formatDistance = (pt_BR_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/formatLong/index.js

var pt_BR_lib_formatLong_dateFormats = {
  full: "EEEE, d 'de' MMMM 'de' y",
  long: "d 'de' MMMM 'de' y",
  medium: "d MMM y",
  short: "dd/MM/yyyy"
};
var pt_BR_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var pt_BR_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\xE0s' {{time}}",
  long: "{{date}} '\xE0s' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var pt_BR_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_BR_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_BR_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: pt_BR_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const pt_BR_lib_formatLong = (pt_BR_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/formatRelative/index.js
var pt_BR_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var weekday = date.getUTCDay();
    var last = weekday === 0 || weekday === 6 ? "\xFAltimo" : "\xFAltima";
    return "'" + last + "' eeee '\xE0s' p";
  },
  yesterday: "'ontem \xE0s' p",
  today: "'hoje \xE0s' p",
  tomorrow: "'amanh\xE3 \xE0s' p",
  nextWeek: "eeee '\xE0s' p",
  other: "P"
};
var pt_BR_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  var format = pt_BR_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const pt_BR_lib_formatRelative = (pt_BR_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/localize/index.js

var pt_BR_lib_localize_eraValues = {
  narrow: ["AC", "DC"],
  abbreviated: ["AC", "DC"],
  wide: ["antes de cristo", "depois de cristo"]
};
var pt_BR_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["1\xBA trimestre", "2\xBA trimestre", "3\xBA trimestre", "4\xBA trimestre"]
};
var pt_BR_lib_localize_monthValues = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: ["jan", "fev", "mar", "abr", "mai", "jun", "jul", "ago", "set", "out", "nov", "dez"],
  wide: ["janeiro", "fevereiro", "mar\xE7o", "abril", "maio", "junho", "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"]
};
var pt_BR_lib_localize_dayValues = {
  narrow: ["D", "S", "T", "Q", "Q", "S", "S"],
  short: ["dom", "seg", "ter", "qua", "qui", "sex", "sab"],
  abbreviated: ["domingo", "segunda", "ter\xE7a", "quarta", "quinta", "sexta", "s\xE1bado"],
  wide: ["domingo", "segunda-feira", "ter\xE7a-feira", "quarta-feira", "quinta-feira", "sexta-feira", "s\xE1bado"]
};
var pt_BR_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "manh\xE3",
    afternoon: "tarde",
    evening: "tarde",
    night: "noite"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manh\xE3",
    afternoon: "tarde",
    evening: "tarde",
    night: "noite"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "manh\xE3",
    afternoon: "tarde",
    evening: "tarde",
    night: "noite"
  }
};
var pt_BR_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "md",
    morning: "da manh\xE3",
    afternoon: "da tarde",
    evening: "da tarde",
    night: "da noite"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manh\xE3",
    afternoon: "da tarde",
    evening: "da tarde",
    night: "da noite"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "meia-noite",
    noon: "meio-dia",
    morning: "da manh\xE3",
    afternoon: "da tarde",
    evening: "da tarde",
    night: "da noite"
  }
};
var pt_BR_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  if ((options === null || options === void 0 ? void 0 : options.unit) === "week") {
    return number + "\xAA";
  }
  return number + "\xBA";
};
var pt_BR_lib_localize_localize = {
  ordinalNumber: pt_BR_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: pt_BR_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: pt_BR_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const pt_BR_lib_localize = (pt_BR_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/_lib/match/index.js


var pt_BR_lib_match_matchOrdinalNumberPattern = /^(\d+)[ºªo]?/i;
var pt_BR_lib_match_parseOrdinalNumberPattern = /\d+/i;
var pt_BR_lib_match_matchEraPatterns = {
  narrow: /^(ac|dc|a|d)/i,
  abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
  wide: /^(antes de cristo|depois de cristo)/i
};
var pt_BR_lib_match_parseEraPatterns = {
  any: [/^ac/i, /^dc/i],
  wide: [/^antes de cristo/i, /^depois de cristo/i]
};
var pt_BR_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^[1234](º)? trimestre/i
};
var pt_BR_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var pt_BR_lib_match_matchMonthPatterns = {
  narrow: /^[jfmajsond]/i,
  abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
  wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
var pt_BR_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^fev/i, /^mar/i, /^abr/i, /^mai/i, /^jun/i, /^jul/i, /^ago/i, /^set/i, /^out/i, /^nov/i, /^dez/i]
};
var pt_BR_lib_match_matchDayPatterns = {
  narrow: /^(dom|[23456]ª?|s[aá]b)/i,
  short: /^(dom|[23456]ª?|s[aá]b)/i,
  abbreviated: /^(dom|seg|ter|qua|qui|sex|s[aá]b)/i,
  wide: /^(domingo|(segunda|ter[cç]a|quarta|quinta|sexta)([- ]feira)?|s[aá]bado)/i
};
var pt_BR_lib_match_parseDayPatterns = {
  short: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
  narrow: [/^d/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^s[aá]/i],
  any: [/^d/i, /^seg/i, /^t/i, /^qua/i, /^qui/i, /^sex/i, /^s[aá]b/i]
};
var pt_BR_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|md|(da) (manhã|tarde|noite))/i,
  any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manhã|tarde|noite))/i
};
var pt_BR_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn|^meia[-\s]noite/i,
    noon: /^md|^meio[-\s]dia/i,
    morning: /manhã/i,
    afternoon: /tarde/i,
    evening: /tarde/i,
    night: /noite/i
  }
};
var pt_BR_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: pt_BR_lib_match_matchOrdinalNumberPattern,
    parsePattern: pt_BR_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pt_BR_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pt_BR_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pt_BR_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: pt_BR_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: pt_BR_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: pt_BR_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const pt_BR_lib_match = (pt_BR_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/pt-BR/index.js





var pt_BR_locale = {
  code: "pt-BR",
  formatDistance: pt_BR_lib_formatDistance,
  formatLong: pt_BR_lib_formatLong,
  formatRelative: pt_BR_lib_formatRelative,
  localize: pt_BR_lib_localize,
  match: pt_BR_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const pt_BR = (pt_BR_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/formatDistance/index.js
var ro_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "mai pu\u021Bin de o secund\u0103",
    other: "mai pu\u021Bin de {{count}} secunde"
  },
  xSeconds: {
    one: "1 secund\u0103",
    other: "{{count}} secunde"
  },
  halfAMinute: "jum\u0103tate de minut",
  lessThanXMinutes: {
    one: "mai pu\u021Bin de un minut",
    other: "mai pu\u021Bin de {{count}} minute"
  },
  xMinutes: {
    one: "1 minut",
    other: "{{count}} minute"
  },
  aboutXHours: {
    one: "circa 1 or\u0103",
    other: "circa {{count}} ore"
  },
  xHours: {
    one: "1 or\u0103",
    other: "{{count}} ore"
  },
  xDays: {
    one: "1 zi",
    other: "{{count}} zile"
  },
  aboutXWeeks: {
    one: "circa o s\u0103pt\u0103m\xE2n\u0103",
    other: "circa {{count}} s\u0103pt\u0103m\xE2ni"
  },
  xWeeks: {
    one: "1 s\u0103pt\u0103m\xE2n\u0103",
    other: "{{count}} s\u0103pt\u0103m\xE2ni"
  },
  aboutXMonths: {
    one: "circa 1 lun\u0103",
    other: "circa {{count}} luni"
  },
  xMonths: {
    one: "1 lun\u0103",
    other: "{{count}} luni"
  },
  aboutXYears: {
    one: "circa 1 an",
    other: "circa {{count}} ani"
  },
  xYears: {
    one: "1 an",
    other: "{{count}} ani"
  },
  overXYears: {
    one: "peste 1 an",
    other: "peste {{count}} ani"
  },
  almostXYears: {
    one: "aproape 1 an",
    other: "aproape {{count}} ani"
  }
};
var ro_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = ro_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\xEEn " + result;
    } else {
      return result + " \xEEn urm\u0103";
    }
  }
  return result;
};
/* harmony default export */ const ro_lib_formatDistance = (ro_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/formatLong/index.js

var ro_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM yyyy",
  long: "d MMMM yyyy",
  medium: "d MMM yyyy",
  short: "dd.MM.yyyy"
};
var ro_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var ro_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'la' {{time}}",
  long: "{{date}} 'la' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ro_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ro_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ro_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ro_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ro_lib_formatLong = (ro_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/formatRelative/index.js
var ro_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'trecut\u0103 la' p",
  yesterday: "'ieri la' p",
  today: "'ast\u0103zi la' p",
  tomorrow: "'m\xE2ine la' p",
  nextWeek: "eeee 'viitoare la' p",
  other: "P"
};
var ro_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ro_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ro_lib_formatRelative = (ro_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/localize/index.js

var ro_lib_localize_eraValues = {
  narrow: ["\xCE", "D"],
  abbreviated: ["\xCE.d.C.", "D.C."],
  wide: ["\xCEnainte de Cristos", "Dup\u0103 Cristos"]
};
var ro_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["T1", "T2", "T3", "T4"],
  wide: ["primul trimestru", "al doilea trimestru", "al treilea trimestru", "al patrulea trimestru"]
};
var ro_lib_localize_monthValues = {
  narrow: ["I", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"],
  abbreviated: ["ian", "feb", "mar", "apr", "mai", "iun", "iul", "aug", "sep", "oct", "noi", "dec"],
  wide: ["ianuarie", "februarie", "martie", "aprilie", "mai", "iunie", "iulie", "august", "septembrie", "octombrie", "noiembrie", "decembrie"]
};
var ro_lib_localize_dayValues = {
  narrow: ["d", "l", "m", "m", "j", "v", "s"],
  short: ["du", "lu", "ma", "mi", "jo", "vi", "s\xE2"],
  abbreviated: ["dum", "lun", "mar", "mie", "joi", "vin", "s\xE2m"],
  wide: ["duminic\u0103", "luni", "mar\u021Bi", "miercuri", "joi", "vineri", "s\xE2mb\u0103t\u0103"]
};
var ro_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "ami",
    morning: "dim",
    afternoon: "da",
    evening: "s",
    night: "n"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "miezul nop\u021Bii",
    noon: "amiaz\u0103",
    morning: "diminea\u021B\u0103",
    afternoon: "dup\u0103-amiaz\u0103",
    evening: "sear\u0103",
    night: "noapte"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "miezul nop\u021Bii",
    noon: "amiaz\u0103",
    morning: "diminea\u021B\u0103",
    afternoon: "dup\u0103-amiaz\u0103",
    evening: "sear\u0103",
    night: "noapte"
  }
};
var ro_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mn",
    noon: "amiaz\u0103",
    morning: "diminea\u021B\u0103",
    afternoon: "dup\u0103-amiaz\u0103",
    evening: "sear\u0103",
    night: "noapte"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "miezul nop\u021Bii",
    noon: "amiaz\u0103",
    morning: "diminea\u021B\u0103",
    afternoon: "dup\u0103-amiaz\u0103",
    evening: "sear\u0103",
    night: "noapte"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "miezul nop\u021Bii",
    noon: "amiaz\u0103",
    morning: "diminea\u021B\u0103",
    afternoon: "dup\u0103-amiaz\u0103",
    evening: "sear\u0103",
    night: "noapte"
  }
};
var ro_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var ro_lib_localize_localize = {
  ordinalNumber: ro_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ro_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ro_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ro_lib_localize = (ro_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/_lib/match/index.js


var ro_lib_match_matchOrdinalNumberPattern = /^(\d+)?/i;
var ro_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ro_lib_match_matchEraPatterns = {
  narrow: /^(Î|D)/i,
  abbreviated: /^(Î\.?\s?d\.?\s?C\.?|Î\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
  wide: /^(Înainte de Cristos|Înaintea erei noastre|După Cristos|Era noastră)/i
};
var ro_lib_match_parseEraPatterns = {
  any: [/^ÎC/i, /^DC/i],
  wide: [/^(Înainte de Cristos|Înaintea erei noastre)/i, /^(După Cristos|Era noastră)/i]
};
var ro_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^T[1234]/i,
  wide: /^trimestrul [1234]/i
};
var ro_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ro_lib_match_matchMonthPatterns = {
  narrow: /^[ifmaasond]/i,
  abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
  wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i
};
var ro_lib_match_parseMonthPatterns = {
  narrow: [/^i/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ia/i, /^f/i, /^mar/i, /^ap/i, /^mai/i, /^iun/i, /^iul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var ro_lib_match_matchDayPatterns = {
  narrow: /^[dlmjvs]/i,
  short: /^(d|l|ma|mi|j|v|s)/i,
  abbreviated: /^(dum|lun|mar|mie|jo|vi|sâ)/i,
  wide: /^(duminica|luni|marţi|miercuri|joi|vineri|sâmbătă)/i
};
var ro_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^l/i, /^m/i, /^m/i, /^j/i, /^v/i, /^s/i],
  any: [/^d/i, /^l/i, /^ma/i, /^mi/i, /^j/i, /^v/i, /^s/i]
};
var ro_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|mn|a|(dimineaţa|după-amiaza|seara|noaptea))/i,
  any: /^([ap]\.?\s?m\.?|miezul nopții|amiaza|(dimineaţa|după-amiaza|seara|noaptea))/i
};
var ro_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mn/i,
    noon: /amiaza/i,
    morning: /dimineaţa/i,
    afternoon: /după-amiaza/i,
    evening: /seara/i,
    night: /noaptea/i
  }
};
var ro_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ro_lib_match_matchOrdinalNumberPattern,
    parsePattern: ro_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ro_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ro_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ro_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ro_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ro_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ro_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ro_lib_match = (ro_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ro/index.js





var ro_locale = {
  code: "ro",
  formatDistance: ro_lib_formatDistance,
  formatLong: ro_lib_formatLong,
  formatRelative: ro_lib_formatRelative,
  localize: ro_lib_localize,
  match: ro_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ro = (ro_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/formatDistance/index.js
function ru_lib_formatDistance_declension(scheme, count) {
  if (scheme.one !== void 0 && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}
function ru_lib_formatDistance_buildLocalizeTokenFn(scheme) {
  return function(count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return ru_lib_formatDistance_declension(scheme.future, count);
        } else {
          return "\u0447\u0435\u0440\u0435\u0437 " + ru_lib_formatDistance_declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return ru_lib_formatDistance_declension(scheme.past, count);
        } else {
          return ru_lib_formatDistance_declension(scheme.regular, count) + " \u043D\u0430\u0437\u0430\u0434";
        }
      }
    } else {
      return ru_lib_formatDistance_declension(scheme.regular, count);
    }
  };
}
var ru_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      one: "\u043C\u0435\u043D\u044C\u0448\u0435 \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      singularNominative: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      singularGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434",
      pluralGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    future: {
      one: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularNominative: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    }
  }),
  xSeconds: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    past: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443 \u043D\u0430\u0437\u0430\u0434",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B \u043D\u0430\u0437\u0430\u0434",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u043D\u0430\u0437\u0430\u0434"
    },
    future: {
      singularNominative: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
      pluralGenitive: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    }
  }),
  halfAMinute: function halfAMinute(_count, options) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return "\u0447\u0435\u0440\u0435\u0437 \u043F\u043E\u043B\u043C\u0438\u043D\u0443\u0442\u044B";
      } else {
        return "\u043F\u043E\u043B\u043C\u0438\u043D\u0443\u0442\u044B \u043D\u0430\u0437\u0430\u0434";
      }
    }
    return "\u043F\u043E\u043B\u043C\u0438\u043D\u0443\u0442\u044B";
  },
  lessThanXMinutes: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      one: "\u043C\u0435\u043D\u044C\u0448\u0435 \u043C\u0438\u043D\u0443\u0442\u044B",
      singularNominative: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u043C\u0438\u043D\u0443\u0442\u044B",
      singularGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u043C\u0438\u043D\u0443\u0442",
      pluralGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u043C\u0438\u043D\u0443\u0442"
    },
    future: {
      one: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 \u043C\u0438\u043D\u0443\u0442\u0443",
      singularNominative: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442\u0443",
      singularGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442\u044B",
      pluralGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442"
    }
  }),
  xMinutes: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0430",
      singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u044B",
      pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442"
    },
    past: {
      singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0443 \u043D\u0430\u0437\u0430\u0434",
      singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u044B \u043D\u0430\u0437\u0430\u0434",
      pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u043D\u0430\u0437\u0430\u0434"
    },
    future: {
      singularNominative: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442\u0443",
      singularGenitive: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442\u044B",
      pluralGenitive: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442"
    }
  }),
  aboutXHours: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0447\u0430\u0441\u0430",
      singularGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0447\u0430\u0441\u043E\u0432",
      pluralGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0447\u0430\u0441\u043E\u0432"
    },
    future: {
      singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0447\u0430\u0441",
      singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0447\u0430\u0441\u0430",
      pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0447\u0430\u0441\u043E\u0432"
    }
  }),
  xHours: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0447\u0430\u0441",
      singularGenitive: "{{count}} \u0447\u0430\u0441\u0430",
      pluralGenitive: "{{count}} \u0447\u0430\u0441\u043E\u0432"
    }
  }),
  xDays: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0434\u0435\u043D\u044C",
      singularGenitive: "{{count}} \u0434\u043D\u044F",
      pluralGenitive: "{{count}} \u0434\u043D\u0435\u0439"
    }
  }),
  aboutXWeeks: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043D\u0435\u0434\u0435\u043B\u0438",
      singularGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043D\u0435\u0434\u0435\u043B\u044C",
      pluralGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043D\u0435\u0434\u0435\u043B\u044C"
    },
    future: {
      singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043D\u0435\u0434\u0435\u043B\u044E",
      singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043D\u0435\u0434\u0435\u043B\u0438",
      pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043D\u0435\u0434\u0435\u043B\u044C"
    }
  }),
  xWeeks: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u043D\u0435\u0434\u0435\u043B\u044F",
      singularGenitive: "{{count}} \u043D\u0435\u0434\u0435\u043B\u0438",
      pluralGenitive: "{{count}} \u043D\u0435\u0434\u0435\u043B\u044C"
    }
  }),
  aboutXMonths: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
      singularGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043C\u0435\u0441\u044F\u0446\u0435\u0432",
      pluralGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043C\u0435\u0441\u044F\u0446\u0435\u0432"
    },
    future: {
      singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446",
      singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
      pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0435\u0432"
    }
  }),
  xMonths: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u043C\u0435\u0441\u044F\u0446",
      singularGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
      pluralGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0435\u0432"
    }
  }),
  aboutXYears: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0433\u043E\u0434\u0430",
      singularGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043B\u0435\u0442",
      pluralGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043B\u0435\u0442"
    },
    future: {
      singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434\u0430",
      pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043B\u0435\u0442"
    }
  }),
  xYears: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0433\u043E\u0434",
      singularGenitive: "{{count}} \u0433\u043E\u0434\u0430",
      pluralGenitive: "{{count}} \u043B\u0435\u0442"
    }
  }),
  overXYears: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0431\u043E\u043B\u044C\u0448\u0435 {{count}} \u0433\u043E\u0434\u0430",
      singularGenitive: "\u0431\u043E\u043B\u044C\u0448\u0435 {{count}} \u043B\u0435\u0442",
      pluralGenitive: "\u0431\u043E\u043B\u044C\u0448\u0435 {{count}} \u043B\u0435\u0442"
    },
    future: {
      singularNominative: "\u0431\u043E\u043B\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u0431\u043E\u043B\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434\u0430",
      pluralGenitive: "\u0431\u043E\u043B\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u043B\u0435\u0442"
    }
  }),
  almostXYears: ru_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043F\u043E\u0447\u0442\u0438 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u043F\u043E\u0447\u0442\u0438 {{count}} \u0433\u043E\u0434\u0430",
      pluralGenitive: "\u043F\u043E\u0447\u0442\u0438 {{count}} \u043B\u0435\u0442"
    },
    future: {
      singularNominative: "\u043F\u043E\u0447\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434",
      singularGenitive: "\u043F\u043E\u0447\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434\u0430",
      pluralGenitive: "\u043F\u043E\u0447\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 {{count}} \u043B\u0435\u0442"
    }
  })
};
var ru_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  return ru_lib_formatDistance_formatDistanceLocale[token](count, options);
};
/* harmony default export */ const ru_lib_formatDistance = (ru_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/formatLong/index.js

var ru_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM y '\u0433.'",
  long: "d MMMM y '\u0433.'",
  medium: "d MMM y '\u0433.'",
  short: "dd.MM.y"
};
var ru_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var ru_lib_formatLong_dateTimeFormats = {
  any: "{{date}}, {{time}}"
};
var ru_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ru_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ru_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ru_lib_formatLong_dateTimeFormats,
    defaultWidth: "any"
  })
};
/* harmony default export */ const ru_lib_formatLong = (ru_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/formatRelative/index.js

var ru_lib_formatRelative_accusativeWeekdays = ["\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435", "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A", "\u0432\u0442\u043E\u0440\u043D\u0438\u043A", "\u0441\u0440\u0435\u0434\u0443", "\u0447\u0435\u0442\u0432\u0435\u0440\u0433", "\u043F\u044F\u0442\u043D\u0438\u0446\u0443", "\u0441\u0443\u0431\u0431\u043E\u0442\u0443"];
function ru_lib_formatRelative_lastWeek(day) {
  var weekday = ru_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
      return "'\u0432 \u043F\u0440\u043E\u0448\u043B\u043E\u0435 " + weekday + " \u0432' p";
    case 1:
    case 2:
    case 4:
      return "'\u0432 \u043F\u0440\u043E\u0448\u043B\u044B\u0439 " + weekday + " \u0432' p";
    case 3:
    case 5:
    case 6:
      return "'\u0432 \u043F\u0440\u043E\u0448\u043B\u0443\u044E " + weekday + " \u0432' p";
  }
}
function ru_lib_formatRelative_thisWeek(day) {
  var weekday = ru_lib_formatRelative_accusativeWeekdays[day];
  if (day === 2) {
    return "'\u0432\u043E " + weekday + " \u0432' p";
  } else {
    return "'\u0432 " + weekday + " \u0432' p";
  }
}
function ru_lib_formatRelative_nextWeek(day) {
  var weekday = ru_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
      return "'\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0435 " + weekday + " \u0432' p";
    case 1:
    case 2:
    case 4:
      return "'\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 " + weekday + " \u0432' p";
    case 3:
    case 5:
    case 6:
      return "'\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E " + weekday + " \u0432' p";
  }
}
var ru_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return ru_lib_formatRelative_thisWeek(day);
    } else {
      return ru_lib_formatRelative_lastWeek(day);
    }
  },
  yesterday: "'\u0432\u0447\u0435\u0440\u0430 \u0432' p",
  today: "'\u0441\u0435\u0433\u043E\u0434\u043D\u044F \u0432' p",
  tomorrow: "'\u0437\u0430\u0432\u0442\u0440\u0430 \u0432' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return ru_lib_formatRelative_thisWeek(day);
    } else {
      return ru_lib_formatRelative_nextWeek(day);
    }
  },
  other: "P"
};
var ru_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = ru_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const ru_lib_formatRelative = (ru_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/localize/index.js

var ru_lib_localize_eraValues = {
  narrow: ["\u0434\u043E \u043D.\u044D.", "\u043D.\u044D."],
  abbreviated: ["\u0434\u043E \u043D. \u044D.", "\u043D. \u044D."],
  wide: ["\u0434\u043E \u043D\u0430\u0448\u0435\u0439 \u044D\u0440\u044B", "\u043D\u0430\u0448\u0435\u0439 \u044D\u0440\u044B"]
};
var ru_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-\u0439 \u043A\u0432.", "2-\u0439 \u043A\u0432.", "3-\u0439 \u043A\u0432.", "4-\u0439 \u043A\u0432."],
  wide: ["1-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "2-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "3-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "4-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B"]
};
var ru_lib_localize_monthValues = {
  narrow: ["\u042F", "\u0424", "\u041C", "\u0410", "\u041C", "\u0418", "\u0418", "\u0410", "\u0421", "\u041E", "\u041D", "\u0414"],
  abbreviated: ["\u044F\u043D\u0432.", "\u0444\u0435\u0432.", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440.", "\u043C\u0430\u0439", "\u0438\u044E\u043D\u044C", "\u0438\u044E\u043B\u044C", "\u0430\u0432\u0433.", "\u0441\u0435\u043D\u0442.", "\u043E\u043A\u0442.", "\u043D\u043E\u044F\u0431.", "\u0434\u0435\u043A."],
  wide: ["\u044F\u043D\u0432\u0430\u0440\u044C", "\u0444\u0435\u0432\u0440\u0430\u043B\u044C", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0435\u043B\u044C", "\u043C\u0430\u0439", "\u0438\u044E\u043D\u044C", "\u0438\u044E\u043B\u044C", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C", "\u043E\u043A\u0442\u044F\u0431\u0440\u044C", "\u043D\u043E\u044F\u0431\u0440\u044C", "\u0434\u0435\u043A\u0430\u0431\u0440\u044C"]
};
var ru_lib_localize_formattingMonthValues = {
  narrow: ["\u042F", "\u0424", "\u041C", "\u0410", "\u041C", "\u0418", "\u0418", "\u0410", "\u0421", "\u041E", "\u041D", "\u0414"],
  abbreviated: ["\u044F\u043D\u0432.", "\u0444\u0435\u0432.", "\u043C\u0430\u0440.", "\u0430\u043F\u0440.", "\u043C\u0430\u044F", "\u0438\u044E\u043D.", "\u0438\u044E\u043B.", "\u0430\u0432\u0433.", "\u0441\u0435\u043D\u0442.", "\u043E\u043A\u0442.", "\u043D\u043E\u044F\u0431.", "\u0434\u0435\u043A."],
  wide: ["\u044F\u043D\u0432\u0430\u0440\u044F", "\u0444\u0435\u0432\u0440\u0430\u043B\u044F", "\u043C\u0430\u0440\u0442\u0430", "\u0430\u043F\u0440\u0435\u043B\u044F", "\u043C\u0430\u044F", "\u0438\u044E\u043D\u044F", "\u0438\u044E\u043B\u044F", "\u0430\u0432\u0433\u0443\u0441\u0442\u0430", "\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F", "\u043E\u043A\u0442\u044F\u0431\u0440\u044F", "\u043D\u043E\u044F\u0431\u0440\u044F", "\u0434\u0435\u043A\u0430\u0431\u0440\u044F"]
};
var ru_lib_localize_dayValues = {
  narrow: ["\u0412", "\u041F", "\u0412", "\u0421", "\u0427", "\u041F", "\u0421"],
  short: ["\u0432\u0441", "\u043F\u043D", "\u0432\u0442", "\u0441\u0440", "\u0447\u0442", "\u043F\u0442", "\u0441\u0431"],
  abbreviated: ["\u0432\u0441\u043A", "\u043F\u043D\u0434", "\u0432\u0442\u0440", "\u0441\u0440\u0434", "\u0447\u0442\u0432", "\u043F\u0442\u043D", "\u0441\u0443\u0431"],
  wide: ["\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435", "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A", "\u0432\u0442\u043E\u0440\u043D\u0438\u043A", "\u0441\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0435\u0440\u0433", "\u043F\u044F\u0442\u043D\u0438\u0446\u0430", "\u0441\u0443\u0431\u0431\u043E\u0442\u0430"]
};
var ru_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u043B\u043D.",
    noon: "\u043F\u043E\u043B\u0434.",
    morning: "\u0443\u0442\u0440\u043E",
    afternoon: "\u0434\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u044C"
  },
  abbreviated: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u043B\u043D.",
    noon: "\u043F\u043E\u043B\u0434.",
    morning: "\u0443\u0442\u0440\u043E",
    afternoon: "\u0434\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u044C"
  },
  wide: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u043B\u043D\u043E\u0447\u044C",
    noon: "\u043F\u043E\u043B\u0434\u0435\u043D\u044C",
    morning: "\u0443\u0442\u0440\u043E",
    afternoon: "\u0434\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447\u0435\u0440",
    night: "\u043D\u043E\u0447\u044C"
  }
};
var ru_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u043B\u043D.",
    noon: "\u043F\u043E\u043B\u0434.",
    morning: "\u0443\u0442\u0440\u0430",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u0438"
  },
  abbreviated: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u043B\u043D.",
    noon: "\u043F\u043E\u043B\u0434.",
    morning: "\u0443\u0442\u0440\u0430",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u0438"
  },
  wide: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u043E\u043B\u043D\u043E\u0447\u044C",
    noon: "\u043F\u043E\u043B\u0434\u0435\u043D\u044C",
    morning: "\u0443\u0442\u0440\u0430",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447\u0435\u0440\u0430",
    night: "\u043D\u043E\u0447\u0438"
  }
};
var ru_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  var suffix;
  if (unit === "date") {
    suffix = "-\u0435";
  } else if (unit === "week" || unit === "minute" || unit === "second") {
    suffix = "-\u044F";
  } else {
    suffix = "-\u0439";
  }
  return number + suffix;
};
var ru_lib_localize_localize = {
  ordinalNumber: ru_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: ru_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ru_lib_localize_dayPeriodValues,
    defaultWidth: "any",
    formattingValues: ru_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ru_lib_localize = (ru_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/_lib/match/index.js


var ru_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;
var ru_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ru_lib_match_matchEraPatterns = {
  narrow: /^((до )?н\.?\s?э\.?)/i,
  abbreviated: /^((до )?н\.?\s?э\.?)/i,
  wide: /^(до нашей эры|нашей эры|наша эра)/i
};
var ru_lib_match_parseEraPatterns = {
  any: [/^д/i, /^н/i]
};
var ru_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,
  wide: /^[1234](-?[ыои]?й?)? квартал/i
};
var ru_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ru_lib_match_matchMonthPatterns = {
  narrow: /^[яфмаисонд]/i,
  abbreviated: /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)\.?/i,
  wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i
};
var ru_lib_match_parseMonthPatterns = {
  narrow: [/^я/i, /^ф/i, /^м/i, /^а/i, /^м/i, /^и/i, /^и/i, /^а/i, /^с/i, /^о/i, /^н/i, /^я/i],
  any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^ав/i, /^с/i, /^о/i, /^н/i, /^д/i]
};
var ru_lib_match_matchDayPatterns = {
  narrow: /^[впсч]/i,
  short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\.?/i,
  abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,
  wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i
};
var ru_lib_match_parseDayPatterns = {
  narrow: [/^в/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^в[ос]/i, /^п[он]/i, /^в/i, /^ср/i, /^ч/i, /^п[ят]/i, /^с[уб]/i]
};
var ru_lib_match_matchDayPeriodPatterns = {
  narrow: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
  abbreviated: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
  wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i
};
var ru_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^полн/i,
    noon: /^полд/i,
    morning: /^у/i,
    afternoon: /^д[ен]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var ru_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ru_lib_match_matchOrdinalNumberPattern,
    parsePattern: ru_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ru_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ru_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ru_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ru_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ru_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ru_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ru_lib_match = (ru_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ru/index.js





var ru_locale = {
  code: "ru",
  formatDistance: ru_lib_formatDistance,
  formatLong: ru_lib_formatLong,
  formatRelative: ru_lib_formatRelative,
  localize: ru_lib_localize,
  match: ru_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ru = (ru_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/formatDistance/index.js
function formatDistance_declensionGroup(scheme, count) {
  if (count === 1 && scheme.one) {
    return scheme.one;
  }
  if (count >= 2 && count <= 4 && scheme.twoFour) {
    return scheme.twoFour;
  }
  return scheme.other;
}
function sk_lib_formatDistance_declension(scheme, count, time) {
  var group = formatDistance_declensionGroup(scheme, count);
  var finalText = group[time];
  return finalText.replace("{{count}}", String(count));
}
function extractPreposition(token) {
  var result = ["lessThan", "about", "over", "almost"].filter(function(preposition) {
    return !!token.match(new RegExp("^" + preposition));
  });
  return result[0];
}
function prefixPreposition(preposition) {
  var translation = "";
  if (preposition === "almost") {
    translation = "takmer";
  }
  if (preposition === "about") {
    translation = "pribli\u017Ene";
  }
  return translation.length > 0 ? translation + " " : "";
}
function suffixPreposition(preposition) {
  var translation = "";
  if (preposition === "lessThan") {
    translation = "menej ne\u017E";
  }
  if (preposition === "over") {
    translation = "viac ne\u017E";
  }
  return translation.length > 0 ? translation + " " : "";
}
function lowercaseFirstLetter(string) {
  return string.charAt(0).toLowerCase() + string.slice(1);
}
var sk_lib_formatDistance_formatDistanceLocale = {
  xSeconds: {
    one: {
      present: "sekunda",
      past: "sekundou",
      future: "sekundu"
    },
    twoFour: {
      present: "{{count}} sekundy",
      past: "{{count}} sekundami",
      future: "{{count}} sekundy"
    },
    other: {
      present: "{{count}} sek\xFAnd",
      past: "{{count}} sekundami",
      future: "{{count}} sek\xFAnd"
    }
  },
  halfAMinute: {
    other: {
      present: "pol min\xFAty",
      past: "pol min\xFAtou",
      future: "pol min\xFAty"
    }
  },
  xMinutes: {
    one: {
      present: "min\xFAta",
      past: "min\xFAtou",
      future: "min\xFAtu"
    },
    twoFour: {
      present: "{{count}} min\xFAty",
      past: "{{count}} min\xFAtami",
      future: "{{count}} min\xFAty"
    },
    other: {
      present: "{{count}} min\xFAt",
      past: "{{count}} min\xFAtami",
      future: "{{count}} min\xFAt"
    }
  },
  xHours: {
    one: {
      present: "hodina",
      past: "hodinou",
      future: "hodinu"
    },
    twoFour: {
      present: "{{count}} hodiny",
      past: "{{count}} hodinami",
      future: "{{count}} hodiny"
    },
    other: {
      present: "{{count}} hod\xEDn",
      past: "{{count}} hodinami",
      future: "{{count}} hod\xEDn"
    }
  },
  xDays: {
    one: {
      present: "de\u0148",
      past: "d\u0148om",
      future: "de\u0148"
    },
    twoFour: {
      present: "{{count}} dni",
      past: "{{count}} d\u0148ami",
      future: "{{count}} dni"
    },
    other: {
      present: "{{count}} dn\xED",
      past: "{{count}} d\u0148ami",
      future: "{{count}} dn\xED"
    }
  },
  xWeeks: {
    one: {
      present: "t\xFD\u017Ede\u0148",
      past: "t\xFD\u017Ed\u0148om",
      future: "t\xFD\u017Ede\u0148"
    },
    twoFour: {
      present: "{{count}} t\xFD\u017Edne",
      past: "{{count}} t\xFD\u017Ed\u0148ami",
      future: "{{count}} t\xFD\u017Edne"
    },
    other: {
      present: "{{count}} t\xFD\u017Ed\u0148ov",
      past: "{{count}} t\xFD\u017Ed\u0148ami",
      future: "{{count}} t\xFD\u017Ed\u0148ov"
    }
  },
  xMonths: {
    one: {
      present: "mesiac",
      past: "mesiacom",
      future: "mesiac"
    },
    twoFour: {
      present: "{{count}} mesiace",
      past: "{{count}} mesiacmi",
      future: "{{count}} mesiace"
    },
    other: {
      present: "{{count}} mesiacov",
      past: "{{count}} mesiacmi",
      future: "{{count}} mesiacov"
    }
  },
  xYears: {
    one: {
      present: "rok",
      past: "rokom",
      future: "rok"
    },
    twoFour: {
      present: "{{count}} roky",
      past: "{{count}} rokmi",
      future: "{{count}} roky"
    },
    other: {
      present: "{{count}} rokov",
      past: "{{count}} rokmi",
      future: "{{count}} rokov"
    }
  }
};
var sk_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var preposition = extractPreposition(token) || "";
  var key = lowercaseFirstLetter(token.substring(preposition.length));
  var scheme = sk_lib_formatDistance_formatDistanceLocale[key];
  if (!(options !== null && options !== void 0 && options.addSuffix)) {
    return prefixPreposition(preposition) + suffixPreposition(preposition) + sk_lib_formatDistance_declension(scheme, count, "present");
  }
  if (options.comparison && options.comparison > 0) {
    return prefixPreposition(preposition) + "o " + suffixPreposition(preposition) + sk_lib_formatDistance_declension(scheme, count, "future");
  } else {
    return prefixPreposition(preposition) + "pred " + suffixPreposition(preposition) + sk_lib_formatDistance_declension(scheme, count, "past");
  }
};
/* harmony default export */ const sk_lib_formatDistance = (sk_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/formatLong/index.js

var sk_lib_formatLong_dateFormats = {
  full: "EEEE d. MMMM y",
  long: "d. MMMM y",
  medium: "d. M. y",
  short: "d. M. y"
};
var sk_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var sk_lib_formatLong_dateTimeFormats = {
  full: "{{date}}, {{time}}",
  long: "{{date}}, {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}} {{time}}"
};
var sk_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sk_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sk_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sk_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const sk_lib_formatLong = (sk_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/formatRelative/index.js

var sk_lib_formatRelative_accusativeWeekdays = ["nede\u013Eu", "pondelok", "utorok", "stredu", "\u0161tvrtok", "piatok", "sobotu"];
function sk_lib_formatRelative_lastWeek(day) {
  var weekday = sk_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 6:
      return "'minul\xFA " + weekday + " o' p";
    default:
      return "'minul\xFD' eeee 'o' p";
  }
}
function sk_lib_formatRelative_thisWeek(day) {
  var weekday = sk_lib_formatRelative_accusativeWeekdays[day];
  if (day === 4) {
    return "'vo' eeee 'o' p";
  } else {
    return "'v " + weekday + " o' p";
  }
}
function sk_lib_formatRelative_nextWeek(day) {
  var weekday = sk_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 4:
    case 6:
      return "'bud\xFAcu " + weekday + " o' p";
    default:
      return "'bud\xFAci' eeee 'o' p";
  }
}
var sk_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return sk_lib_formatRelative_thisWeek(day);
    } else {
      return sk_lib_formatRelative_lastWeek(day);
    }
  },
  yesterday: "'v\u010Dera o' p",
  today: "'dnes o' p",
  tomorrow: "'zajtra o' p",
  nextWeek: function nextWeek(date, baseDate, options) {
    var day = date.getUTCDay();
    if (isSameUTCWeek(date, baseDate, options)) {
      return sk_lib_formatRelative_thisWeek(day);
    } else {
      return sk_lib_formatRelative_nextWeek(day);
    }
  },
  other: "P"
};
var sk_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = sk_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const sk_lib_formatRelative = (sk_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/localize/index.js

var sk_lib_localize_eraValues = {
  narrow: ["pred Kr.", "po Kr."],
  abbreviated: ["pred Kr.", "po Kr."],
  wide: ["pred Kristom", "po Kristovi"]
};
var sk_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1. \u0161tvr\u0165rok", "2. \u0161tvr\u0165rok", "3. \u0161tvr\u0165rok", "4. \u0161tvr\u0165rok"]
};
var sk_lib_localize_monthValues = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: ["jan", "feb", "mar", "apr", "m\xE1j", "j\xFAn", "j\xFAl", "aug", "sep", "okt", "nov", "dec"],
  wide: ["janu\xE1r", "febru\xE1r", "marec", "apr\xEDl", "m\xE1j", "j\xFAn", "j\xFAl", "august", "september", "okt\xF3ber", "november", "december"]
};
var sk_lib_localize_formattingMonthValues = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: ["jan", "feb", "mar", "apr", "m\xE1j", "j\xFAn", "j\xFAl", "aug", "sep", "okt", "nov", "dec"],
  wide: ["janu\xE1ra", "febru\xE1ra", "marca", "apr\xEDla", "m\xE1ja", "j\xFAna", "j\xFAla", "augusta", "septembra", "okt\xF3bra", "novembra", "decembra"]
};
var sk_lib_localize_dayValues = {
  narrow: ["n", "p", "u", "s", "\u0161", "p", "s"],
  short: ["ne", "po", "ut", "st", "\u0161t", "pi", "so"],
  abbreviated: ["ne", "po", "ut", "st", "\u0161t", "pi", "so"],
  wide: ["nede\u013Ea", "pondelok", "utorok", "streda", "\u0161tvrtok", "piatok", "sobota"]
};
var sk_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "poln.",
    noon: "pol.",
    morning: "r\xE1no",
    afternoon: "pop.",
    evening: "ve\u010D.",
    night: "noc"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "poln.",
    noon: "pol.",
    morning: "r\xE1no",
    afternoon: "popol.",
    evening: "ve\u010Der",
    night: "noc"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "polnoc",
    noon: "poludnie",
    morning: "r\xE1no",
    afternoon: "popoludnie",
    evening: "ve\u010Der",
    night: "noc"
  }
};
var sk_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "o poln.",
    noon: "nap.",
    morning: "r\xE1no",
    afternoon: "pop.",
    evening: "ve\u010D.",
    night: "v n."
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "o poln.",
    noon: "napol.",
    morning: "r\xE1no",
    afternoon: "popol.",
    evening: "ve\u010Der",
    night: "v noci"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "o polnoci",
    noon: "napoludnie",
    morning: "r\xE1no",
    afternoon: "popoludn\xED",
    evening: "ve\u010Der",
    night: "v noci"
  }
};
var sk_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var sk_lib_localize_localize = {
  ordinalNumber: sk_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: sk_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sk_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: sk_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const sk_lib_localize = (sk_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/_lib/match/index.js


var sk_lib_match_matchOrdinalNumberPattern = /^(\d+)\.?/i;
var sk_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sk_lib_match_matchEraPatterns = {
  narrow: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  abbreviated: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
  wide: /^(pred Kristom|pred na[šs][íi]m letopo[čc]tom|po Kristovi|n[áa][šs]ho letopo[čc]tu)/i
};
var sk_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|n)/i]
};
var sk_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]\. [šs]tvr[ťt]rok/i
};
var sk_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sk_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|m[áa]j|j[úu]n|j[úu]l|aug|sep|okt|nov|dec)/i,
  wide: /^(janu[áa]ra?|febru[áa]ra?|(marec|marca)|apr[íi]la?|m[áa]ja?|j[úu]na?|j[úu]la?|augusta?|(september|septembra)|(okt[óo]ber|okt[óo]bra)|(november|novembra)|(december|decembra))/i
};
var sk_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^m[áa]j/i, /^j[úu]n/i, /^j[úu]l/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var sk_lib_match_matchDayPatterns = {
  narrow: /^[npusšp]/i,
  short: /^(ne|po|ut|st|št|pi|so)/i,
  abbreviated: /^(ne|po|ut|st|št|pi|so)/i,
  wide: /^(nede[ľl]a|pondelok|utorok|streda|[šs]tvrtok|piatok|sobota])/i
};
var sk_lib_match_parseDayPatterns = {
  narrow: [/^n/i, /^p/i, /^u/i, /^s/i, /^š/i, /^p/i, /^s/i],
  any: [/^n/i, /^po/i, /^u/i, /^st/i, /^(št|stv)/i, /^pi/i, /^so/i]
};
var sk_lib_match_matchDayPeriodPatterns = {
  narrow: /^(am|pm|(o )?poln\.?|(nap\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]\.?|(v n\.?|noc))/i,
  abbreviated: /^(am|pm|(o )?poln\.?|(napol\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]er|(v )?noci?)/i,
  any: /^(am|pm|(o )?polnoci?|(na)?poludnie|r[áa]no|popoludn(ie|í|i)|ve[čc]er|(v )?noci?)/i
};
var sk_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^am/i,
    pm: /^pm/i,
    midnight: /poln/i,
    noon: /^(nap|(na)?pol(\.|u))/i,
    morning: /^r[áa]no/i,
    afternoon: /^pop/i,
    evening: /^ve[čc]/i,
    night: /^(noc|v n\.)/i
  }
};
var sk_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sk_lib_match_matchOrdinalNumberPattern,
    parsePattern: sk_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sk_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sk_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sk_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sk_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sk_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: sk_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const sk_lib_match = (sk_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sk/index.js





var sk_locale = {
  code: "sk",
  formatDistance: sk_lib_formatDistance,
  formatLong: sk_lib_formatLong,
  formatRelative: sk_lib_formatRelative,
  localize: sk_lib_localize,
  match: sk_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const sk = (sk_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/formatDistance/index.js
function isPluralType(val) {
  return val.one !== void 0;
}
var sl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    present: {
      one: "manj kot {{count}} sekunda",
      two: "manj kot {{count}} sekundi",
      few: "manj kot {{count}} sekunde",
      other: "manj kot {{count}} sekund"
    },
    past: {
      one: "manj kot {{count}} sekundo",
      two: "manj kot {{count}} sekundama",
      few: "manj kot {{count}} sekundami",
      other: "manj kot {{count}} sekundami"
    },
    future: {
      one: "manj kot {{count}} sekundo",
      two: "manj kot {{count}} sekundi",
      few: "manj kot {{count}} sekunde",
      other: "manj kot {{count}} sekund"
    }
  },
  xSeconds: {
    present: {
      one: "{{count}} sekunda",
      two: "{{count}} sekundi",
      few: "{{count}} sekunde",
      other: "{{count}} sekund"
    },
    past: {
      one: "{{count}} sekundo",
      two: "{{count}} sekundama",
      few: "{{count}} sekundami",
      other: "{{count}} sekundami"
    },
    future: {
      one: "{{count}} sekundo",
      two: "{{count}} sekundi",
      few: "{{count}} sekunde",
      other: "{{count}} sekund"
    }
  },
  halfAMinute: "pol minute",
  lessThanXMinutes: {
    present: {
      one: "manj kot {{count}} minuta",
      two: "manj kot {{count}} minuti",
      few: "manj kot {{count}} minute",
      other: "manj kot {{count}} minut"
    },
    past: {
      one: "manj kot {{count}} minuto",
      two: "manj kot {{count}} minutama",
      few: "manj kot {{count}} minutami",
      other: "manj kot {{count}} minutami"
    },
    future: {
      one: "manj kot {{count}} minuto",
      two: "manj kot {{count}} minuti",
      few: "manj kot {{count}} minute",
      other: "manj kot {{count}} minut"
    }
  },
  xMinutes: {
    present: {
      one: "{{count}} minuta",
      two: "{{count}} minuti",
      few: "{{count}} minute",
      other: "{{count}} minut"
    },
    past: {
      one: "{{count}} minuto",
      two: "{{count}} minutama",
      few: "{{count}} minutami",
      other: "{{count}} minutami"
    },
    future: {
      one: "{{count}} minuto",
      two: "{{count}} minuti",
      few: "{{count}} minute",
      other: "{{count}} minut"
    }
  },
  aboutXHours: {
    present: {
      one: "pribli\u017Eno {{count}} ura",
      two: "pribli\u017Eno {{count}} uri",
      few: "pribli\u017Eno {{count}} ure",
      other: "pribli\u017Eno {{count}} ur"
    },
    past: {
      one: "pribli\u017Eno {{count}} uro",
      two: "pribli\u017Eno {{count}} urama",
      few: "pribli\u017Eno {{count}} urami",
      other: "pribli\u017Eno {{count}} urami"
    },
    future: {
      one: "pribli\u017Eno {{count}} uro",
      two: "pribli\u017Eno {{count}} uri",
      few: "pribli\u017Eno {{count}} ure",
      other: "pribli\u017Eno {{count}} ur"
    }
  },
  xHours: {
    present: {
      one: "{{count}} ura",
      two: "{{count}} uri",
      few: "{{count}} ure",
      other: "{{count}} ur"
    },
    past: {
      one: "{{count}} uro",
      two: "{{count}} urama",
      few: "{{count}} urami",
      other: "{{count}} urami"
    },
    future: {
      one: "{{count}} uro",
      two: "{{count}} uri",
      few: "{{count}} ure",
      other: "{{count}} ur"
    }
  },
  xDays: {
    present: {
      one: "{{count}} dan",
      two: "{{count}} dni",
      few: "{{count}} dni",
      other: "{{count}} dni"
    },
    past: {
      one: "{{count}} dnem",
      two: "{{count}} dnevoma",
      few: "{{count}} dnevi",
      other: "{{count}} dnevi"
    },
    future: {
      one: "{{count}} dan",
      two: "{{count}} dni",
      few: "{{count}} dni",
      other: "{{count}} dni"
    }
  },
  // no tenses for weeks?
  aboutXWeeks: {
    one: "pribli\u017Eno {{count}} teden",
    two: "pribli\u017Eno {{count}} tedna",
    few: "pribli\u017Eno {{count}} tedne",
    other: "pribli\u017Eno {{count}} tednov"
  },
  // no tenses for weeks?
  xWeeks: {
    one: "{{count}} teden",
    two: "{{count}} tedna",
    few: "{{count}} tedne",
    other: "{{count}} tednov"
  },
  aboutXMonths: {
    present: {
      one: "pribli\u017Eno {{count}} mesec",
      two: "pribli\u017Eno {{count}} meseca",
      few: "pribli\u017Eno {{count}} mesece",
      other: "pribli\u017Eno {{count}} mesecev"
    },
    past: {
      one: "pribli\u017Eno {{count}} mesecem",
      two: "pribli\u017Eno {{count}} mesecema",
      few: "pribli\u017Eno {{count}} meseci",
      other: "pribli\u017Eno {{count}} meseci"
    },
    future: {
      one: "pribli\u017Eno {{count}} mesec",
      two: "pribli\u017Eno {{count}} meseca",
      few: "pribli\u017Eno {{count}} mesece",
      other: "pribli\u017Eno {{count}} mesecev"
    }
  },
  xMonths: {
    present: {
      one: "{{count}} mesec",
      two: "{{count}} meseca",
      few: "{{count}} meseci",
      other: "{{count}} mesecev"
    },
    past: {
      one: "{{count}} mesecem",
      two: "{{count}} mesecema",
      few: "{{count}} meseci",
      other: "{{count}} meseci"
    },
    future: {
      one: "{{count}} mesec",
      two: "{{count}} meseca",
      few: "{{count}} mesece",
      other: "{{count}} mesecev"
    }
  },
  aboutXYears: {
    present: {
      one: "pribli\u017Eno {{count}} leto",
      two: "pribli\u017Eno {{count}} leti",
      few: "pribli\u017Eno {{count}} leta",
      other: "pribli\u017Eno {{count}} let"
    },
    past: {
      one: "pribli\u017Eno {{count}} letom",
      two: "pribli\u017Eno {{count}} letoma",
      few: "pribli\u017Eno {{count}} leti",
      other: "pribli\u017Eno {{count}} leti"
    },
    future: {
      one: "pribli\u017Eno {{count}} leto",
      two: "pribli\u017Eno {{count}} leti",
      few: "pribli\u017Eno {{count}} leta",
      other: "pribli\u017Eno {{count}} let"
    }
  },
  xYears: {
    present: {
      one: "{{count}} leto",
      two: "{{count}} leti",
      few: "{{count}} leta",
      other: "{{count}} let"
    },
    past: {
      one: "{{count}} letom",
      two: "{{count}} letoma",
      few: "{{count}} leti",
      other: "{{count}} leti"
    },
    future: {
      one: "{{count}} leto",
      two: "{{count}} leti",
      few: "{{count}} leta",
      other: "{{count}} let"
    }
  },
  overXYears: {
    present: {
      one: "ve\u010D kot {{count}} leto",
      two: "ve\u010D kot {{count}} leti",
      few: "ve\u010D kot {{count}} leta",
      other: "ve\u010D kot {{count}} let"
    },
    past: {
      one: "ve\u010D kot {{count}} letom",
      two: "ve\u010D kot {{count}} letoma",
      few: "ve\u010D kot {{count}} leti",
      other: "ve\u010D kot {{count}} leti"
    },
    future: {
      one: "ve\u010D kot {{count}} leto",
      two: "ve\u010D kot {{count}} leti",
      few: "ve\u010D kot {{count}} leta",
      other: "ve\u010D kot {{count}} let"
    }
  },
  almostXYears: {
    present: {
      one: "skoraj {{count}} leto",
      two: "skoraj {{count}} leti",
      few: "skoraj {{count}} leta",
      other: "skoraj {{count}} let"
    },
    past: {
      one: "skoraj {{count}} letom",
      two: "skoraj {{count}} letoma",
      few: "skoraj {{count}} leti",
      other: "skoraj {{count}} leti"
    },
    future: {
      one: "skoraj {{count}} leto",
      two: "skoraj {{count}} leti",
      few: "skoraj {{count}} leta",
      other: "skoraj {{count}} let"
    }
  }
};
function getFormFromCount(count) {
  switch (count % 100) {
    case 1:
      return "one";
    case 2:
      return "two";
    case 3:
    case 4:
      return "few";
    default:
      return "other";
  }
}
var sl_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result = "";
  var tense = "present";
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      tense = "future";
      result = "\u010Dez ";
    } else {
      tense = "past";
      result = "pred ";
    }
  }
  var tokenValue = sl_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result += tokenValue;
  } else {
    var form = getFormFromCount(count);
    if (isPluralType(tokenValue)) {
      result += tokenValue[form].replace("{{count}}", String(count));
    } else {
      result += tokenValue[tense][form].replace("{{count}}", String(count));
    }
  }
  return result;
};
/* harmony default export */ const sl_lib_formatDistance = (sl_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/formatLong/index.js

var sl_lib_formatLong_dateFormats = {
  full: "EEEE, dd. MMMM y",
  long: "dd. MMMM y",
  medium: "d. MMM y",
  short: "d. MM. yy"
};
var sl_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var sl_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var sl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sl_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sl_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sl_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const sl_lib_formatLong = (sl_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/formatRelative/index.js
var sl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'prej\u0161njo nedeljo ob' p";
      case 3:
        return "'prej\u0161njo sredo ob' p";
      case 6:
        return "'prej\u0161njo soboto ob' p";
      default:
        return "'prej\u0161nji' EEEE 'ob' p";
    }
  },
  yesterday: "'v\u010Deraj ob' p",
  today: "'danes ob' p",
  tomorrow: "'jutri ob' p",
  nextWeek: function nextWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'naslednjo nedeljo ob' p";
      case 3:
        return "'naslednjo sredo ob' p";
      case 6:
        return "'naslednjo soboto ob' p";
      default:
        return "'naslednji' EEEE 'ob' p";
    }
  },
  other: "P"
};
var sl_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  var format = sl_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const sl_lib_formatRelative = (sl_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/localize/index.js

var sl_lib_localize_eraValues = {
  narrow: ["pr. n. \u0161t.", "po n. \u0161t."],
  abbreviated: ["pr. n. \u0161t.", "po n. \u0161t."],
  wide: ["pred na\u0161im \u0161tetjem", "po na\u0161em \u0161tetju"]
};
var sl_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1. \u010Det.", "2. \u010Det.", "3. \u010Det.", "4. \u010Det."],
  wide: ["1. \u010Detrtletje", "2. \u010Detrtletje", "3. \u010Detrtletje", "4. \u010Detrtletje"]
};
var sl_lib_localize_monthValues = {
  narrow: ["j", "f", "m", "a", "m", "j", "j", "a", "s", "o", "n", "d"],
  abbreviated: ["jan.", "feb.", "mar.", "apr.", "maj", "jun.", "jul.", "avg.", "sep.", "okt.", "nov.", "dec."],
  wide: ["januar", "februar", "marec", "april", "maj", "junij", "julij", "avgust", "september", "oktober", "november", "december"]
};
var sl_lib_localize_dayValues = {
  narrow: ["n", "p", "t", "s", "\u010D", "p", "s"],
  short: ["ned.", "pon.", "tor.", "sre.", "\u010Det.", "pet.", "sob."],
  abbreviated: ["ned.", "pon.", "tor.", "sre.", "\u010Det.", "pet.", "sob."],
  wide: ["nedelja", "ponedeljek", "torek", "sreda", "\u010Detrtek", "petek", "sobota"]
};
var sl_lib_localize_dayPeriodValues = {
  narrow: {
    am: "d",
    pm: "p",
    midnight: "24.00",
    noon: "12.00",
    morning: "j",
    afternoon: "p",
    evening: "v",
    night: "n"
  },
  abbreviated: {
    am: "dop.",
    pm: "pop.",
    midnight: "poln.",
    noon: "pold.",
    morning: "jut.",
    afternoon: "pop.",
    evening: "ve\u010D.",
    night: "no\u010D"
  },
  wide: {
    am: "dop.",
    pm: "pop.",
    midnight: "polno\u010D",
    noon: "poldne",
    morning: "jutro",
    afternoon: "popoldne",
    evening: "ve\u010Der",
    night: "no\u010D"
  }
};
var sl_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "d",
    pm: "p",
    midnight: "24.00",
    noon: "12.00",
    morning: "zj",
    afternoon: "p",
    evening: "zv",
    night: "po"
  },
  abbreviated: {
    am: "dop.",
    pm: "pop.",
    midnight: "opoln.",
    noon: "opold.",
    morning: "zjut.",
    afternoon: "pop.",
    evening: "zve\u010D.",
    night: "pono\u010Di"
  },
  wide: {
    am: "dop.",
    pm: "pop.",
    midnight: "opolno\u010Di",
    noon: "opoldne",
    morning: "zjutraj",
    afternoon: "popoldan",
    evening: "zve\u010Der",
    night: "pono\u010Di"
  }
};
var sl_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var sl_lib_localize_localize = {
  ordinalNumber: sl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sl_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: sl_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const sl_lib_localize = (sl_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/_lib/match/index.js


var sl_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var sl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sl_lib_match_matchEraPatterns = {
  abbreviated: /^(pr\. n\. št\.|po n\. št\.)/i,
  wide: /^(pred Kristusom|pred na[sš]im [sš]tetjem|po Kristusu|po na[sš]em [sš]tetju|na[sš]ega [sš]tetja)/i
};
var sl_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|na[sš]em)/i]
};
var sl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?[čc]et\.?/i,
  wide: /^[1234]\. [čc]etrtletje/i
};
var sl_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sl_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan\.|feb\.|mar\.|apr\.|maj|jun\.|jul\.|avg\.|sep\.|okt\.|nov\.|dec\.)/i,
  wide: /^(januar|februar|marec|april|maj|junij|julij|avgust|september|oktober|november|december)/i
};
var sl_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  abbreviated: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i],
  wide: [/^ja/i, /^fe/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var sl_lib_match_matchDayPatterns = {
  narrow: /^[nptsčc]/i,
  short: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
  abbreviated: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
  wide: /^(nedelja|ponedeljek|torek|sreda|[cč]etrtek|petek|sobota)/i
};
var sl_lib_match_parseDayPatterns = {
  narrow: [/^n/i, /^p/i, /^t/i, /^s/i, /^[cč]/i, /^p/i, /^s/i],
  any: [/^n/i, /^po/i, /^t/i, /^sr/i, /^[cč]/i, /^pe/i, /^so/i]
};
var sl_lib_match_matchDayPeriodPatterns = {
  narrow: /^(d|po?|z?v|n|z?j|24\.00|12\.00)/i,
  any: /^(dop\.|pop\.|o?poln(\.|o[cč]i?)|o?pold(\.|ne)|z?ve[cč](\.|er)|(po)?no[cč]i?|popold(ne|an)|jut(\.|ro)|zjut(\.|raj))/i
};
var sl_lib_match_parseDayPeriodPatterns = {
  narrow: {
    am: /^d/i,
    pm: /^p/i,
    midnight: /^24/i,
    noon: /^12/i,
    morning: /^(z?j)/i,
    afternoon: /^p/i,
    evening: /^(z?v)/i,
    night: /^(n|po)/i
  },
  any: {
    am: /^dop\./i,
    pm: /^pop\./i,
    midnight: /^o?poln/i,
    noon: /^o?pold/i,
    morning: /j/i,
    afternoon: /^pop\./i,
    evening: /^z?ve/i,
    night: /(po)?no/i
  }
};
var sl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sl_lib_match_matchOrdinalNumberPattern,
    parsePattern: sl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sl_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sl_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sl_lib_match_parseMonthPatterns,
    defaultParseWidth: "wide"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sl_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: sl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const sl_lib_match = (sl_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sl/index.js





var sl_locale = {
  code: "sl",
  formatDistance: sl_lib_formatDistance,
  formatLong: sl_lib_formatLong,
  formatRelative: sl_lib_formatRelative,
  localize: sl_lib_localize,
  match: sl_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const sl = (sl_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/formatDistance/index.js
var sq_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "m\xEB pak se nj\xEB sekond\xEB",
    other: "m\xEB pak se {{count}} sekonda"
  },
  xSeconds: {
    one: "1 sekond\xEB",
    other: "{{count}} sekonda"
  },
  halfAMinute: "gjys\xEBm minuti",
  lessThanXMinutes: {
    one: "m\xEB pak se nj\xEB minute",
    other: "m\xEB pak se {{count}} minuta"
  },
  xMinutes: {
    one: "1 minut\xEB",
    other: "{{count}} minuta"
  },
  aboutXHours: {
    one: "rreth 1 or\xEB",
    other: "rreth {{count}} or\xEB"
  },
  xHours: {
    one: "1 or\xEB",
    other: "{{count}} or\xEB"
  },
  xDays: {
    one: "1 dit\xEB",
    other: "{{count}} dit\xEB"
  },
  aboutXWeeks: {
    one: "rreth 1 jav\xEB",
    other: "rreth {{count}} jav\xEB"
  },
  xWeeks: {
    one: "1 jav\xEB",
    other: "{{count}} jav\xEB"
  },
  aboutXMonths: {
    one: "rreth 1 muaj",
    other: "rreth {{count}} muaj"
  },
  xMonths: {
    one: "1 muaj",
    other: "{{count}} muaj"
  },
  aboutXYears: {
    one: "rreth 1 vit",
    other: "rreth {{count}} vite"
  },
  xYears: {
    one: "1 vit",
    other: "{{count}} vite"
  },
  overXYears: {
    one: "mbi 1 vit",
    other: "mbi {{count}} vite"
  },
  almostXYears: {
    one: "pothuajse 1 vit",
    other: "pothuajse {{count}} vite"
  }
};
var sq_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = sq_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "n\xEB " + result;
    } else {
      return result + " m\xEB par\xEB";
    }
  }
  return result;
};
/* harmony default export */ const sq_lib_formatDistance = (sq_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/formatLong/index.js

var sq_lib_formatLong_dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var sq_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var sq_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'n\xEB' {{time}}",
  long: "{{date}} 'n\xEB' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var sq_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sq_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sq_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sq_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const sq_lib_formatLong = (sq_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/formatRelative/index.js
var sq_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'t\xEB' eeee 'e shkuar n\xEB' p",
  yesterday: "'dje n\xEB' p",
  today: "'sot n\xEB' p",
  tomorrow: "'nes\xEBr n\xEB' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var sq_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return sq_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const sq_lib_formatRelative = (sq_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/localize/index.js

var sq_lib_localize_eraValues = {
  narrow: ["P", "M"],
  abbreviated: ["PK", "MK"],
  wide: ["Para Krishtit", "Mbas Krishtit"]
};
var sq_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["4-mujori I", "4-mujori II", "4-mujori III", "4-mujori IV"]
};
var sq_lib_localize_monthValues = {
  narrow: ["J", "S", "M", "P", "M", "Q", "K", "G", "S", "T", "N", "D"],
  abbreviated: ["Jan", "Shk", "Mar", "Pri", "Maj", "Qer", "Kor", "Gus", "Sht", "Tet", "N\xEBn", "Dhj"],
  wide: ["Janar", "Shkurt", "Mars", "Prill", "Maj", "Qershor", "Korrik", "Gusht", "Shtator", "Tetor", "N\xEBntor", "Dhjetor"]
};
var sq_lib_localize_dayValues = {
  narrow: ["D", "H", "M", "M", "E", "P", "S"],
  short: ["Di", "H\xEB", "Ma", "M\xEB", "En", "Pr", "Sh"],
  abbreviated: ["Die", "H\xEBn", "Mar", "M\xEBr", "Enj", "Pre", "Sht"],
  wide: ["Diel\xEB", "H\xEBn\xEB", "Mart\xEB", "M\xEBrkur\xEB", "Enjte", "Premte", "Shtun\xEB"]
};
var sq_lib_localize_dayPeriodValues = {
  narrow: {
    am: "p",
    pm: "m",
    midnight: "m",
    noon: "d",
    morning: "m\xEBngjes",
    afternoon: "dite",
    evening: "mbr\xEBmje",
    night: "nat\xEB"
  },
  abbreviated: {
    am: "PD",
    pm: "MD",
    midnight: "mesn\xEBt\xEB",
    noon: "drek",
    morning: "m\xEBngjes",
    afternoon: "mbasdite",
    evening: "mbr\xEBmje",
    night: "nat\xEB"
  },
  wide: {
    am: "p.d.",
    pm: "m.d.",
    midnight: "mesn\xEBt\xEB",
    noon: "drek",
    morning: "m\xEBngjes",
    afternoon: "mbasdite",
    evening: "mbr\xEBmje",
    night: "nat\xEB"
  }
};
var sq_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "p",
    pm: "m",
    midnight: "m",
    noon: "d",
    morning: "n\xEB m\xEBngjes",
    afternoon: "n\xEB mbasdite",
    evening: "n\xEB mbr\xEBmje",
    night: "n\xEB mesnat\xEB"
  },
  abbreviated: {
    am: "PD",
    pm: "MD",
    midnight: "mesnat\xEB",
    noon: "drek",
    morning: "n\xEB m\xEBngjes",
    afternoon: "n\xEB mbasdite",
    evening: "n\xEB mbr\xEBmje",
    night: "n\xEB mesnat\xEB"
  },
  wide: {
    am: "p.d.",
    pm: "m.d.",
    midnight: "mesnat\xEB",
    noon: "drek",
    morning: "n\xEB m\xEBngjes",
    afternoon: "n\xEB mbasdite",
    evening: "n\xEB mbr\xEBmje",
    night: "n\xEB mesnat\xEB"
  }
};
var sq_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  if ((options === null || options === void 0 ? void 0 : options.unit) === "hour")
    return String(number);
  if (number === 1)
    return number + "-r\xEB";
  if (number === 4)
    return number + "t";
  return number + "-t\xEB";
};
var sq_lib_localize_localize = {
  ordinalNumber: sq_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sq_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: sq_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const sq_lib_localize = (sq_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/_lib/match/index.js


var sq_lib_match_matchOrdinalNumberPattern = /^(\d+)(-rë|-të|t|)?/i;
var sq_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sq_lib_match_matchEraPatterns = {
  narrow: /^(p|m)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(para krishtit|mbas krishtit)/i
};
var sq_lib_match_parseEraPatterns = {
  any: [/^b/i, /^(p|m)/i]
};
var sq_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234]-mujori (i{1,3}|iv)/i
};
var sq_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sq_lib_match_matchMonthPatterns = {
  narrow: /^[jsmpqkftnd]/i,
  abbreviated: /^(jan|shk|mar|pri|maj|qer|kor|gus|sht|tet|nën|dhj)/i,
  wide: /^(janar|shkurt|mars|prill|maj|qershor|korrik|gusht|shtator|tetor|nëntor|dhjetor)/i
};
var sq_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^s/i, /^m/i, /^p/i, /^m/i, /^q/i, /^k/i, /^g/i, /^s/i, /^t/i, /^n/i, /^d/i],
  any: [/^ja/i, /^shk/i, /^mar/i, /^pri/i, /^maj/i, /^qer/i, /^kor/i, /^gu/i, /^sht/i, /^tet/i, /^n/i, /^d/i]
};
var sq_lib_match_matchDayPatterns = {
  narrow: /^[dhmeps]/i,
  short: /^(di|hë|ma|më|en|pr|sh)/i,
  abbreviated: /^(die|hën|mar|mër|enj|pre|sht)/i,
  wide: /^(dielë|hënë|martë|mërkurë|enjte|premte|shtunë)/i
};
var sq_lib_match_parseDayPatterns = {
  narrow: [/^d/i, /^h/i, /^m/i, /^m/i, /^e/i, /^p/i, /^s/i],
  any: [/^d/i, /^h/i, /^ma/i, /^më/i, /^e/i, /^p/i, /^s/i]
};
var sq_lib_match_matchDayPeriodPatterns = {
  narrow: /^(p|m|me|në (mëngjes|mbasdite|mbrëmje|mesnatë))/i,
  any: /^([pm]\.?\s?d\.?|drek|në (mëngjes|mbasdite|mbrëmje|mesnatë))/i
};
var sq_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^p/i,
    pm: /^m/i,
    midnight: /^me/i,
    noon: /^dr/i,
    morning: /mëngjes/i,
    afternoon: /mbasdite/i,
    evening: /mbrëmje/i,
    night: /natë/i
  }
};
var sq_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sq_lib_match_matchOrdinalNumberPattern,
    parsePattern: sq_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sq_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sq_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sq_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sq_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sq_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: sq_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const sq_lib_match = (sq_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sq/index.js





var sq_locale = {
  code: "sq",
  formatDistance: sq_lib_formatDistance,
  formatLong: sq_lib_formatLong,
  formatRelative: sq_lib_formatRelative,
  localize: sq_lib_localize,
  match: sq_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const sq = (sq_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/formatDistance/index.js
var sr_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      standalone: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
      withPrepositionAgo: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
      withPrepositionIn: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u0441\u0435\u043A\u0443\u043D\u0434\u0443"
    },
    dual: "\u043C\u0430\u045A\u0435 \u043E\u0434 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
    other: "\u043C\u0430\u045A\u0435 \u043E\u0434 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
  },
  xSeconds: {
    one: {
      standalone: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
      withPrepositionAgo: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
      withPrepositionIn: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0443"
    },
    dual: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
    other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
  },
  halfAMinute: "\u043F\u043E\u043B\u0430 \u043C\u0438\u043D\u0443\u0442\u0435",
  lessThanXMinutes: {
    one: {
      standalone: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u043C\u0438\u043D\u0443\u0442\u0435",
      withPrepositionAgo: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u043C\u0438\u043D\u0443\u0442\u0435",
      withPrepositionIn: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u043C\u0438\u043D\u0443\u0442\u0443"
    },
    dual: "\u043C\u0430\u045A\u0435 \u043E\u0434 {{count}} \u043C\u0438\u043D\u0443\u0442\u0435",
    other: "\u043C\u0430\u045A\u0435 \u043E\u0434 {{count}} \u043C\u0438\u043D\u0443\u0442\u0430"
  },
  xMinutes: {
    one: {
      standalone: "1 \u043C\u0438\u043D\u0443\u0442\u0430",
      withPrepositionAgo: "1 \u043C\u0438\u043D\u0443\u0442\u0435",
      withPrepositionIn: "1 \u043C\u0438\u043D\u0443\u0442\u0443"
    },
    dual: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0435",
    other: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0430"
  },
  aboutXHours: {
    one: {
      standalone: "\u043E\u043A\u043E 1 \u0441\u0430\u0442",
      withPrepositionAgo: "\u043E\u043A\u043E 1 \u0441\u0430\u0442",
      withPrepositionIn: "\u043E\u043A\u043E 1 \u0441\u0430\u0442"
    },
    dual: "\u043E\u043A\u043E {{count}} \u0441\u0430\u0442\u0430",
    other: "\u043E\u043A\u043E {{count}} \u0441\u0430\u0442\u0438"
  },
  xHours: {
    one: {
      standalone: "1 \u0441\u0430\u0442",
      withPrepositionAgo: "1 \u0441\u0430\u0442",
      withPrepositionIn: "1 \u0441\u0430\u0442"
    },
    dual: "{{count}} \u0441\u0430\u0442\u0430",
    other: "{{count}} \u0441\u0430\u0442\u0438"
  },
  xDays: {
    one: {
      standalone: "1 \u0434\u0430\u043D",
      withPrepositionAgo: "1 \u0434\u0430\u043D",
      withPrepositionIn: "1 \u0434\u0430\u043D"
    },
    dual: "{{count}} \u0434\u0430\u043D\u0430",
    other: "{{count}} \u0434\u0430\u043D\u0430"
  },
  aboutXWeeks: {
    one: {
      standalone: "\u043E\u043A\u043E 1 \u043D\u0435\u0434\u0435\u0459\u0443",
      withPrepositionAgo: "\u043E\u043A\u043E 1 \u043D\u0435\u0434\u0435\u0459\u0443",
      withPrepositionIn: "\u043E\u043A\u043E 1 \u043D\u0435\u0434\u0435\u0459\u0443"
    },
    dual: "\u043E\u043A\u043E {{count}} \u043D\u0435\u0434\u0435\u0459\u0435",
    other: "\u043E\u043A\u043E {{count}} \u043D\u0435\u0434\u0435\u0459\u0435"
  },
  xWeeks: {
    one: {
      standalone: "1 \u043D\u0435\u0434\u0435\u0459\u0443",
      withPrepositionAgo: "1 \u043D\u0435\u0434\u0435\u0459\u0443",
      withPrepositionIn: "1 \u043D\u0435\u0434\u0435\u0459\u0443"
    },
    dual: "{{count}} \u043D\u0435\u0434\u0435\u0459\u0435",
    other: "{{count}} \u043D\u0435\u0434\u0435\u0459\u0435"
  },
  aboutXMonths: {
    one: {
      standalone: "\u043E\u043A\u043E 1 \u043C\u0435\u0441\u0435\u0446",
      withPrepositionAgo: "\u043E\u043A\u043E 1 \u043C\u0435\u0441\u0435\u0446",
      withPrepositionIn: "\u043E\u043A\u043E 1 \u043C\u0435\u0441\u0435\u0446"
    },
    dual: "\u043E\u043A\u043E {{count}} \u043C\u0435\u0441\u0435\u0446\u0430",
    other: "\u043E\u043A\u043E {{count}} \u043C\u0435\u0441\u0435\u0446\u0438"
  },
  xMonths: {
    one: {
      standalone: "1 \u043C\u0435\u0441\u0435\u0446",
      withPrepositionAgo: "1 \u043C\u0435\u0441\u0435\u0446",
      withPrepositionIn: "1 \u043C\u0435\u0441\u0435\u0446"
    },
    dual: "{{count}} \u043C\u0435\u0441\u0435\u0446\u0430",
    other: "{{count}} \u043C\u0435\u0441\u0435\u0446\u0438"
  },
  aboutXYears: {
    one: {
      standalone: "\u043E\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
      withPrepositionAgo: "\u043E\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
      withPrepositionIn: "\u043E\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443"
    },
    dual: "\u043E\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0435",
    other: "\u043E\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0430"
  },
  xYears: {
    one: {
      standalone: "1 \u0433\u043E\u0434\u0438\u043D\u0430",
      withPrepositionAgo: "1 \u0433\u043E\u0434\u0438\u043D\u0435",
      withPrepositionIn: "1 \u0433\u043E\u0434\u0438\u043D\u0443"
    },
    dual: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0435",
    other: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0430"
  },
  overXYears: {
    one: {
      standalone: "\u043F\u0440\u0435\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
      withPrepositionAgo: "\u043F\u0440\u0435\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
      withPrepositionIn: "\u043F\u0440\u0435\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443"
    },
    dual: "\u043F\u0440\u0435\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0435",
    other: "\u043F\u0440\u0435\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0430"
  },
  almostXYears: {
    one: {
      standalone: "\u0433\u043E\u0442\u043E\u0432\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
      withPrepositionAgo: "\u0433\u043E\u0442\u043E\u0432\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
      withPrepositionIn: "\u0433\u043E\u0442\u043E\u0432\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443"
    },
    dual: "\u0433\u043E\u0442\u043E\u0432\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0435",
    other: "\u0433\u043E\u0442\u043E\u0432\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0430"
  }
};
var sr_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = sr_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== "1") {
    result = tokenValue.dual.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0437\u0430 " + result;
    } else {
      return "\u043F\u0440\u0435 " + result;
    }
  }
  return result;
};
/* harmony default export */ const sr_lib_formatDistance = (sr_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/formatLong/index.js

var sr_lib_formatLong_dateFormats = {
  full: "EEEE, d. MMMM yyyy.",
  long: "d. MMMM yyyy.",
  medium: "d. MMM yy.",
  short: "dd. MM. yy."
};
var sr_lib_formatLong_timeFormats = {
  full: "HH:mm:ss (zzzz)",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var sr_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u0443' {{time}}",
  long: "{{date}} '\u0443' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var sr_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const sr_lib_formatLong = (sr_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/formatRelative/index.js
var sr_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'\u043F\u0440\u043E\u0448\u043B\u0435 \u043D\u0435\u0434\u0435\u0459\u0435 \u0443' p";
      case 3:
        return "'\u043F\u0440\u043E\u0448\u043B\u0435 \u0441\u0440\u0435\u0434\u0435 \u0443' p";
      case 6:
        return "'\u043F\u0440\u043E\u0448\u043B\u0435 \u0441\u0443\u0431\u043E\u0442\u0435 \u0443' p";
      default:
        return "'\u043F\u0440\u043E\u0448\u043B\u0438' EEEE '\u0443' p";
    }
  },
  yesterday: "'\u0458\u0443\u0447\u0435 \u0443' p",
  today: "'\u0434\u0430\u043D\u0430\u0441 \u0443' p",
  tomorrow: "'\u0441\u0443\u0442\u0440\u0430 \u0443' p",
  nextWeek: function nextWeek(date) {
    var day = date.getUTCDay();
    switch (day) {
      case 0:
        return "'\u0441\u043B\u0435\u0434\u0435\u045B\u0435 \u043D\u0435\u0434\u0435\u0459\u0435 \u0443' p";
      case 3:
        return "'\u0441\u043B\u0435\u0434\u0435\u045B\u0443 \u0441\u0440\u0435\u0434\u0443 \u0443' p";
      case 6:
        return "'\u0441\u043B\u0435\u0434\u0435\u045B\u0443 \u0441\u0443\u0431\u043E\u0442\u0443 \u0443' p";
      default:
        return "'\u0441\u043B\u0435\u0434\u0435\u045B\u0438' EEEE '\u0443' p";
    }
  },
  other: "P"
};
var sr_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  var format = sr_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const sr_lib_formatRelative = (sr_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/localize/index.js

var sr_lib_localize_eraValues = {
  narrow: ["\u043F\u0440.\u043D.\u0435.", "\u0410\u0414"],
  abbreviated: ["\u043F\u0440. \u0425\u0440.", "\u043F\u043E. \u0425\u0440."],
  wide: ["\u041F\u0440\u0435 \u0425\u0440\u0438\u0441\u0442\u0430", "\u041F\u043E\u0441\u043B\u0435 \u0425\u0440\u0438\u0441\u0442\u0430"]
};
var sr_lib_localize_quarterValues = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. \u043A\u0432.", "2. \u043A\u0432.", "3. \u043A\u0432.", "4. \u043A\u0432."],
  wide: ["1. \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "2. \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "3. \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "4. \u043A\u0432\u0430\u0440\u0442\u0430\u043B"]
};
var sr_lib_localize_monthValues = {
  narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
  abbreviated: ["\u0458\u0430\u043D", "\u0444\u0435\u0431", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0432", "\u0434\u0435\u0446"],
  wide: ["\u0458\u0430\u043D\u0443\u0430\u0440", "\u0444\u0435\u0431\u0440\u0443\u0430\u0440", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0438\u043B", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440", "\u043E\u043A\u0442\u043E\u0431\u0430\u0440", "\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440", "\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440"]
};
var sr_lib_localize_formattingMonthValues = {
  narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
  abbreviated: ["\u0458\u0430\u043D", "\u0444\u0435\u0431", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043F", "\u043E\u043A\u0442", "\u043D\u043E\u0432", "\u0434\u0435\u0446"],
  wide: ["\u0458\u0430\u043D\u0443\u0430\u0440", "\u0444\u0435\u0431\u0440\u0443\u0430\u0440", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0438\u043B", "\u043C\u0430\u0458", "\u0458\u0443\u043D", "\u0458\u0443\u043B", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440", "\u043E\u043A\u0442\u043E\u0431\u0430\u0440", "\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440", "\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440"]
};
var sr_lib_localize_dayValues = {
  narrow: ["\u041D", "\u041F", "\u0423", "\u0421", "\u0427", "\u041F", "\u0421"],
  short: ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0443\u0442\u043E", "\u0441\u0440\u0435", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u0443\u0431"],
  abbreviated: ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0443\u0442\u043E", "\u0441\u0440\u0435", "\u0447\u0435\u0442", "\u043F\u0435\u0442", "\u0441\u0443\u0431"],
  wide: ["\u043D\u0435\u0434\u0435\u0459\u0430", "\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u0430\u043A", "\u0443\u0442\u043E\u0440\u0430\u043A", "\u0441\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043A", "\u043F\u0435\u0442\u0430\u043A", "\u0441\u0443\u0431\u043E\u0442\u0430"]
};
var sr_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0410\u041C",
    pm: "\u041F\u041C",
    midnight: "\u043F\u043E\u043D\u043E\u045B",
    noon: "\u043F\u043E\u0434\u043D\u0435",
    morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
    afternoon: "\u043F\u043E\u043F\u043E\u0434\u043D\u0435",
    evening: "\u0443\u0432\u0435\u0447\u0435",
    night: "\u043D\u043E\u045B\u0443"
  },
  abbreviated: {
    am: "\u0410\u041C",
    pm: "\u041F\u041C",
    midnight: "\u043F\u043E\u043D\u043E\u045B",
    noon: "\u043F\u043E\u0434\u043D\u0435",
    morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
    afternoon: "\u043F\u043E\u043F\u043E\u0434\u043D\u0435",
    evening: "\u0443\u0432\u0435\u0447\u0435",
    night: "\u043D\u043E\u045B\u0443"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "\u043F\u043E\u043D\u043E\u045B",
    noon: "\u043F\u043E\u0434\u043D\u0435",
    morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
    afternoon: "\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u0434\u043D\u0435",
    evening: "\u0443\u0432\u0435\u0447\u0435",
    night: "\u043D\u043E\u045B\u0443"
  }
};
var sr_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "\u043F\u043E\u043D\u043E\u045B",
    noon: "\u043F\u043E\u0434\u043D\u0435",
    morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
    afternoon: "\u043F\u043E\u043F\u043E\u0434\u043D\u0435",
    evening: "\u0443\u0432\u0435\u0447\u0435",
    night: "\u043D\u043E\u045B\u0443"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "\u043F\u043E\u043D\u043E\u045B",
    noon: "\u043F\u043E\u0434\u043D\u0435",
    morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
    afternoon: "\u043F\u043E\u043F\u043E\u0434\u043D\u0435",
    evening: "\u0443\u0432\u0435\u0447\u0435",
    night: "\u043D\u043E\u045B\u0443"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "\u043F\u043E\u043D\u043E\u045B",
    noon: "\u043F\u043E\u0434\u043D\u0435",
    morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
    afternoon: "\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u0434\u043D\u0435",
    evening: "\u0443\u0432\u0435\u0447\u0435",
    night: "\u043D\u043E\u045B\u0443"
  }
};
var sr_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var sr_lib_localize_localize = {
  ordinalNumber: sr_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: sr_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sr_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: sr_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const sr_lib_localize = (sr_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/_lib/match/index.js


var sr_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var sr_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sr_lib_match_matchEraPatterns = {
  narrow: /^(пр\.н\.е\.|АД)/i,
  abbreviated: /^(пр\.\s?Хр\.|по\.\s?Хр\.)/i,
  wide: /^(Пре Христа|пре нове ере|После Христа|нова ера)/i
};
var sr_lib_match_parseEraPatterns = {
  any: [/^пр/i, /^(по|нова)/i]
};
var sr_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?кв\.?/i,
  wide: /^[1234]\. квартал/i
};
var sr_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sr_lib_match_matchMonthPatterns = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(јан|феб|мар|апр|мај|јун|јул|авг|сеп|окт|нов|дец)/i,
  wide: /^((јануар|јануара)|(фебруар|фебруара)|(март|марта)|(април|априла)|(мја|маја)|(јун|јуна)|(јул|јула)|(август|августа)|(септембар|септембра)|(октобар|октобра)|(новембар|новембра)|(децембар|децембра))/i
};
var sr_lib_match_parseMonthPatterns = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ја/i, /^ф/i, /^мар/i, /^ап/i, /^мај/i, /^јун/i, /^јул/i, /^авг/i, /^с/i, /^о/i, /^н/i, /^д/i]
};
var sr_lib_match_matchDayPatterns = {
  narrow: /^[пусчн]/i,
  short: /^(нед|пон|уто|сре|чет|пет|суб)/i,
  abbreviated: /^(нед|пон|уто|сре|чет|пет|суб)/i,
  wide: /^(недеља|понедељак|уторак|среда|четвртак|петак|субота)/i
};
var sr_lib_match_parseDayPatterns = {
  narrow: [/^п/i, /^у/i, /^с/i, /^ч/i, /^п/i, /^с/i, /^н/i],
  any: [/^нед/i, /^пон/i, /^уто/i, /^сре/i, /^чет/i, /^пет/i, /^суб/i]
};
var sr_lib_match_matchDayPeriodPatterns = {
  any: /^(ам|пм|поноћ|(по)?подне|увече|ноћу|после подне|ујутру)/i
};
var sr_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^поно/i,
    noon: /^под/i,
    morning: /ујутру/i,
    afternoon: /(после\s|по)+подне/i,
    evening: /(увече)/i,
    night: /(ноћу)/i
  }
};
var sr_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sr_lib_match_matchOrdinalNumberPattern,
    parsePattern: sr_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sr_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sr_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sr_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sr_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: sr_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const sr_lib_match = (sr_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr/index.js





var sr_locale = {
  code: "sr",
  formatDistance: sr_lib_formatDistance,
  formatLong: sr_lib_formatLong,
  formatRelative: sr_lib_formatRelative,
  localize: sr_lib_localize,
  match: sr_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const sr = (sr_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/formatDistance/index.js
var sr_Latn_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      standalone: "manje od 1 sekunde",
      withPrepositionAgo: "manje od 1 sekunde",
      withPrepositionIn: "manje od 1 sekundu"
    },
    dual: "manje od {{count}} sekunde",
    other: "manje od {{count}} sekundi"
  },
  xSeconds: {
    one: {
      standalone: "1 sekunda",
      withPrepositionAgo: "1 sekunde",
      withPrepositionIn: "1 sekundu"
    },
    dual: "{{count}} sekunde",
    other: "{{count}} sekundi"
  },
  halfAMinute: "pola minute",
  lessThanXMinutes: {
    one: {
      standalone: "manje od 1 minute",
      withPrepositionAgo: "manje od 1 minute",
      withPrepositionIn: "manje od 1 minutu"
    },
    dual: "manje od {{count}} minute",
    other: "manje od {{count}} minuta"
  },
  xMinutes: {
    one: {
      standalone: "1 minuta",
      withPrepositionAgo: "1 minute",
      withPrepositionIn: "1 minutu"
    },
    dual: "{{count}} minute",
    other: "{{count}} minuta"
  },
  aboutXHours: {
    one: {
      standalone: "oko 1 sat",
      withPrepositionAgo: "oko 1 sat",
      withPrepositionIn: "oko 1 sat"
    },
    dual: "oko {{count}} sata",
    other: "oko {{count}} sati"
  },
  xHours: {
    one: {
      standalone: "1 sat",
      withPrepositionAgo: "1 sat",
      withPrepositionIn: "1 sat"
    },
    dual: "{{count}} sata",
    other: "{{count}} sati"
  },
  xDays: {
    one: {
      standalone: "1 dan",
      withPrepositionAgo: "1 dan",
      withPrepositionIn: "1 dan"
    },
    dual: "{{count}} dana",
    other: "{{count}} dana"
  },
  aboutXWeeks: {
    one: {
      standalone: "oko 1 nedelju",
      withPrepositionAgo: "oko 1 nedelju",
      withPrepositionIn: "oko 1 nedelju"
    },
    dual: "oko {{count}} nedelje",
    other: "oko {{count}} nedelje"
  },
  xWeeks: {
    one: {
      standalone: "1 nedelju",
      withPrepositionAgo: "1 nedelju",
      withPrepositionIn: "1 nedelju"
    },
    dual: "{{count}} nedelje",
    other: "{{count}} nedelje"
  },
  aboutXMonths: {
    one: {
      standalone: "oko 1 mesec",
      withPrepositionAgo: "oko 1 mesec",
      withPrepositionIn: "oko 1 mesec"
    },
    dual: "oko {{count}} meseca",
    other: "oko {{count}} meseci"
  },
  xMonths: {
    one: {
      standalone: "1 mesec",
      withPrepositionAgo: "1 mesec",
      withPrepositionIn: "1 mesec"
    },
    dual: "{{count}} meseca",
    other: "{{count}} meseci"
  },
  aboutXYears: {
    one: {
      standalone: "oko 1 godinu",
      withPrepositionAgo: "oko 1 godinu",
      withPrepositionIn: "oko 1 godinu"
    },
    dual: "oko {{count}} godine",
    other: "oko {{count}} godina"
  },
  xYears: {
    one: {
      standalone: "1 godina",
      withPrepositionAgo: "1 godine",
      withPrepositionIn: "1 godinu"
    },
    dual: "{{count}} godine",
    other: "{{count}} godina"
  },
  overXYears: {
    one: {
      standalone: "preko 1 godinu",
      withPrepositionAgo: "preko 1 godinu",
      withPrepositionIn: "preko 1 godinu"
    },
    dual: "preko {{count}} godine",
    other: "preko {{count}} godina"
  },
  almostXYears: {
    one: {
      standalone: "gotovo 1 godinu",
      withPrepositionAgo: "gotovo 1 godinu",
      withPrepositionIn: "gotovo 1 godinu"
    },
    dual: "gotovo {{count}} godine",
    other: "gotovo {{count}} godina"
  }
};
var sr_Latn_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = sr_Latn_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    if (options !== null && options !== void 0 && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        result = tokenValue.one.withPrepositionIn;
      } else {
        result = tokenValue.one.withPrepositionAgo;
      }
    } else {
      result = tokenValue.one.standalone;
    }
  } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
  String(count).substr(-2, 1) !== "1") {
    result = tokenValue.dual.replace("{{count}}", String(count));
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "za " + result;
    } else {
      return "pre " + result;
    }
  }
  return result;
};
/* harmony default export */ const sr_Latn_lib_formatDistance = (sr_Latn_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/formatLong/index.js

var sr_Latn_lib_formatLong_dateFormats = {
  full: "EEEE, d. MMMM yyyy.",
  long: "d. MMMM yyyy.",
  medium: "d. MMM yy.",
  short: "dd. MM. yy."
};
var sr_Latn_lib_formatLong_timeFormats = {
  full: "HH:mm:ss (zzzz)",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var sr_Latn_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'u' {{time}}",
  long: "{{date}} 'u' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var sr_Latn_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_Latn_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_Latn_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sr_Latn_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const sr_Latn_lib_formatLong = (sr_Latn_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/formatRelative/index.js
var sr_Latn_lib_formatRelative_formatRelativeLocale = {
  lastWeek: function lastWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'pro\u0161le nedelje u' p";
      case 3:
        return "'pro\u0161le srede u' p";
      case 6:
        return "'pro\u0161le subote u' p";
      default:
        return "'pro\u0161li' EEEE 'u' p";
    }
  },
  yesterday: "'ju\u010De u' p",
  today: "'danas u' p",
  tomorrow: "'sutra u' p",
  nextWeek: function nextWeek(date) {
    switch (date.getUTCDay()) {
      case 0:
        return "'slede\u0107e nedelje u' p";
      case 3:
        return "'slede\u0107u sredu u' p";
      case 6:
        return "'slede\u0107u subotu u' p";
      default:
        return "'slede\u0107i' EEEE 'u' p";
    }
  },
  other: "P"
};
var sr_Latn_lib_formatRelative_formatRelative = function formatRelative2(token, date, _baseDate, _options) {
  var format = sr_Latn_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date);
  }
  return format;
};
/* harmony default export */ const sr_Latn_lib_formatRelative = (sr_Latn_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/localize/index.js

var sr_Latn_lib_localize_eraValues = {
  narrow: ["pr.n.e.", "AD"],
  abbreviated: ["pr. Hr.", "po. Hr."],
  wide: ["Pre Hrista", "Posle Hrista"]
};
var sr_Latn_lib_localize_quarterValues = {
  narrow: ["1.", "2.", "3.", "4."],
  abbreviated: ["1. kv.", "2. kv.", "3. kv.", "4. kv."],
  wide: ["1. kvartal", "2. kvartal", "3. kvartal", "4. kvartal"]
};
var sr_Latn_lib_localize_monthValues = {
  narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
  abbreviated: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec"],
  wide: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar"]
};
var sr_Latn_lib_localize_formattingMonthValues = {
  narrow: ["1.", "2.", "3.", "4.", "5.", "6.", "7.", "8.", "9.", "10.", "11.", "12."],
  abbreviated: ["jan", "feb", "mar", "apr", "maj", "jun", "jul", "avg", "sep", "okt", "nov", "dec"],
  wide: ["januar", "februar", "mart", "april", "maj", "jun", "jul", "avgust", "septembar", "oktobar", "novembar", "decembar"]
};
var sr_Latn_lib_localize_dayValues = {
  narrow: ["N", "P", "U", "S", "\u010C", "P", "S"],
  short: ["ned", "pon", "uto", "sre", "\u010Det", "pet", "sub"],
  abbreviated: ["ned", "pon", "uto", "sre", "\u010Det", "pet", "sub"],
  wide: ["nedelja", "ponedeljak", "utorak", "sreda", "\u010Detvrtak", "petak", "subota"]
};
var sr_Latn_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uve\u010De",
    night: "no\u0107u"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uve\u010De",
    night: "no\u0107u"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "posle podne",
    evening: "uve\u010De",
    night: "no\u0107u"
  }
};
var sr_Latn_lib_localize_dayPeriodValues = {
  narrow: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uve\u010De",
    night: "no\u0107u"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "popodne",
    evening: "uve\u010De",
    night: "no\u0107u"
  },
  wide: {
    am: "AM",
    pm: "PM",
    midnight: "pono\u0107",
    noon: "podne",
    morning: "ujutru",
    afternoon: "posle podne",
    evening: "uve\u010De",
    night: "no\u0107u"
  }
};
var sr_Latn_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var sr_Latn_lib_localize_localize = {
  ordinalNumber: sr_Latn_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: sr_Latn_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sr_Latn_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: sr_Latn_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const sr_Latn_lib_localize = (sr_Latn_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/_lib/match/index.js


var sr_Latn_lib_match_matchOrdinalNumberPattern = /^(\d+)\./i;
var sr_Latn_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sr_Latn_lib_match_matchEraPatterns = {
  narrow: /^(pr\.n\.e\.|AD)/i,
  abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
  wide: /^(Pre Hrista|pre nove ere|Posle Hrista|nova era)/i
};
var sr_Latn_lib_match_parseEraPatterns = {
  any: [/^pr/i, /^(po|nova)/i]
};
var sr_Latn_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]\.\s?kv\.?/i,
  wide: /^[1234]\. kvartal/i
};
var sr_Latn_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sr_Latn_lib_match_matchMonthPatterns = {
  narrow: /^(10|11|12|[123456789])\./i,
  abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
  wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(jun|juna)|(jul|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
};
var sr_Latn_lib_match_parseMonthPatterns = {
  narrow: [/^1/i, /^2/i, /^3/i, /^4/i, /^5/i, /^6/i, /^7/i, /^8/i, /^9/i, /^10/i, /^11/i, /^12/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^avg/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var sr_Latn_lib_match_matchDayPatterns = {
  narrow: /^[npusčc]/i,
  short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
  abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
  wide: /^(nedelja|ponedeljak|utorak|sreda|(četvrtak|cetvrtak)|petak|subota)/i
};
var sr_Latn_lib_match_parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var sr_Latn_lib_match_matchDayPeriodPatterns = {
  any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|posle podne|ujutru)/i
};
var sr_Latn_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^pono/i,
    noon: /^pod/i,
    morning: /jutro/i,
    afternoon: /(posle\s|po)+podne/i,
    evening: /(uvece|uveče)/i,
    night: /(nocu|noću)/i
  }
};
var sr_Latn_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sr_Latn_lib_match_matchOrdinalNumberPattern,
    parsePattern: sr_Latn_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sr_Latn_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sr_Latn_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sr_Latn_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sr_Latn_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sr_Latn_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: sr_Latn_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const sr_Latn_lib_match = (sr_Latn_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sr-Latn/index.js





var sr_Latn_locale = {
  code: "sr-Latn",
  formatDistance: sr_Latn_lib_formatDistance,
  formatLong: sr_Latn_lib_formatLong,
  formatRelative: sr_Latn_lib_formatRelative,
  localize: sr_Latn_lib_localize,
  match: sr_Latn_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const sr_Latn = (sr_Latn_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/formatDistance/index.js
var sv_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "mindre \xE4n en sekund",
    other: "mindre \xE4n {{count}} sekunder"
  },
  xSeconds: {
    one: "en sekund",
    other: "{{count}} sekunder"
  },
  halfAMinute: "en halv minut",
  lessThanXMinutes: {
    one: "mindre \xE4n en minut",
    other: "mindre \xE4n {{count}} minuter"
  },
  xMinutes: {
    one: "en minut",
    other: "{{count}} minuter"
  },
  aboutXHours: {
    one: "ungef\xE4r en timme",
    other: "ungef\xE4r {{count}} timmar"
  },
  xHours: {
    one: "en timme",
    other: "{{count}} timmar"
  },
  xDays: {
    one: "en dag",
    other: "{{count}} dagar"
  },
  aboutXWeeks: {
    one: "ungef\xE4r en vecka",
    other: "ungef\xE4r {{count}} vecka"
  },
  xWeeks: {
    one: "en vecka",
    other: "{{count}} vecka"
  },
  aboutXMonths: {
    one: "ungef\xE4r en m\xE5nad",
    other: "ungef\xE4r {{count}} m\xE5nader"
  },
  xMonths: {
    one: "en m\xE5nad",
    other: "{{count}} m\xE5nader"
  },
  aboutXYears: {
    one: "ungef\xE4r ett \xE5r",
    other: "ungef\xE4r {{count}} \xE5r"
  },
  xYears: {
    one: "ett \xE5r",
    other: "{{count}} \xE5r"
  },
  overXYears: {
    one: "\xF6ver ett \xE5r",
    other: "\xF6ver {{count}} \xE5r"
  },
  almostXYears: {
    one: "n\xE4stan ett \xE5r",
    other: "n\xE4stan {{count}} \xE5r"
  }
};
var formatDistance_wordMapping = ["noll", "en", "tv\xE5", "tre", "fyra", "fem", "sex", "sju", "\xE5tta", "nio", "tio", "elva", "tolv"];
var sv_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = sv_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    if (options && options.onlyNumeric) {
      result = tokenValue.other.replace("{{count}}", String(count));
    } else {
      result = tokenValue.other.replace("{{count}}", count < 13 ? formatDistance_wordMapping[count] : String(count));
    }
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "om " + result;
    } else {
      return result + " sedan";
    }
  }
  return result;
};
/* harmony default export */ const sv_lib_formatDistance = (sv_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/formatLong/index.js

var sv_lib_formatLong_dateFormats = {
  full: "EEEE d MMMM y",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "y-MM-dd"
};
var sv_lib_formatLong_timeFormats = {
  full: "'kl'. HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var sv_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'kl.' {{time}}",
  long: "{{date}} 'kl.' {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var sv_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: sv_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: sv_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: sv_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const sv_lib_formatLong = (sv_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/formatRelative/index.js
var sv_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'i' EEEE's kl.' p",
  yesterday: "'ig\xE5r kl.' p",
  today: "'idag kl.' p",
  tomorrow: "'imorgon kl.' p",
  nextWeek: "EEEE 'kl.' p",
  other: "P"
};
var sv_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return sv_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const sv_lib_formatRelative = (sv_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/localize/index.js

var sv_lib_localize_eraValues = {
  narrow: ["f.Kr.", "e.Kr."],
  abbreviated: ["f.Kr.", "e.Kr."],
  wide: ["f\xF6re Kristus", "efter Kristus"]
};
var sv_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1:a kvartalet", "2:a kvartalet", "3:e kvartalet", "4:e kvartalet"]
};
var sv_lib_localize_monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["jan.", "feb.", "mars", "apr.", "maj", "juni", "juli", "aug.", "sep.", "okt.", "nov.", "dec."],
  wide: ["januari", "februari", "mars", "april", "maj", "juni", "juli", "augusti", "september", "oktober", "november", "december"]
};
var sv_lib_localize_dayValues = {
  narrow: ["S", "M", "T", "O", "T", "F", "L"],
  short: ["s\xF6", "m\xE5", "ti", "on", "to", "fr", "l\xF6"],
  abbreviated: ["s\xF6n", "m\xE5n", "tis", "ons", "tors", "fre", "l\xF6r"],
  wide: ["s\xF6ndag", "m\xE5ndag", "tisdag", "onsdag", "torsdag", "fredag", "l\xF6rdag"]
};
var sv_lib_localize_dayPeriodValues = {
  narrow: {
    am: "fm",
    pm: "em",
    midnight: "midnatt",
    noon: "middag",
    morning: "morg.",
    afternoon: "efterm.",
    evening: "kv\xE4ll",
    night: "natt"
  },
  abbreviated: {
    am: "f.m.",
    pm: "e.m.",
    midnight: "midnatt",
    noon: "middag",
    morning: "morgon",
    afternoon: "efterm.",
    evening: "kv\xE4ll",
    night: "natt"
  },
  wide: {
    am: "f\xF6rmiddag",
    pm: "eftermiddag",
    midnight: "midnatt",
    noon: "middag",
    morning: "morgon",
    afternoon: "eftermiddag",
    evening: "kv\xE4ll",
    night: "natt"
  }
};
var sv_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "fm",
    pm: "em",
    midnight: "midnatt",
    noon: "middag",
    morning: "p\xE5 morg.",
    afternoon: "p\xE5 efterm.",
    evening: "p\xE5 kv\xE4llen",
    night: "p\xE5 natten"
  },
  abbreviated: {
    am: "fm",
    pm: "em",
    midnight: "midnatt",
    noon: "middag",
    morning: "p\xE5 morg.",
    afternoon: "p\xE5 efterm.",
    evening: "p\xE5 kv\xE4llen",
    night: "p\xE5 natten"
  },
  wide: {
    am: "fm",
    pm: "em",
    midnight: "midnatt",
    noon: "middag",
    morning: "p\xE5 morgonen",
    afternoon: "p\xE5 eftermiddagen",
    evening: "p\xE5 kv\xE4llen",
    night: "p\xE5 natten"
  }
};
var sv_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
      case 2:
        return number + ":a";
    }
  }
  return number + ":e";
};
var sv_lib_localize_localize = {
  ordinalNumber: sv_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: sv_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: sv_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const sv_lib_localize = (sv_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/_lib/match/index.js


var sv_lib_match_matchOrdinalNumberPattern = /^(\d+)(:a|:e)?/i;
var sv_lib_match_parseOrdinalNumberPattern = /\d+/i;
var sv_lib_match_matchEraPatterns = {
  narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
  wide: /^(före Kristus|före vår tid|efter Kristus|vår tid)/i
};
var sv_lib_match_parseEraPatterns = {
  any: [/^f/i, /^[ev]/i]
};
var sv_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](:a|:e)? kvartalet/i
};
var sv_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var sv_lib_match_matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar[s]?|apr|maj|jun[i]?|jul[i]?|aug|sep|okt|nov|dec)\.?/i,
  wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i
};
var sv_lib_match_parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^maj/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var sv_lib_match_matchDayPatterns = {
  narrow: /^[smtofl]/i,
  short: /^(sö|må|ti|on|to|fr|lö)/i,
  abbreviated: /^(sön|mån|tis|ons|tors|fre|lör)/i,
  wide: /^(söndag|måndag|tisdag|onsdag|torsdag|fredag|lördag)/i
};
var sv_lib_match_parseDayPatterns = {
  any: [/^s/i, /^m/i, /^ti/i, /^o/i, /^to/i, /^f/i, /^l/i]
};
var sv_lib_match_matchDayPeriodPatterns = {
  any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(på) (morgonen|eftermiddagen|kvällen|natten))/i
};
var sv_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^f/i,
    pm: /^e/i,
    midnight: /^midn/i,
    noon: /^midd/i,
    morning: /morgon/i,
    afternoon: /eftermiddag/i,
    evening: /kväll/i,
    night: /natt/i
  }
};
var sv_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: sv_lib_match_matchOrdinalNumberPattern,
    parsePattern: sv_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sv_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sv_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sv_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: sv_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: sv_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: sv_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const sv_lib_match = (sv_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/sv/index.js





var sv_locale = {
  code: "sv",
  formatDistance: sv_lib_formatDistance,
  formatLong: sv_lib_formatLong,
  formatRelative: sv_lib_formatRelative,
  localize: sv_lib_localize,
  match: sv_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const sv = (sv_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/formatDistance/index.js
function formatDistance_isPluralType(val) {
  return val.one !== void 0;
}
var ta_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: {
      default: "\u0B92\u0BB0\u0BC1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BCD\u0B95\u0BC1 \u0B95\u0BC1\u0BB1\u0BC8\u0BB5\u0BBE\u0B95",
      in: "\u0B92\u0BB0\u0BC1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BCD\u0B95\u0BC1\u0BB3\u0BCD",
      ago: "\u0B92\u0BB0\u0BC1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0B95\u0BC1\u0BB1\u0BC8\u0BB5\u0BBE\u0B95",
      in: "{{count}} \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1\u0BB3\u0BCD",
      ago: "{{count}} \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  xSeconds: {
    one: {
      default: "1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF",
      in: "1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0BAF\u0BBF\u0BB2\u0BCD",
      ago: "1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0BB5\u0BBF\u0BA8\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BCD",
      in: "{{count}} \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "{{count}} \u0BB5\u0BBF\u0BA8\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  halfAMinute: {
    default: "\u0B85\u0BB0\u0BC8 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD",
    in: "\u0B85\u0BB0\u0BC8 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
    ago: "\u0B85\u0BB0\u0BC8 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
  },
  lessThanXMinutes: {
    one: {
      default: "\u0B92\u0BB0\u0BC1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1\u0BAE\u0BCD \u0B95\u0BC1\u0BB1\u0BC8\u0BB5\u0BBE\u0B95",
      in: "\u0B92\u0BB0\u0BC1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1\u0BB3\u0BCD",
      ago: "\u0B92\u0BB0\u0BC1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1\u0BAE\u0BCD \u0B95\u0BC1\u0BB1\u0BC8\u0BB5\u0BBE\u0B95",
      in: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1\u0BB3\u0BCD",
      ago: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  xMinutes: {
    one: {
      default: "1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD",
      in: "1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
      ago: "1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
      in: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  aboutXHours: {
    one: {
      default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
      in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
      ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
      in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1",
      ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD"
    }
  },
  xHours: {
    one: {
      default: "1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
      in: "1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
      ago: "1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
      in: "{{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
      ago: "{{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  xDays: {
    one: {
      default: "1 \u0BA8\u0BBE\u0BB3\u0BCD",
      in: "1 \u0BA8\u0BBE\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "1 \u0BA8\u0BBE\u0BB3\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0BA8\u0BBE\u0B9F\u0BCD\u0B95\u0BB3\u0BCD",
      in: "{{count}} \u0BA8\u0BBE\u0B9F\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "{{count}} \u0BA8\u0BBE\u0B9F\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  aboutXWeeks: {
    one: {
      default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD",
      in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BBE\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
      ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
      in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  xWeeks: {
    one: {
      default: "1 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD",
      in: "1 \u0BB5\u0BBE\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
      ago: "1 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
      in: "{{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "{{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  aboutXMonths: {
    one: {
      default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BBE\u0BA4\u0BAE\u0BCD",
      in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BBE\u0BA4\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
      ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BBE\u0BA4\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
      in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  xMonths: {
    one: {
      default: "1 \u0BAE\u0BBE\u0BA4\u0BAE\u0BCD",
      in: "1 \u0BAE\u0BBE\u0BA4\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
      ago: "1 \u0BAE\u0BBE\u0BA4\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
      in: "{{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "{{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  aboutXYears: {
    one: {
      default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD",
      in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0B86\u0BA3\u0BCD\u0B9F\u0BBF\u0BB2\u0BCD",
      ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD",
      in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  xYears: {
    one: {
      default: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD",
      in: "1 \u0B86\u0BA3\u0BCD\u0B9F\u0BBF\u0BB2\u0BCD",
      ago: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD",
      in: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  overXYears: {
    one: {
      default: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC7\u0BB2\u0BCD",
      in: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1\u0BAE\u0BCD \u0BAE\u0BC7\u0BB2\u0BBE\u0B95",
      ago: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1\u0BAE\u0BCD \u0BAE\u0BC7\u0BB2\u0BBE\u0B95",
      in: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  },
  almostXYears: {
    one: {
      default: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F 1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD",
      in: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F 1 \u0B86\u0BA3\u0BCD\u0B9F\u0BBF\u0BB2\u0BCD",
      ago: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F 1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    other: {
      default: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD",
      in: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
      ago: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    }
  }
};
var ta_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var tense = options !== null && options !== void 0 && options.addSuffix ? options.comparison && options.comparison > 0 ? "in" : "ago" : "default";
  var tokenValue = ta_lib_formatDistance_formatDistanceLocale[token];
  if (!formatDistance_isPluralType(tokenValue))
    return tokenValue[tense];
  if (count === 1) {
    return tokenValue.one[tense];
  } else {
    return tokenValue.other[tense].replace("{{count}}", String(count));
  }
};
/* harmony default export */ const ta_lib_formatDistance = (ta_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/formatLong/index.js

var ta_lib_formatLong_dateFormats = {
  full: "EEEE, d MMMM, y",
  long: "d MMMM, y",
  medium: "d MMM, y",
  short: "d/M/yy"
};
var ta_lib_formatLong_timeFormats = {
  full: "a h:mm:ss zzzz",
  long: "a h:mm:ss z",
  medium: "a h:mm:ss",
  short: "a h:mm"
};
var ta_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ta_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ta_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ta_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ta_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ta_lib_formatLong = (ta_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/formatRelative/index.js
var ta_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0B95\u0B9F\u0BA8\u0BCD\u0BA4' eeee p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
  yesterday: "'\u0BA8\u0BC7\u0BB1\u0BCD\u0BB1\u0BC1 ' p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
  today: "'\u0B87\u0BA9\u0BCD\u0BB1\u0BC1 ' p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
  tomorrow: "'\u0BA8\u0BBE\u0BB3\u0BC8 ' p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
  nextWeek: "eeee p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
  other: "P"
};
var ta_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ta_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ta_lib_formatRelative = (ta_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/localize/index.js

var ta_lib_localize_eraValues = {
  narrow: ["\u0B95\u0BBF.\u0BAE\u0BC1.", "\u0B95\u0BBF.\u0BAA\u0BBF."],
  abbreviated: ["\u0B95\u0BBF.\u0BAE\u0BC1.", "\u0B95\u0BBF.\u0BAA\u0BBF."],
  // CLDR #1624, #1626
  wide: ["\u0B95\u0BBF\u0BB1\u0BBF\u0BB8\u0BCD\u0BA4\u0BC1\u0BB5\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD", "\u0B85\u0BA9\u0BCD\u0BA9\u0BCB \u0B9F\u0BCB\u0BAE\u0BBF\u0BA9\u0BBF"]
  // CLDR #1620, #1622
};
var ta_lib_localize_quarterValues = {
  // CLDR #1644 - #1647
  narrow: ["1", "2", "3", "4"],
  // CLDR #1636 - #1639
  abbreviated: ["\u0B95\u0BBE\u0BB2\u0BBE.1", "\u0B95\u0BBE\u0BB2\u0BBE.2", "\u0B95\u0BBE\u0BB2\u0BBE.3", "\u0B95\u0BBE\u0BB2\u0BBE.4"],
  // CLDR #1628 - #1631
  wide: ["\u0B92\u0BA9\u0BCD\u0BB1\u0BBE\u0BAE\u0BCD \u0B95\u0BBE\u0BB2\u0BBE\u0BA3\u0BCD\u0B9F\u0BC1", "\u0B87\u0BB0\u0BA3\u0BCD\u0B9F\u0BBE\u0BAE\u0BCD \u0B95\u0BBE\u0BB2\u0BBE\u0BA3\u0BCD\u0B9F\u0BC1", "\u0BAE\u0BC2\u0BA9\u0BCD\u0BB1\u0BBE\u0BAE\u0BCD \u0B95\u0BBE\u0BB2\u0BBE\u0BA3\u0BCD\u0B9F\u0BC1", "\u0BA8\u0BBE\u0BA9\u0BCD\u0B95\u0BBE\u0BAE\u0BCD \u0B95\u0BBE\u0BB2\u0BBE\u0BA3\u0BCD\u0B9F\u0BC1"]
};
var ta_lib_localize_monthValues = {
  // CLDR #700 - #711
  narrow: ["\u0B9C", "\u0BAA\u0BBF", "\u0BAE\u0BBE", "\u0B8F", "\u0BAE\u0BC7", "\u0B9C\u0BC2", "\u0B9C\u0BC2", "\u0B86", "\u0B9A\u0BC6", "\u0B85", "\u0BA8", "\u0B9F\u0BBF"],
  // CLDR #1676 - #1687
  abbreviated: ["\u0B9C\u0BA9.", "\u0BAA\u0BBF\u0BAA\u0BCD.", "\u0BAE\u0BBE\u0BB0\u0BCD.", "\u0B8F\u0BAA\u0BCD.", "\u0BAE\u0BC7", "\u0B9C\u0BC2\u0BA9\u0BCD", "\u0B9C\u0BC2\u0BB2\u0BC8", "\u0B86\u0B95.", "\u0B9A\u0BC6\u0BAA\u0BCD.", "\u0B85\u0B95\u0BCD.", "\u0BA8\u0BB5.", "\u0B9F\u0BBF\u0B9A."],
  // CLDR #1652 - #1663
  wide: [
    "\u0B9C\u0BA9\u0BB5\u0BB0\u0BBF",
    // January
    "\u0BAA\u0BBF\u0BAA\u0BCD\u0BB0\u0BB5\u0BB0\u0BBF",
    // February
    "\u0BAE\u0BBE\u0BB0\u0BCD\u0B9A\u0BCD",
    // March
    "\u0B8F\u0BAA\u0BCD\u0BB0\u0BB2\u0BCD",
    // April
    "\u0BAE\u0BC7",
    // May
    "\u0B9C\u0BC2\u0BA9\u0BCD",
    // June
    "\u0B9C\u0BC2\u0BB2\u0BC8",
    // July
    "\u0B86\u0B95\u0BB8\u0BCD\u0B9F\u0BCD",
    // August
    "\u0B9A\u0BC6\u0BAA\u0BCD\u0B9F\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD",
    // September
    "\u0B85\u0B95\u0BCD\u0B9F\u0BCB\u0BAA\u0BB0\u0BCD",
    // October
    "\u0BA8\u0BB5\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD",
    // November
    "\u0B9F\u0BBF\u0B9A\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD"
    // December
  ]
};
var ta_lib_localize_dayValues = {
  // CLDR #1766 - #1772
  narrow: ["\u0B9E\u0BBE", "\u0BA4\u0BBF", "\u0B9A\u0BC6", "\u0BAA\u0BC1", "\u0BB5\u0BBF", "\u0BB5\u0BC6", "\u0B9A"],
  // CLDR #1752 - #1758
  short: ["\u0B9E\u0BBE", "\u0BA4\u0BBF", "\u0B9A\u0BC6", "\u0BAA\u0BC1", "\u0BB5\u0BBF", "\u0BB5\u0BC6", "\u0B9A"],
  // CLDR #1738 - #1744
  abbreviated: ["\u0B9E\u0BBE\u0BAF\u0BBF.", "\u0BA4\u0BBF\u0B99\u0BCD.", "\u0B9A\u0BC6\u0BB5\u0BCD.", "\u0BAA\u0BC1\u0BA4.", "\u0BB5\u0BBF\u0BAF\u0BBE.", "\u0BB5\u0BC6\u0BB3\u0BCD.", "\u0B9A\u0BA9\u0BBF"],
  // CLDR #1724 - #1730
  wide: [
    "\u0B9E\u0BBE\u0BAF\u0BBF\u0BB1\u0BC1",
    // Sunday
    "\u0BA4\u0BBF\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
    // Monday
    "\u0B9A\u0BC6\u0BB5\u0BCD\u0BB5\u0BBE\u0BAF\u0BCD",
    // Tuesday
    "\u0BAA\u0BC1\u0BA4\u0BA9\u0BCD",
    // Wednesday
    "\u0BB5\u0BBF\u0BAF\u0BBE\u0BB4\u0BA9\u0BCD",
    // Thursday
    "\u0BB5\u0BC6\u0BB3\u0BCD\u0BB3\u0BBF",
    // Friday
    "\u0B9A\u0BA9\u0BBF"
    // Saturday
  ]
};
var ta_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0BAE\u0BC1.\u0BAA",
    pm: "\u0BAA\u0BBF.\u0BAA",
    midnight: "\u0BA8\u0BB3\u0BCD.",
    noon: "\u0BA8\u0BA3\u0BCD.",
    morning: "\u0B95\u0BBE.",
    afternoon: "\u0BAE\u0BA4\u0BBF.",
    evening: "\u0BAE\u0BBE.",
    night: "\u0B87\u0BB0."
  },
  abbreviated: {
    am: "\u0BAE\u0BC1\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    pm: "\u0BAA\u0BBF\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    midnight: "\u0BA8\u0BB3\u0BCD\u0BB3\u0BBF\u0BB0\u0BB5\u0BC1",
    noon: "\u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    morning: "\u0B95\u0BBE\u0BB2\u0BC8",
    afternoon: "\u0BAE\u0BA4\u0BBF\u0BAF\u0BAE\u0BCD",
    evening: "\u0BAE\u0BBE\u0BB2\u0BC8",
    night: "\u0B87\u0BB0\u0BB5\u0BC1"
  },
  wide: {
    am: "\u0BAE\u0BC1\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    pm: "\u0BAA\u0BBF\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    midnight: "\u0BA8\u0BB3\u0BCD\u0BB3\u0BBF\u0BB0\u0BB5\u0BC1",
    noon: "\u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    morning: "\u0B95\u0BBE\u0BB2\u0BC8",
    afternoon: "\u0BAE\u0BA4\u0BBF\u0BAF\u0BAE\u0BCD",
    evening: "\u0BAE\u0BBE\u0BB2\u0BC8",
    night: "\u0B87\u0BB0\u0BB5\u0BC1"
  }
};
var ta_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0BAE\u0BC1.\u0BAA",
    pm: "\u0BAA\u0BBF.\u0BAA",
    midnight: "\u0BA8\u0BB3\u0BCD.",
    noon: "\u0BA8\u0BA3\u0BCD.",
    morning: "\u0B95\u0BBE.",
    afternoon: "\u0BAE\u0BA4\u0BBF.",
    evening: "\u0BAE\u0BBE.",
    night: "\u0B87\u0BB0."
  },
  abbreviated: {
    am: "\u0BAE\u0BC1\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    pm: "\u0BAA\u0BBF\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    midnight: "\u0BA8\u0BB3\u0BCD\u0BB3\u0BBF\u0BB0\u0BB5\u0BC1",
    noon: "\u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    morning: "\u0B95\u0BBE\u0BB2\u0BC8",
    afternoon: "\u0BAE\u0BA4\u0BBF\u0BAF\u0BAE\u0BCD",
    evening: "\u0BAE\u0BBE\u0BB2\u0BC8",
    night: "\u0B87\u0BB0\u0BB5\u0BC1"
  },
  wide: {
    am: "\u0BAE\u0BC1\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    pm: "\u0BAA\u0BBF\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    midnight: "\u0BA8\u0BB3\u0BCD\u0BB3\u0BBF\u0BB0\u0BB5\u0BC1",
    noon: "\u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
    morning: "\u0B95\u0BBE\u0BB2\u0BC8",
    afternoon: "\u0BAE\u0BA4\u0BBF\u0BAF\u0BAE\u0BCD",
    evening: "\u0BAE\u0BBE\u0BB2\u0BC8",
    night: "\u0B87\u0BB0\u0BB5\u0BC1"
  }
};
var ta_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var ta_lib_localize_localize = {
  ordinalNumber: ta_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ta_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ta_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ta_lib_localize = (ta_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/_lib/match/index.js


var ta_lib_match_matchOrdinalNumberPattern = /^(\d+)(வது)?/i;
var ta_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ta_lib_match_matchEraPatterns = {
  narrow: /^(கி.மு.|கி.பி.)/i,
  abbreviated: /^(கி\.?\s?மு\.?|கி\.?\s?பி\.?)/,
  wide: /^(கிறிஸ்துவுக்கு\sமுன்|அன்னோ\sடோமினி)/i
};
var ta_lib_match_parseEraPatterns = {
  any: [/கி\.?\s?மு\.?/, /கி\.?\s?பி\.?/]
};
var ta_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^காலா.[1234]/i,
  wide: /^(ஒன்றாம்|இரண்டாம்|மூன்றாம்|நான்காம்) காலாண்டு/i
};
var ta_lib_match_parseQuarterPatterns = {
  narrow: [/1/i, /2/i, /3/i, /4/i],
  any: [/(1|காலா.1|ஒன்றாம்)/i, /(2|காலா.2|இரண்டாம்)/i, /(3|காலா.3|மூன்றாம்)/i, /(4|காலா.4|நான்காம்)/i]
};
var ta_lib_match_matchMonthPatterns = {
  narrow: /^(ஜ|பி|மா|ஏ|மே|ஜூ|ஆ|செ|அ|ந|டி)$/i,
  abbreviated: /^(ஜன.|பிப்.|மார்.|ஏப்.|மே|ஜூன்|ஜூலை|ஆக.|செப்.|அக்.|நவ.|டிச.)/i,
  wide: /^(ஜனவரி|பிப்ரவரி|மார்ச்|ஏப்ரல்|மே|ஜூன்|ஜூலை|ஆகஸ்ட்|செப்டம்பர்|அக்டோபர்|நவம்பர்|டிசம்பர்)/i
};
var ta_lib_match_parseMonthPatterns = {
  narrow: [/^ஜ$/i, /^பி/i, /^மா/i, /^ஏ/i, /^மே/i, /^ஜூ/i, /^ஜூ/i, /^ஆ/i, /^செ/i, /^அ/i, /^ந/i, /^டி/i],
  any: [/^ஜன/i, /^பி/i, /^மா/i, /^ஏ/i, /^மே/i, /^ஜூன்/i, /^ஜூலை/i, /^ஆ/i, /^செ/i, /^அ/i, /^ந/i, /^டி/i]
};
var ta_lib_match_matchDayPatterns = {
  narrow: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
  short: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
  abbreviated: /^(ஞாயி.|திங்.|செவ்.|புத.|வியா.|வெள்.|சனி)/i,
  wide: /^(ஞாயிறு|திங்கள்|செவ்வாய்|புதன்|வியாழன்|வெள்ளி|சனி)/i
};
var ta_lib_match_parseDayPatterns = {
  narrow: [/^ஞா/i, /^தி/i, /^செ/i, /^பு/i, /^வி/i, /^வெ/i, /^ச/i],
  any: [/^ஞா/i, /^தி/i, /^செ/i, /^பு/i, /^வி/i, /^வெ/i, /^ச/i]
};
var ta_lib_match_matchDayPeriodPatterns = {
  narrow: /^(மு.ப|பி.ப|நள்|நண்|காலை|மதியம்|மாலை|இரவு)/i,
  any: /^(மு.ப|பி.ப|முற்பகல்|பிற்பகல்|நள்ளிரவு|நண்பகல்|காலை|மதியம்|மாலை|இரவு)/i
};
var ta_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^மு/i,
    pm: /^பி/i,
    midnight: /^நள்/i,
    noon: /^நண்/i,
    morning: /காலை/i,
    afternoon: /மதியம்/i,
    evening: /மாலை/i,
    night: /இரவு/i
  }
};
var ta_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ta_lib_match_matchOrdinalNumberPattern,
    parsePattern: ta_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ta_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ta_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ta_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ta_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ta_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ta_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ta_lib_match = (ta_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ta/index.js





var ta_locale = {
  code: "ta",
  formatDistance: ta_lib_formatDistance,
  formatLong: ta_lib_formatLong,
  formatRelative: ta_lib_formatRelative,
  localize: ta_lib_localize,
  match: ta_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const ta = (ta_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/formatDistance/index.js
var te_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    standalone: {
      one: "\u0C38\u0C46\u0C15\u0C28\u0C41 \u0C15\u0C28\u0C4D\u0C28\u0C3E \u0C24\u0C15\u0C4D\u0C15\u0C41\u0C35",
      other: "{{count}} \u0C38\u0C46\u0C15\u0C28\u0C4D\u0C32 \u0C15\u0C28\u0C4D\u0C28\u0C3E \u0C24\u0C15\u0C4D\u0C15\u0C41\u0C35"
    },
    withPreposition: {
      one: "\u0C38\u0C46\u0C15\u0C28\u0C41",
      other: "{{count}} \u0C38\u0C46\u0C15\u0C28\u0C4D\u0C32"
    }
  },
  xSeconds: {
    standalone: {
      one: "\u0C12\u0C15 \u0C38\u0C46\u0C15\u0C28\u0C41",
      // CLDR #1314
      other: "{{count}} \u0C38\u0C46\u0C15\u0C28\u0C4D\u0C32"
    },
    withPreposition: {
      one: "\u0C12\u0C15 \u0C38\u0C46\u0C15\u0C28\u0C41",
      other: "{{count}} \u0C38\u0C46\u0C15\u0C28\u0C4D\u0C32"
    }
  },
  halfAMinute: {
    standalone: "\u0C05\u0C30 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02",
    withPreposition: "\u0C05\u0C30 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02"
  },
  lessThanXMinutes: {
    standalone: {
      one: "\u0C12\u0C15 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02 \u0C15\u0C28\u0C4D\u0C28\u0C3E \u0C24\u0C15\u0C4D\u0C15\u0C41\u0C35",
      other: "{{count}} \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C3E\u0C32 \u0C15\u0C28\u0C4D\u0C28\u0C3E \u0C24\u0C15\u0C4D\u0C15\u0C41\u0C35"
    },
    withPreposition: {
      one: "\u0C12\u0C15 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02",
      other: "{{count}} \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C3E\u0C32"
    }
  },
  xMinutes: {
    standalone: {
      one: "\u0C12\u0C15 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02",
      // CLDR #1311
      other: "{{count}} \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C3E\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C12\u0C15 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02",
      // CLDR #1311
      other: "{{count}} \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C3E\u0C32"
    }
  },
  aboutXHours: {
    standalone: {
      one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C17\u0C02\u0C1F",
      other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C17\u0C02\u0C1F\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C17\u0C02\u0C1F",
      other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C17\u0C02\u0C1F\u0C32"
    }
  },
  xHours: {
    standalone: {
      one: "\u0C12\u0C15 \u0C17\u0C02\u0C1F",
      // CLDR #1308
      other: "{{count}} \u0C17\u0C02\u0C1F\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C12\u0C15 \u0C17\u0C02\u0C1F",
      other: "{{count}} \u0C17\u0C02\u0C1F\u0C32"
    }
  },
  xDays: {
    standalone: {
      one: "\u0C12\u0C15 \u0C30\u0C4B\u0C1C\u0C41",
      // CLDR #1292
      other: "{{count}} \u0C30\u0C4B\u0C1C\u0C41\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C12\u0C15 \u0C30\u0C4B\u0C1C\u0C41",
      other: "{{count}} \u0C30\u0C4B\u0C1C\u0C41\u0C32"
    }
  },
  aboutXWeeks: {
    standalone: {
      one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C35\u0C3E\u0C30\u0C02",
      other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C35\u0C3E\u0C30\u0C3E\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C35\u0C3E\u0C30\u0C02",
      other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C35\u0C3E\u0C30\u0C3E\u0C32\u0C32"
    }
  },
  xWeeks: {
    standalone: {
      one: "\u0C12\u0C15 \u0C35\u0C3E\u0C30\u0C02",
      other: "{{count}} \u0C35\u0C3E\u0C30\u0C3E\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C12\u0C15 \u0C35\u0C3E\u0C30\u0C02",
      other: "{{count}} \u0C35\u0C3E\u0C30\u0C3E\u0C32\u0C32"
    }
  },
  aboutXMonths: {
    standalone: {
      one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C28\u0C46\u0C32",
      other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C28\u0C46\u0C32\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C28\u0C46\u0C32",
      other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C28\u0C46\u0C32\u0C32"
    }
  },
  xMonths: {
    standalone: {
      one: "\u0C12\u0C15 \u0C28\u0C46\u0C32",
      // CLDR #1281
      other: "{{count}} \u0C28\u0C46\u0C32\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C12\u0C15 \u0C28\u0C46\u0C32",
      other: "{{count}} \u0C28\u0C46\u0C32\u0C32"
    }
  },
  aboutXYears: {
    standalone: {
      one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
      other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
      other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32"
    }
  },
  xYears: {
    standalone: {
      one: "\u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
      // CLDR #1275
      other: "{{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
      other: "{{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32"
    }
  },
  overXYears: {
    standalone: {
      one: "\u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02 \u0C2A\u0C48\u0C17\u0C3E",
      other: "{{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32\u0C15\u0C41 \u0C2A\u0C48\u0C17\u0C3E"
    },
    withPreposition: {
      one: "\u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
      other: "{{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32"
    }
  },
  almostXYears: {
    standalone: {
      one: "\u0C26\u0C3E\u0C26\u0C3E\u0C2A\u0C41 \u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
      other: "\u0C26\u0C3E\u0C26\u0C3E\u0C2A\u0C41 {{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32\u0C41"
    },
    withPreposition: {
      one: "\u0C26\u0C3E\u0C26\u0C3E\u0C2A\u0C41 \u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
      other: "\u0C26\u0C3E\u0C26\u0C3E\u0C2A\u0C41 {{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32"
    }
  }
};
var te_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = options !== null && options !== void 0 && options.addSuffix ? te_lib_formatDistance_formatDistanceLocale[token].withPreposition : te_lib_formatDistance_formatDistanceLocale[token].standalone;
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "\u0C32\u0C4B";
    } else {
      return result + " \u0C15\u0C4D\u0C30\u0C3F\u0C24\u0C02";
    }
  }
  return result;
};
/* harmony default export */ const te_lib_formatDistance = (te_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/formatLong/index.js

var te_lib_formatLong_dateFormats = {
  full: "d, MMMM y, EEEE",
  long: "d MMMM, y",
  medium: "d MMM, y",
  short: "dd-MM-yy"
};
var te_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var te_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}'\u0C15\u0C3F'",
  long: "{{date}} {{time}}'\u0C15\u0C3F'",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var te_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: te_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: te_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: te_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const te_lib_formatLong = (te_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/formatRelative/index.js
var te_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0C17\u0C24' eeee p",
  // CLDR #1384
  yesterday: "'\u0C28\u0C3F\u0C28\u0C4D\u0C28' p",
  // CLDR #1393
  today: "'\u0C08 \u0C30\u0C4B\u0C1C\u0C41' p",
  // CLDR #1394
  tomorrow: "'\u0C30\u0C47\u0C2A\u0C41' p",
  // CLDR #1395
  nextWeek: "'\u0C24\u0C26\u0C41\u0C2A\u0C30\u0C3F' eeee p",
  // CLDR #1386
  other: "P"
};
var te_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return te_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const te_lib_formatRelative = (te_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/localize/index.js

var te_lib_localize_eraValues = {
  narrow: ["\u0C15\u0C4D\u0C30\u0C40.\u0C2A\u0C42.", "\u0C15\u0C4D\u0C30\u0C40.\u0C36."],
  abbreviated: ["\u0C15\u0C4D\u0C30\u0C40.\u0C2A\u0C42.", "\u0C15\u0C4D\u0C30\u0C40.\u0C36."],
  wide: ["\u0C15\u0C4D\u0C30\u0C40\u0C38\u0C4D\u0C24\u0C41 \u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C02", "\u0C15\u0C4D\u0C30\u0C40\u0C38\u0C4D\u0C24\u0C41\u0C36\u0C15\u0C02"]
};
var te_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u0C24\u0C4D\u0C30\u0C481", "\u0C24\u0C4D\u0C30\u0C482", "\u0C24\u0C4D\u0C30\u0C483", "\u0C24\u0C4D\u0C30\u0C484"],
  wide: ["1\u0C35 \u0C24\u0C4D\u0C30\u0C48\u0C2E\u0C3E\u0C38\u0C3F\u0C15\u0C02", "2\u0C35 \u0C24\u0C4D\u0C30\u0C48\u0C2E\u0C3E\u0C38\u0C3F\u0C15\u0C02", "3\u0C35 \u0C24\u0C4D\u0C30\u0C48\u0C2E\u0C3E\u0C38\u0C3F\u0C15\u0C02", "4\u0C35 \u0C24\u0C4D\u0C30\u0C48\u0C2E\u0C3E\u0C38\u0C3F\u0C15\u0C02"]
};
var te_lib_localize_monthValues = {
  narrow: ["\u0C1C", "\u0C2B\u0C3F", "\u0C2E\u0C3E", "\u0C0F", "\u0C2E\u0C47", "\u0C1C\u0C42", "\u0C1C\u0C41", "\u0C06", "\u0C38\u0C46", "\u0C05", "\u0C28", "\u0C21\u0C3F"],
  abbreviated: ["\u0C1C\u0C28", "\u0C2B\u0C3F\u0C2C\u0C4D\u0C30", "\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C3F", "\u0C0F\u0C2A\u0C4D\u0C30\u0C3F", "\u0C2E\u0C47", "\u0C1C\u0C42\u0C28\u0C4D", "\u0C1C\u0C41\u0C32\u0C48", "\u0C06\u0C17", "\u0C38\u0C46\u0C2A\u0C4D\u0C1F\u0C46\u0C02", "\u0C05\u0C15\u0C4D\u0C1F\u0C4B", "\u0C28\u0C35\u0C02", "\u0C21\u0C3F\u0C38\u0C46\u0C02"],
  wide: ["\u0C1C\u0C28\u0C35\u0C30\u0C3F", "\u0C2B\u0C3F\u0C2C\u0C4D\u0C30\u0C35\u0C30\u0C3F", "\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C3F", "\u0C0F\u0C2A\u0C4D\u0C30\u0C3F\u0C32\u0C4D", "\u0C2E\u0C47", "\u0C1C\u0C42\u0C28\u0C4D", "\u0C1C\u0C41\u0C32\u0C48", "\u0C06\u0C17\u0C38\u0C4D\u0C1F\u0C41", "\u0C38\u0C46\u0C2A\u0C4D\u0C1F\u0C46\u0C02\u0C2C\u0C30\u0C4D", "\u0C05\u0C15\u0C4D\u0C1F\u0C4B\u0C2C\u0C30\u0C4D", "\u0C28\u0C35\u0C02\u0C2C\u0C30\u0C4D", "\u0C21\u0C3F\u0C38\u0C46\u0C02\u0C2C\u0C30\u0C4D"]
};
var te_lib_localize_dayValues = {
  narrow: ["\u0C06", "\u0C38\u0C4B", "\u0C2E", "\u0C2C\u0C41", "\u0C17\u0C41", "\u0C36\u0C41", "\u0C36"],
  short: ["\u0C06\u0C26\u0C3F", "\u0C38\u0C4B\u0C2E", "\u0C2E\u0C02\u0C17\u0C33", "\u0C2C\u0C41\u0C27", "\u0C17\u0C41\u0C30\u0C41", "\u0C36\u0C41\u0C15\u0C4D\u0C30", "\u0C36\u0C28\u0C3F"],
  abbreviated: ["\u0C06\u0C26\u0C3F", "\u0C38\u0C4B\u0C2E", "\u0C2E\u0C02\u0C17\u0C33", "\u0C2C\u0C41\u0C27", "\u0C17\u0C41\u0C30\u0C41", "\u0C36\u0C41\u0C15\u0C4D\u0C30", "\u0C36\u0C28\u0C3F"],
  wide: ["\u0C06\u0C26\u0C3F\u0C35\u0C3E\u0C30\u0C02", "\u0C38\u0C4B\u0C2E\u0C35\u0C3E\u0C30\u0C02", "\u0C2E\u0C02\u0C17\u0C33\u0C35\u0C3E\u0C30\u0C02", "\u0C2C\u0C41\u0C27\u0C35\u0C3E\u0C30\u0C02", "\u0C17\u0C41\u0C30\u0C41\u0C35\u0C3E\u0C30\u0C02", "\u0C36\u0C41\u0C15\u0C4D\u0C30\u0C35\u0C3E\u0C30\u0C02", "\u0C36\u0C28\u0C3F\u0C35\u0C3E\u0C30\u0C02"]
};
var te_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
    noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    morning: "\u0C09\u0C26\u0C2F\u0C02",
    afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
    night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
  },
  abbreviated: {
    am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
    noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    morning: "\u0C09\u0C26\u0C2F\u0C02",
    afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
    night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
  },
  wide: {
    am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
    noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    morning: "\u0C09\u0C26\u0C2F\u0C02",
    afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
    night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
  }
};
var te_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
    noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    morning: "\u0C09\u0C26\u0C2F\u0C02",
    afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
    night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
  },
  abbreviated: {
    am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
    noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    morning: "\u0C09\u0C26\u0C2F\u0C02",
    afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
    night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
  },
  wide: {
    am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
    noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    morning: "\u0C09\u0C26\u0C2F\u0C02",
    afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
    evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
    night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
  }
};
var te_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + "\u0C35";
};
var te_lib_localize_localize = {
  ordinalNumber: te_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: te_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: te_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const te_lib_localize = (te_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/_lib/match/index.js


var te_lib_match_matchOrdinalNumberPattern = /^(\d+)(వ)?/i;
var te_lib_match_parseOrdinalNumberPattern = /\d+/i;
var te_lib_match_matchEraPatterns = {
  narrow: /^(క్రీ\.పూ\.|క్రీ\.శ\.)/i,
  abbreviated: /^(క్రీ\.?\s?పూ\.?|ప్ర\.?\s?శ\.?\s?పూ\.?|క్రీ\.?\s?శ\.?|సా\.?\s?శ\.?)/i,
  wide: /^(క్రీస్తు పూర్వం|ప్రస్తుత శకానికి పూర్వం|క్రీస్తు శకం|ప్రస్తుత శకం)/i
};
var te_lib_match_parseEraPatterns = {
  any: [/^(పూ|శ)/i, /^సా/i]
};
var te_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^త్రై[1234]/i,
  wide: /^[1234](వ)? త్రైమాసికం/i
};
var te_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var te_lib_match_matchMonthPatterns = {
  narrow: /^(జూ|జు|జ|ఫి|మా|ఏ|మే|ఆ|సె|అ|న|డి)/i,
  abbreviated: /^(జన|ఫిబ్ర|మార్చి|ఏప్రి|మే|జూన్|జులై|ఆగ|సెప్|అక్టో|నవ|డిసె)/i,
  wide: /^(జనవరి|ఫిబ్రవరి|మార్చి|ఏప్రిల్|మే|జూన్|జులై|ఆగస్టు|సెప్టెంబర్|అక్టోబర్|నవంబర్|డిసెంబర్)/i
};
var te_lib_match_parseMonthPatterns = {
  narrow: [/^జ/i, /^ఫి/i, /^మా/i, /^ఏ/i, /^మే/i, /^జూ/i, /^జు/i, /^ఆ/i, /^సె/i, /^అ/i, /^న/i, /^డి/i],
  any: [/^జన/i, /^ఫి/i, /^మా/i, /^ఏ/i, /^మే/i, /^జూన్/i, /^జులై/i, /^ఆగ/i, /^సె/i, /^అ/i, /^న/i, /^డి/i]
};
var te_lib_match_matchDayPatterns = {
  narrow: /^(ఆ|సో|మ|బు|గు|శు|శ)/i,
  short: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
  abbreviated: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
  wide: /^(ఆదివారం|సోమవారం|మంగళవారం|బుధవారం|గురువారం|శుక్రవారం|శనివారం)/i
};
var te_lib_match_parseDayPatterns = {
  narrow: [/^ఆ/i, /^సో/i, /^మ/i, /^బు/i, /^గు/i, /^శు/i, /^శ/i],
  any: [/^ఆది/i, /^సోమ/i, /^మం/i, /^బుధ/i, /^గురు/i, /^శుక్ర/i, /^శని/i]
};
var te_lib_match_matchDayPeriodPatterns = {
  narrow: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i,
  any: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i
};
var te_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^పూర్వాహ్నం/i,
    pm: /^అపరాహ్నం/i,
    midnight: /^అర్ధ/i,
    noon: /^మిట్ట/i,
    morning: /ఉదయం/i,
    afternoon: /మధ్యాహ్నం/i,
    evening: /సాయంత్రం/i,
    night: /రాత్రి/i
  }
};
var te_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: te_lib_match_matchOrdinalNumberPattern,
    parsePattern: te_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: te_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: te_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: te_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: te_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: te_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: te_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const te_lib_match = (te_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/te/index.js





var te_locale = {
  code: "te",
  formatDistance: te_lib_formatDistance,
  formatLong: te_lib_formatLong,
  formatRelative: te_lib_formatRelative,
  localize: te_lib_localize,
  match: te_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const te = (te_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/formatDistance/index.js
var th_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32 1 \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35",
    other: "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32 {{count}} \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35"
  },
  xSeconds: {
    one: "1 \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35",
    other: "{{count}} \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35"
  },
  halfAMinute: "\u0E04\u0E23\u0E36\u0E48\u0E07\u0E19\u0E32\u0E17\u0E35",
  lessThanXMinutes: {
    one: "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32 1 \u0E19\u0E32\u0E17\u0E35",
    other: "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32 {{count}} \u0E19\u0E32\u0E17\u0E35"
  },
  xMinutes: {
    one: "1 \u0E19\u0E32\u0E17\u0E35",
    other: "{{count}} \u0E19\u0E32\u0E17\u0E35"
  },
  aboutXHours: {
    one: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 1 \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07",
    other: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 {{count}} \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07"
  },
  xHours: {
    one: "1 \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07",
    other: "{{count}} \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07"
  },
  xDays: {
    one: "1 \u0E27\u0E31\u0E19",
    other: "{{count}} \u0E27\u0E31\u0E19"
  },
  aboutXWeeks: {
    one: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 1 \u0E2A\u0E31\u0E1B\u0E14\u0E32\u0E2B\u0E4C",
    other: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 {{count}} \u0E2A\u0E31\u0E1B\u0E14\u0E32\u0E2B\u0E4C"
  },
  xWeeks: {
    one: "1 \u0E2A\u0E31\u0E1B\u0E14\u0E32\u0E2B\u0E4C",
    other: "{{count}} \u0E2A\u0E31\u0E1B\u0E14\u0E32\u0E2B\u0E4C"
  },
  aboutXMonths: {
    one: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 1 \u0E40\u0E14\u0E37\u0E2D\u0E19",
    other: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 {{count}} \u0E40\u0E14\u0E37\u0E2D\u0E19"
  },
  xMonths: {
    one: "1 \u0E40\u0E14\u0E37\u0E2D\u0E19",
    other: "{{count}} \u0E40\u0E14\u0E37\u0E2D\u0E19"
  },
  aboutXYears: {
    one: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 1 \u0E1B\u0E35",
    other: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 {{count}} \u0E1B\u0E35"
  },
  xYears: {
    one: "1 \u0E1B\u0E35",
    other: "{{count}} \u0E1B\u0E35"
  },
  overXYears: {
    one: "\u0E21\u0E32\u0E01\u0E01\u0E27\u0E48\u0E32 1 \u0E1B\u0E35",
    other: "\u0E21\u0E32\u0E01\u0E01\u0E27\u0E48\u0E32 {{count}} \u0E1B\u0E35"
  },
  almostXYears: {
    one: "\u0E40\u0E01\u0E37\u0E2D\u0E1A 1 \u0E1B\u0E35",
    other: "\u0E40\u0E01\u0E37\u0E2D\u0E1A {{count}} \u0E1B\u0E35"
  }
};
var th_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = th_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      if (token === "halfAMinute") {
        return "\u0E43\u0E19" + result;
      } else {
        return "\u0E43\u0E19 " + result;
      }
    } else {
      return result + "\u0E17\u0E35\u0E48\u0E1C\u0E48\u0E32\u0E19\u0E21\u0E32";
    }
  }
  return result;
};
/* harmony default export */ const th_lib_formatDistance = (th_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/formatLong/index.js

var th_lib_formatLong_dateFormats = {
  full: "\u0E27\u0E31\u0E19EEEE\u0E17\u0E35\u0E48 do MMMM y",
  long: "do MMMM y",
  medium: "d MMM y",
  short: "dd/MM/yyyy"
};
var th_lib_formatLong_timeFormats = {
  full: "H:mm:ss \u0E19. zzzz",
  long: "H:mm:ss \u0E19. z",
  medium: "H:mm:ss \u0E19.",
  short: "H:mm \u0E19."
};
var th_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u0E40\u0E27\u0E25\u0E32' {{time}}",
  long: "{{date}} '\u0E40\u0E27\u0E25\u0E32' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var th_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: th_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: th_lib_formatLong_timeFormats,
    defaultWidth: "medium"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: th_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const th_lib_formatLong = (th_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/formatRelative/index.js
var th_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee'\u0E17\u0E35\u0E48\u0E41\u0E25\u0E49\u0E27\u0E40\u0E27\u0E25\u0E32' p",
  yesterday: "'\u0E40\u0E21\u0E37\u0E48\u0E2D\u0E27\u0E32\u0E19\u0E19\u0E35\u0E49\u0E40\u0E27\u0E25\u0E32' p",
  today: "'\u0E27\u0E31\u0E19\u0E19\u0E35\u0E49\u0E40\u0E27\u0E25\u0E32' p",
  tomorrow: "'\u0E1E\u0E23\u0E38\u0E48\u0E07\u0E19\u0E35\u0E49\u0E40\u0E27\u0E25\u0E32' p",
  nextWeek: "eeee '\u0E40\u0E27\u0E25\u0E32' p",
  other: "P"
};
var th_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return th_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const th_lib_formatRelative = (th_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/localize/index.js

var th_lib_localize_eraValues = {
  narrow: ["B", "\u0E04\u0E28"],
  abbreviated: ["BC", "\u0E04.\u0E28."],
  wide: ["\u0E1B\u0E35\u0E01\u0E48\u0E2D\u0E19\u0E04\u0E23\u0E34\u0E2A\u0E15\u0E01\u0E32\u0E25", "\u0E04\u0E23\u0E34\u0E2A\u0E15\u0E4C\u0E28\u0E31\u0E01\u0E23\u0E32\u0E0A"]
};
var th_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A\u0E41\u0E23\u0E01", "\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A\u0E17\u0E35\u0E48\u0E2A\u0E2D\u0E07", "\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A\u0E17\u0E35\u0E48\u0E2A\u0E32\u0E21", "\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A\u0E17\u0E35\u0E48\u0E2A\u0E35\u0E48"]
};
var th_lib_localize_dayValues = {
  narrow: ["\u0E2D\u0E32.", "\u0E08.", "\u0E2D.", "\u0E1E.", "\u0E1E\u0E24.", "\u0E28.", "\u0E2A."],
  short: ["\u0E2D\u0E32.", "\u0E08.", "\u0E2D.", "\u0E1E.", "\u0E1E\u0E24.", "\u0E28.", "\u0E2A."],
  abbreviated: ["\u0E2D\u0E32.", "\u0E08.", "\u0E2D.", "\u0E1E.", "\u0E1E\u0E24.", "\u0E28.", "\u0E2A."],
  wide: ["\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C", "\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C", "\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23", "\u0E1E\u0E38\u0E18", "\u0E1E\u0E24\u0E2B\u0E31\u0E2A\u0E1A\u0E14\u0E35", "\u0E28\u0E38\u0E01\u0E23\u0E4C", "\u0E40\u0E2A\u0E32\u0E23\u0E4C"]
};
var th_lib_localize_monthValues = {
  narrow: ["\u0E21.\u0E04.", "\u0E01.\u0E1E.", "\u0E21\u0E35.\u0E04.", "\u0E40\u0E21.\u0E22.", "\u0E1E.\u0E04.", "\u0E21\u0E34.\u0E22.", "\u0E01.\u0E04.", "\u0E2A.\u0E04.", "\u0E01.\u0E22.", "\u0E15.\u0E04.", "\u0E1E.\u0E22.", "\u0E18.\u0E04."],
  abbreviated: ["\u0E21.\u0E04.", "\u0E01.\u0E1E.", "\u0E21\u0E35.\u0E04.", "\u0E40\u0E21.\u0E22.", "\u0E1E.\u0E04.", "\u0E21\u0E34.\u0E22.", "\u0E01.\u0E04.", "\u0E2A.\u0E04.", "\u0E01.\u0E22.", "\u0E15.\u0E04.", "\u0E1E.\u0E22.", "\u0E18.\u0E04."],
  wide: ["\u0E21\u0E01\u0E23\u0E32\u0E04\u0E21", "\u0E01\u0E38\u0E21\u0E20\u0E32\u0E1E\u0E31\u0E19\u0E18\u0E4C", "\u0E21\u0E35\u0E19\u0E32\u0E04\u0E21", "\u0E40\u0E21\u0E29\u0E32\u0E22\u0E19", "\u0E1E\u0E24\u0E29\u0E20\u0E32\u0E04\u0E21", "\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32\u0E22\u0E19", "\u0E01\u0E23\u0E01\u0E0E\u0E32\u0E04\u0E21", "\u0E2A\u0E34\u0E07\u0E2B\u0E32\u0E04\u0E21", "\u0E01\u0E31\u0E19\u0E22\u0E32\u0E22\u0E19", "\u0E15\u0E38\u0E25\u0E32\u0E04\u0E21", "\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32\u0E22\u0E19", "\u0E18\u0E31\u0E19\u0E27\u0E32\u0E04\u0E21"]
};
var th_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
    noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    morning: "\u0E40\u0E0A\u0E49\u0E32",
    afternoon: "\u0E1A\u0E48\u0E32\u0E22",
    evening: "\u0E40\u0E22\u0E47\u0E19",
    night: "\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
  },
  abbreviated: {
    am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
    noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    morning: "\u0E40\u0E0A\u0E49\u0E32",
    afternoon: "\u0E1A\u0E48\u0E32\u0E22",
    evening: "\u0E40\u0E22\u0E47\u0E19",
    night: "\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
  },
  wide: {
    am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
    noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    morning: "\u0E40\u0E0A\u0E49\u0E32",
    afternoon: "\u0E1A\u0E48\u0E32\u0E22",
    evening: "\u0E40\u0E22\u0E47\u0E19",
    night: "\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
  }
};
var th_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
    noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    morning: "\u0E15\u0E2D\u0E19\u0E40\u0E0A\u0E49\u0E32",
    afternoon: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E27\u0E31\u0E19",
    evening: "\u0E15\u0E2D\u0E19\u0E40\u0E22\u0E47\u0E19",
    night: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
  },
  abbreviated: {
    am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
    noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    morning: "\u0E15\u0E2D\u0E19\u0E40\u0E0A\u0E49\u0E32",
    afternoon: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E27\u0E31\u0E19",
    evening: "\u0E15\u0E2D\u0E19\u0E40\u0E22\u0E47\u0E19",
    night: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
  },
  wide: {
    am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
    noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
    morning: "\u0E15\u0E2D\u0E19\u0E40\u0E0A\u0E49\u0E32",
    afternoon: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E27\u0E31\u0E19",
    evening: "\u0E15\u0E2D\u0E19\u0E40\u0E22\u0E47\u0E19",
    night: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
  }
};
var th_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var th_lib_localize_localize = {
  ordinalNumber: th_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: th_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: th_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const th_lib_localize = (th_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/_lib/match/index.js


var th_lib_match_matchOrdinalNumberPattern = /^\d+/i;
var th_lib_match_parseOrdinalNumberPattern = /\d+/i;
var th_lib_match_matchEraPatterns = {
  narrow: /^([bB]|[aA]|คศ)/i,
  abbreviated: /^([bB]\.?\s?[cC]\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?|ค\.?ศ\.?)/i,
  wide: /^(ก่อนคริสตกาล|คริสต์ศักราช|คริสตกาล)/i
};
var th_lib_match_parseEraPatterns = {
  any: [/^[bB]/i, /^(^[aA]|ค\.?ศ\.?|คริสตกาล|คริสต์ศักราช|)/i]
};
var th_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^ไตรมาส(ที่)? ?[1234]/i
};
var th_lib_match_parseQuarterPatterns = {
  any: [/(1|แรก|หนึ่ง)/i, /(2|สอง)/i, /(3|สาม)/i, /(4|สี่)/i]
};
var th_lib_match_matchMonthPatterns = {
  narrow: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?)/i,
  abbreviated: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?')/i,
  wide: /^(มกราคม|กุมภาพันธ์|มีนาคม|เมษายน|พฤษภาคม|มิถุนายน|กรกฎาคม|สิงหาคม|กันยายน|ตุลาคม|พฤศจิกายน|ธันวาคม)/i
};
var th_lib_match_parseMonthPatterns = {
  wide: [/^มก/i, /^กุม/i, /^มี/i, /^เม/i, /^พฤษ/i, /^มิ/i, /^กรก/i, /^ส/i, /^กัน/i, /^ต/i, /^พฤศ/i, /^ธ/i],
  any: [/^ม\.?ค\.?/i, /^ก\.?พ\.?/i, /^มี\.?ค\.?/i, /^เม\.?ย\.?/i, /^พ\.?ค\.?/i, /^มิ\.?ย\.?/i, /^ก\.?ค\.?/i, /^ส\.?ค\.?/i, /^ก\.?ย\.?/i, /^ต\.?ค\.?/i, /^พ\.?ย\.?/i, /^ธ\.?ค\.?/i]
};
var th_lib_match_matchDayPatterns = {
  narrow: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
  short: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
  abbreviated: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
  wide: /^(อาทิตย์|จันทร์|อังคาร|พุธ|พฤหัสบดี|ศุกร์|เสาร์)/i
};
var th_lib_match_parseDayPatterns = {
  wide: [/^อา/i, /^จั/i, /^อั/i, /^พุธ/i, /^พฤ/i, /^ศ/i, /^เส/i],
  any: [/^อา/i, /^จ/i, /^อ/i, /^พ(?!ฤ)/i, /^พฤ/i, /^ศ/i, /^ส/i]
};
var th_lib_match_matchDayPeriodPatterns = {
  any: /^(ก่อนเที่ยง|หลังเที่ยง|เที่ยงคืน|เที่ยง|(ตอน.*?)?.*(เที่ยง|เช้า|บ่าย|เย็น|กลางคืน))/i
};
var th_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ก่อนเที่ยง/i,
    pm: /^หลังเที่ยง/i,
    midnight: /^เที่ยงคืน/i,
    noon: /^เที่ยง/i,
    morning: /เช้า/i,
    afternoon: /บ่าย/i,
    evening: /เย็น/i,
    night: /กลางคืน/i
  }
};
var th_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: th_lib_match_matchOrdinalNumberPattern,
    parsePattern: th_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: th_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: th_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: th_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: th_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: th_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: th_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const th_lib_match = (th_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/th/index.js





var th_locale = {
  code: "th",
  formatDistance: th_lib_formatDistance,
  formatLong: th_lib_formatLong,
  formatRelative: th_lib_formatRelative,
  localize: th_lib_localize,
  match: th_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const th = (th_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/formatDistance/index.js
var tr_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "bir saniyeden az",
    other: "{{count}} saniyeden az"
  },
  xSeconds: {
    one: "1 saniye",
    other: "{{count}} saniye"
  },
  halfAMinute: "yar\u0131m dakika",
  lessThanXMinutes: {
    one: "bir dakikadan az",
    other: "{{count}} dakikadan az"
  },
  xMinutes: {
    one: "1 dakika",
    other: "{{count}} dakika"
  },
  aboutXHours: {
    one: "yakla\u015F\u0131k 1 saat",
    other: "yakla\u015F\u0131k {{count}} saat"
  },
  xHours: {
    one: "1 saat",
    other: "{{count}} saat"
  },
  xDays: {
    one: "1 g\xFCn",
    other: "{{count}} g\xFCn"
  },
  aboutXWeeks: {
    one: "yakla\u015F\u0131k 1 hafta",
    other: "yakla\u015F\u0131k {{count}} hafta"
  },
  xWeeks: {
    one: "1 hafta",
    other: "{{count}} hafta"
  },
  aboutXMonths: {
    one: "yakla\u015F\u0131k 1 ay",
    other: "yakla\u015F\u0131k {{count}} ay"
  },
  xMonths: {
    one: "1 ay",
    other: "{{count}} ay"
  },
  aboutXYears: {
    one: "yakla\u015F\u0131k 1 y\u0131l",
    other: "yakla\u015F\u0131k {{count}} y\u0131l"
  },
  xYears: {
    one: "1 y\u0131l",
    other: "{{count}} y\u0131l"
  },
  overXYears: {
    one: "1 y\u0131ldan fazla",
    other: "{{count}} y\u0131ldan fazla"
  },
  almostXYears: {
    one: "neredeyse 1 y\u0131l",
    other: "neredeyse {{count}} y\u0131l"
  }
};
var tr_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = tr_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " sonra";
    } else {
      return result + " \xF6nce";
    }
  }
  return result;
};
/* harmony default export */ const tr_lib_formatDistance = (tr_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/formatLong/index.js

var tr_lib_formatLong_dateFormats = {
  full: "d MMMM y EEEE",
  long: "d MMMM y",
  medium: "d MMM y",
  short: "dd.MM.yyyy"
};
var tr_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var tr_lib_formatLong_dateTimeFormats = {
  full: "{{date}} 'saat' {{time}}",
  long: "{{date}} 'saat' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var tr_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: tr_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: tr_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: tr_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const tr_lib_formatLong = (tr_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/formatRelative/index.js
var tr_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'ge\xE7en hafta' eeee 'saat' p",
  yesterday: "'d\xFCn saat' p",
  today: "'bug\xFCn saat' p",
  tomorrow: "'yar\u0131n saat' p",
  nextWeek: "eeee 'saat' p",
  other: "P"
};
var tr_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return tr_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const tr_lib_formatRelative = (tr_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/localize/index.js

var tr_lib_localize_eraValues = {
  narrow: ["M\xD6", "MS"],
  abbreviated: ["M\xD6", "MS"],
  wide: ["Milattan \xD6nce", "Milattan Sonra"]
};
var tr_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1\xC7", "2\xC7", "3\xC7", "4\xC7"],
  wide: ["\u0130lk \xE7eyrek", "\u0130kinci \xC7eyrek", "\xDC\xE7\xFCnc\xFC \xE7eyrek", "Son \xE7eyrek"]
};
var tr_lib_localize_monthValues = {
  narrow: ["O", "\u015E", "M", "N", "M", "H", "T", "A", "E", "E", "K", "A"],
  abbreviated: ["Oca", "\u015Eub", "Mar", "Nis", "May", "Haz", "Tem", "A\u011Fu", "Eyl", "Eki", "Kas", "Ara"],
  wide: ["Ocak", "\u015Eubat", "Mart", "Nisan", "May\u0131s", "Haziran", "Temmuz", "A\u011Fustos", "Eyl\xFCl", "Ekim", "Kas\u0131m", "Aral\u0131k"]
};
var tr_lib_localize_dayValues = {
  narrow: ["P", "P", "S", "\xC7", "P", "C", "C"],
  short: ["Pz", "Pt", "Sa", "\xC7a", "Pe", "Cu", "Ct"],
  abbreviated: ["Paz", "Pzt", "Sal", "\xC7ar", "Per", "Cum", "Cts"],
  wide: ["Pazar", "Pazartesi", "Sal\u0131", "\xC7ar\u015Famba", "Per\u015Fembe", "Cuma", "Cumartesi"]
};
var tr_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\xF6\xF6",
    pm: "\xF6s",
    midnight: "gy",
    noon: "\xF6",
    morning: "sa",
    afternoon: "\xF6s",
    evening: "ak",
    night: "ge"
  },
  abbreviated: {
    am: "\xD6\xD6",
    pm: "\xD6S",
    midnight: "gece yar\u0131s\u0131",
    noon: "\xF6\u011Fle",
    morning: "sabah",
    afternoon: "\xF6\u011Fleden sonra",
    evening: "ak\u015Fam",
    night: "gece"
  },
  wide: {
    am: "\xD6.\xD6.",
    pm: "\xD6.S.",
    midnight: "gece yar\u0131s\u0131",
    noon: "\xF6\u011Fle",
    morning: "sabah",
    afternoon: "\xF6\u011Fleden sonra",
    evening: "ak\u015Fam",
    night: "gece"
  }
};
var tr_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\xF6\xF6",
    pm: "\xF6s",
    midnight: "gy",
    noon: "\xF6",
    morning: "sa",
    afternoon: "\xF6s",
    evening: "ak",
    night: "ge"
  },
  abbreviated: {
    am: "\xD6\xD6",
    pm: "\xD6S",
    midnight: "gece yar\u0131s\u0131",
    noon: "\xF6\u011Flen",
    morning: "sabahleyin",
    afternoon: "\xF6\u011Fleden sonra",
    evening: "ak\u015Famleyin",
    night: "geceleyin"
  },
  wide: {
    am: "\xF6.\xF6.",
    pm: "\xF6.s.",
    midnight: "gece yar\u0131s\u0131",
    noon: "\xF6\u011Flen",
    morning: "sabahleyin",
    afternoon: "\xF6\u011Fleden sonra",
    evening: "ak\u015Famleyin",
    night: "geceleyin"
  }
};
var tr_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  var number = Number(dirtyNumber);
  return number + ".";
};
var tr_lib_localize_localize = {
  ordinalNumber: tr_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: tr_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: tr_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const tr_lib_localize = (tr_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/_lib/match/index.js


var tr_lib_match_matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
var tr_lib_match_parseOrdinalNumberPattern = /\d+/i;
var tr_lib_match_matchEraPatterns = {
  narrow: /^(mö|ms)/i,
  abbreviated: /^(mö|ms)/i,
  wide: /^(milattan önce|milattan sonra)/i
};
var tr_lib_match_parseEraPatterns = {
  any: [/(^mö|^milattan önce)/i, /(^ms|^milattan sonra)/i]
};
var tr_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]ç/i,
  wide: /^((i|İ)lk|(i|İ)kinci|üçüncü|son) çeyrek/i
};
var tr_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i],
  abbreviated: [/1ç/i, /2ç/i, /3ç/i, /4ç/i],
  wide: [/^(i|İ)lk çeyrek/i, /(i|İ)kinci çeyrek/i, /üçüncü çeyrek/i, /son çeyrek/i]
};
var tr_lib_match_matchMonthPatterns = {
  narrow: /^[oşmnhtaek]/i,
  abbreviated: /^(oca|şub|mar|nis|may|haz|tem|ağu|eyl|eki|kas|ara)/i,
  wide: /^(ocak|şubat|mart|nisan|mayıs|haziran|temmuz|ağustos|eylül|ekim|kasım|aralık)/i
};
var tr_lib_match_parseMonthPatterns = {
  narrow: [/^o/i, /^ş/i, /^m/i, /^n/i, /^m/i, /^h/i, /^t/i, /^a/i, /^e/i, /^e/i, /^k/i, /^a/i],
  any: [/^o/i, /^ş/i, /^mar/i, /^n/i, /^may/i, /^h/i, /^t/i, /^ağ/i, /^ey/i, /^ek/i, /^k/i, /^ar/i]
};
var tr_lib_match_matchDayPatterns = {
  narrow: /^[psçc]/i,
  short: /^(pz|pt|sa|ça|pe|cu|ct)/i,
  abbreviated: /^(paz|pzt|sal|çar|per|cum|cts)/i,
  wide: /^(pazar(?!tesi)|pazartesi|salı|çarşamba|perşembe|cuma(?!rtesi)|cumartesi)/i
};
var tr_lib_match_parseDayPatterns = {
  narrow: [/^p/i, /^p/i, /^s/i, /^ç/i, /^p/i, /^c/i, /^c/i],
  any: [/^pz/i, /^pt/i, /^sa/i, /^ça/i, /^pe/i, /^cu/i, /^ct/i],
  wide: [/^pazar(?!tesi)/i, /^pazartesi/i, /^salı/i, /^çarşamba/i, /^perşembe/i, /^cuma(?!rtesi)/i, /^cumartesi/i]
};
var tr_lib_match_matchDayPeriodPatterns = {
  narrow: /^(öö|ös|gy|ö|sa|ös|ak|ge)/i,
  any: /^(ö\.?\s?[ös]\.?|öğleden sonra|gece yarısı|öğle|(sabah|öğ|akşam|gece)(leyin))/i
};
var tr_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ö\.?ö\.?/i,
    pm: /^ö\.?s\.?/i,
    midnight: /^(gy|gece yarısı)/i,
    noon: /^öğ/i,
    morning: /^sa/i,
    afternoon: /^öğleden sonra/i,
    evening: /^ak/i,
    night: /^ge/i
  }
};
var tr_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: tr_lib_match_matchOrdinalNumberPattern,
    parsePattern: tr_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: tr_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: tr_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: tr_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: tr_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: tr_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: tr_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const tr_lib_match = (tr_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/tr/index.js





var tr_locale = {
  code: "tr",
  formatDistance: tr_lib_formatDistance,
  formatLong: tr_lib_formatLong,
  formatRelative: tr_lib_formatRelative,
  localize: tr_lib_localize,
  match: tr_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const tr = (tr_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/formatDistance/index.js
var ug_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u0628\u0649\u0631 \u0633\u0649\u0643\u06C7\u0646\u062A \u0626\u0649\u0686\u0649\u062F\u06D5",
    other: "\u0633\u0649\u0643\u06C7\u0646\u062A \u0626\u0649\u0686\u0649\u062F\u06D5 {{count}}"
  },
  xSeconds: {
    one: "\u0628\u0649\u0631 \u0633\u0649\u0643\u06C7\u0646\u062A",
    other: "\u0633\u0649\u0643\u06C7\u0646\u062A {{count}}"
  },
  halfAMinute: "\u064A\u0649\u0631\u0649\u0645 \u0645\u0649\u0646\u06C7\u062A",
  lessThanXMinutes: {
    one: "\u0628\u0649\u0631 \u0645\u0649\u0646\u06C7\u062A \u0626\u0649\u0686\u0649\u062F\u06D5",
    other: "\u0645\u0649\u0646\u06C7\u062A \u0626\u0649\u0686\u0649\u062F\u06D5 {{count}}"
  },
  xMinutes: {
    one: "\u0628\u0649\u0631 \u0645\u0649\u0646\u06C7\u062A",
    other: "\u0645\u0649\u0646\u06C7\u062A {{count}}"
  },
  aboutXHours: {
    one: "\u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646 \u0628\u0649\u0631 \u0633\u0627\u0626\u06D5\u062A",
    other: "\u0633\u0627\u0626\u06D5\u062A {{count}} \u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646"
  },
  xHours: {
    one: "\u0628\u0649\u0631 \u0633\u0627\u0626\u06D5\u062A",
    other: "\u0633\u0627\u0626\u06D5\u062A {{count}}"
  },
  xDays: {
    one: "\u0628\u0649\u0631 \u0643\u06C8\u0646",
    other: "\u0643\u06C8\u0646 {{count}}"
  },
  aboutXWeeks: {
    one: "\u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646 \u0628\u0649\u0631\u06BE\u06D5\u067E\u062A\u06D5",
    other: "\u06BE\u06D5\u067E\u062A\u06D5 {{count}} \u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646"
  },
  xWeeks: {
    one: "\u0628\u0649\u0631\u06BE\u06D5\u067E\u062A\u06D5",
    other: "\u06BE\u06D5\u067E\u062A\u06D5 {{count}}"
  },
  aboutXMonths: {
    one: "\u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646 \u0628\u0649\u0631 \u0626\u0627\u064A",
    other: "\u0626\u0627\u064A {{count}} \u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646"
  },
  xMonths: {
    one: "\u0628\u0649\u0631 \u0626\u0627\u064A",
    other: "\u0626\u0627\u064A {{count}}"
  },
  aboutXYears: {
    one: "\u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646 \u0628\u0649\u0631 \u064A\u0649\u0644",
    other: "\u064A\u0649\u0644 {{count}} \u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646"
  },
  xYears: {
    one: "\u0628\u0649\u0631 \u064A\u0649\u0644",
    other: "\u064A\u0649\u0644 {{count}}"
  },
  overXYears: {
    one: "\u0628\u0649\u0631 \u064A\u0649\u0644\u062F\u0649\u0646 \u0626\u0627\u0631\u062A\u06C7\u0642",
    other: "\u064A\u0649\u0644\u062F\u0649\u0646 \u0626\u0627\u0631\u062A\u06C7\u0642 {{count}}"
  },
  almostXYears: {
    one: "\u0626\u0627\u0633\u0627\u0633\u06D5\u0646 \u0628\u0649\u0631 \u064A\u0649\u0644",
    other: "\u064A\u0649\u0644 {{count}} \u0626\u0627\u0633\u0627\u0633\u06D5\u0646"
  }
};
var ug_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = ug_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result;
    } else {
      return result + " \u0628\u0648\u0644\u062F\u0649";
    }
  }
  return result;
};
/* harmony default export */ const ug_lib_formatDistance = (ug_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/formatLong/index.js

var ug_lib_formatLong_dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var ug_lib_formatLong_timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var ug_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u062F\u06D5' {{time}}",
  long: "{{date}} '\u062F\u06D5' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var ug_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: ug_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: ug_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: ug_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const ug_lib_formatLong = (ug_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/formatRelative/index.js
var ug_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u0626\u200D\u06C6\u062A\u0643\u06D5\u0646' eeee '\u062F\u06D5' p",
  yesterday: "'\u062A\u06C8\u0646\u06C8\u06AF\u06C8\u0646 \u062F\u06D5' p",
  today: "'\u0628\u06C8\u06AF\u06C8\u0646 \u062F\u06D5' p",
  tomorrow: "'\u0626\u06D5\u062A\u06D5 \u062F\u06D5' p",
  nextWeek: "eeee '\u062F\u06D5' p",
  other: "P"
};
var ug_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return ug_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const ug_lib_formatRelative = (ug_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/localize/index.js

var ug_lib_localize_eraValues = {
  narrow: ["\u0628", "\u0643"],
  abbreviated: ["\u0628", "\u0643"],
  wide: ["\u0645\u0649\u064A\u0644\u0627\u062F\u0649\u062F\u0649\u0646 \u0628\u06C7\u0631\u06C7\u0646", "\u0645\u0649\u064A\u0644\u0627\u062F\u0649\u062F\u0649\u0646 \u0643\u0649\u064A\u0649\u0646"]
};
var ug_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1", "2", "3", "4"],
  wide: ["\u0628\u0649\u0631\u0649\u0646\u062C\u0649 \u0686\u0627\u0631\u06D5\u0643", "\u0626\u0649\u0643\u0643\u0649\u0646\u062C\u0649 \u0686\u0627\u0631\u06D5\u0643", "\u0626\u06C8\u0686\u0649\u0646\u062C\u0649 \u0686\u0627\u0631\u06D5\u0643", "\u062A\u06C6\u062A\u0649\u0646\u062C\u0649 \u0686\u0627\u0631\u06D5\u0643"]
};
var ug_lib_localize_monthValues = {
  narrow: ["\u064A", "\u0641", "\u0645", "\u0627", "\u0645", "\u0649", "\u0649", "\u0627", "\u0633", "\u06C6", "\u0646", "\u062F"],
  abbreviated: ["\u064A\u0627\u0646\u06CB\u0627\u0631", "\u0641\u06D0\u06CB\u0649\u0631\u0627\u0644", "\u0645\u0627\u0631\u062A", "\u0626\u0627\u067E\u0631\u0649\u0644", "\u0645\u0627\u064A", "\u0626\u0649\u064A\u06C7\u0646", "\u0626\u0649\u064A\u0648\u0644", "\u0626\u0627\u06CB\u063A\u06C7\u0633\u062A", "\u0633\u0649\u0646\u062A\u06D5\u0628\u0649\u0631", "\u0626\u06C6\u0643\u062A\u06D5\u0628\u0649\u0631", "\u0646\u0648\u064A\u0627\u0628\u0649\u0631", "\u062F\u0649\u0643\u0627\u0628\u0649\u0631"],
  wide: ["\u064A\u0627\u0646\u06CB\u0627\u0631", "\u0641\u06D0\u06CB\u0649\u0631\u0627\u0644", "\u0645\u0627\u0631\u062A", "\u0626\u0627\u067E\u0631\u0649\u0644", "\u0645\u0627\u064A", "\u0626\u0649\u064A\u06C7\u0646", "\u0626\u0649\u064A\u0648\u0644", "\u0626\u0627\u06CB\u063A\u06C7\u0633\u062A", "\u0633\u0649\u0646\u062A\u06D5\u0628\u0649\u0631", "\u0626\u06C6\u0643\u062A\u06D5\u0628\u0649\u0631", "\u0646\u0648\u064A\u0627\u0628\u0649\u0631", "\u062F\u0649\u0643\u0627\u0628\u0649\u0631"]
};
var ug_lib_localize_dayValues = {
  narrow: ["\u064A", "\u062F", "\u0633", "\u0686", "\u067E", "\u062C", "\u0634"],
  short: ["\u064A", "\u062F", "\u0633", "\u0686", "\u067E", "\u062C", "\u0634"],
  abbreviated: ["\u064A\u06D5\u0643\u0634\u06D5\u0646\u0628\u06D5", "\u062F\u06C8\u0634\u06D5\u0646\u0628\u06D5", "\u0633\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5", "\u0686\u0627\u0631\u0634\u06D5\u0646\u0628\u06D5", "\u067E\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5", "\u062C\u06C8\u0645\u06D5", "\u0634\u06D5\u0646\u0628\u06D5"],
  wide: ["\u064A\u06D5\u0643\u0634\u06D5\u0646\u0628\u06D5", "\u062F\u06C8\u0634\u06D5\u0646\u0628\u06D5", "\u0633\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5", "\u0686\u0627\u0631\u0634\u06D5\u0646\u0628\u06D5", "\u067E\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5", "\u062C\u06C8\u0645\u06D5", "\u0634\u06D5\u0646\u0628\u06D5"]
};
var ug_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0626\u06D5",
    pm: "\u0686",
    midnight: "\u0643",
    noon: "\u0686",
    morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646",
    afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
    evening: "\u0626\u0627\u062E\u0634\u0649\u0645",
    night: "\u0643\u0649\u0686\u06D5"
  },
  abbreviated: {
    am: "\u0626\u06D5",
    pm: "\u0686",
    midnight: "\u0643",
    noon: "\u0686",
    morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646",
    afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
    evening: "\u0626\u0627\u062E\u0634\u0649\u0645",
    night: "\u0643\u0649\u0686\u06D5"
  },
  wide: {
    am: "\u0626\u06D5",
    pm: "\u0686",
    midnight: "\u0643",
    noon: "\u0686",
    morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646",
    afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
    evening: "\u0626\u0627\u062E\u0634\u0649\u0645",
    night: "\u0643\u0649\u0686\u06D5"
  }
};
var ug_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0626\u06D5",
    pm: "\u0686",
    midnight: "\u0643",
    noon: "\u0686",
    morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646\u062F\u06D5",
    afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
    evening: "\u0626\u0627\u062E\u0634\u0627\u0645\u062F\u0627",
    night: "\u0643\u0649\u0686\u0649\u062F\u06D5"
  },
  abbreviated: {
    am: "\u0626\u06D5",
    pm: "\u0686",
    midnight: "\u0643",
    noon: "\u0686",
    morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646\u062F\u06D5",
    afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
    evening: "\u0626\u0627\u062E\u0634\u0627\u0645\u062F\u0627",
    night: "\u0643\u0649\u0686\u0649\u062F\u06D5"
  },
  wide: {
    am: "\u0626\u06D5",
    pm: "\u0686",
    midnight: "\u0643",
    noon: "\u0686",
    morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646\u062F\u06D5",
    afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
    evening: "\u0626\u0627\u062E\u0634\u0627\u0645\u062F\u0627",
    night: "\u0643\u0649\u0686\u0649\u062F\u06D5"
  }
};
var ug_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var ug_lib_localize_localize = {
  ordinalNumber: ug_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: ug_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: ug_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const ug_lib_localize = (ug_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/_lib/match/index.js


var ug_lib_match_matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var ug_lib_match_parseOrdinalNumberPattern = /\d+/i;
var ug_lib_match_matchEraPatterns = {
  narrow: /^(ب|ك)/i,
  wide: /^(مىيلادىدىن بۇرۇن|مىيلادىدىن كىيىن)/i
};
var ug_lib_match_parseEraPatterns = {
  any: [/^بۇرۇن/i, /^كىيىن/i]
};
var ug_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^چ[1234]/i,
  wide: /^چارەك [1234]/i
};
var ug_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var ug_lib_match_matchMonthPatterns = {
  // eslint-disable-next-line no-misleading-character-class
  narrow: /^[يفمئامئ‍ئاسۆند]/i,
  abbreviated: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i,
  wide: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i
};
var ug_lib_match_parseMonthPatterns = {
  narrow: [/^ي/i, /^ف/i, /^م/i, /^ا/i, /^م/i, /^ى‍/i, /^ى‍/i, /^ا‍/i, /^س/i, /^ۆ/i, /^ن/i, /^د/i],
  any: [/^يان/i, /^فېۋ/i, /^مار/i, /^ئاپ/i, /^ماي/i, /^ئىيۇن/i, /^ئىيول/i, /^ئاۋ/i, /^سىن/i, /^ئۆك/i, /^نوي/i, /^دىك/i]
};
var ug_lib_match_matchDayPatterns = {
  narrow: /^[دسچپجشي]/i,
  short: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
  abbreviated: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
  wide: /^(يەكشەنبە|دۈشەنبە|سەيشەنبە|چارشەنبە|پەيشەنبە|جۈمە|شەنبە)/i
};
var ug_lib_match_parseDayPatterns = {
  narrow: [/^ي/i, /^د/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i],
  any: [/^ي/i, /^د/i, /^س/i, /^چ/i, /^پ/i, /^ج/i, /^ش/i]
};
var ug_lib_match_matchDayPeriodPatterns = {
  narrow: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i,
  any: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i
};
var ug_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^ئە/i,
    pm: /^چ/i,
    midnight: /^ك/i,
    noon: /^چ/i,
    morning: /ئەتىگەن/i,
    afternoon: /چۈشتىن كىيىن/i,
    evening: /ئاخشىم/i,
    night: /كىچە/i
  }
};
var ug_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: ug_lib_match_matchOrdinalNumberPattern,
    parsePattern: ug_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ug_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ug_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ug_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: ug_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: ug_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: ug_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const ug_lib_match = (ug_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/ug/index.js





var ug_locale = {
  code: "ug",
  formatDistance: ug_lib_formatDistance,
  formatLong: ug_lib_formatLong,
  formatRelative: ug_lib_formatRelative,
  localize: ug_lib_localize,
  match: ug_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const ug = (ug_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/formatDistance/index.js
function uk_lib_formatDistance_declension(scheme, count) {
  if (scheme.one !== void 0 && count === 1) {
    return scheme.one;
  }
  var rem10 = count % 10;
  var rem100 = count % 100;
  if (rem10 === 1 && rem100 !== 11) {
    return scheme.singularNominative.replace("{{count}}", String(count));
  } else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) {
    return scheme.singularGenitive.replace("{{count}}", String(count));
  } else {
    return scheme.pluralGenitive.replace("{{count}}", String(count));
  }
}
function uk_lib_formatDistance_buildLocalizeTokenFn(scheme) {
  return function(count, options) {
    if (options && options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        if (scheme.future) {
          return uk_lib_formatDistance_declension(scheme.future, count);
        } else {
          return "\u0437\u0430 " + uk_lib_formatDistance_declension(scheme.regular, count);
        }
      } else {
        if (scheme.past) {
          return uk_lib_formatDistance_declension(scheme.past, count);
        } else {
          return uk_lib_formatDistance_declension(scheme.regular, count) + " \u0442\u043E\u043C\u0443";
        }
      }
    } else {
      return uk_lib_formatDistance_declension(scheme.regular, count);
    }
  };
}
var halfAtMinute = function halfAtMinute2(_, options) {
  if (options && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "\u0437\u0430 \u043F\u0456\u0432\u0445\u0432\u0438\u043B\u0438\u043D\u0438";
    } else {
      return "\u043F\u0456\u0432\u0445\u0432\u0438\u043B\u0438\u043D\u0438 \u0442\u043E\u043C\u0443";
    }
  }
  return "\u043F\u0456\u0432\u0445\u0432\u0438\u043B\u0438\u043D\u0438";
};
var uk_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      one: "\u043C\u0435\u043D\u0448\u0435 \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
      singularNominative: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
      singularGenitive: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434",
      pluralGenitive: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    future: {
      one: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
      pluralGenitive: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    }
  }),
  xSeconds: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    past: {
      singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443 \u0442\u043E\u043C\u0443",
      singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438 \u0442\u043E\u043C\u0443",
      pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0442\u043E\u043C\u0443"
    },
    future: {
      singularNominative: "\u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
      singularGenitive: "\u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
      pluralGenitive: "\u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    }
  }),
  halfAMinute: halfAtMinute,
  lessThanXMinutes: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      one: "\u043C\u0435\u043D\u0448\u0435 \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
      singularNominative: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
      singularGenitive: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D",
      pluralGenitive: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D"
    },
    future: {
      one: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 \u0445\u0432\u0438\u043B\u0438\u043D\u0443",
      singularNominative: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0443",
      singularGenitive: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
      pluralGenitive: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D"
    }
  }),
  xMinutes: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0430",
      singularGenitive: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
      pluralGenitive: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D"
    },
    past: {
      singularNominative: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0443 \u0442\u043E\u043C\u0443",
      singularGenitive: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438 \u0442\u043E\u043C\u0443",
      pluralGenitive: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D \u0442\u043E\u043C\u0443"
    },
    future: {
      singularNominative: "\u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0443",
      singularGenitive: "\u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
      pluralGenitive: "\u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D"
    }
  }),
  aboutXHours: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0438",
      singularGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D",
      pluralGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D"
    },
    future: {
      singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0433\u043E\u0434\u0438\u043D\u0443",
      singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438",
      pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0433\u043E\u0434\u0438\u043D"
    }
  }),
  xHours: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0443",
      singularGenitive: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0438",
      pluralGenitive: "{{count}} \u0433\u043E\u0434\u0438\u043D"
    }
  }),
  xDays: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0434\u0435\u043D\u044C",
      singularGenitive: "{{count}} \u0434\u043Di",
      pluralGenitive: "{{count}} \u0434\u043D\u0456\u0432"
    }
  }),
  aboutXWeeks: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0442\u0438\u0436\u043D\u044F",
      singularGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0442\u0438\u0436\u043D\u0456\u0432",
      pluralGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0442\u0438\u0436\u043D\u0456\u0432"
    },
    future: {
      singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0442\u0438\u0436\u0434\u0435\u043D\u044C",
      singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0442\u0438\u0436\u043D\u0456",
      pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0442\u0438\u0436\u043D\u0456\u0432"
    }
  }),
  xWeeks: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0442\u0438\u0436\u0434\u0435\u043D\u044C",
      singularGenitive: "{{count}} \u0442\u0438\u0436\u043D\u0456",
      pluralGenitive: "{{count}} \u0442\u0438\u0436\u043D\u0456\u0432"
    }
  }),
  aboutXMonths: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u043C\u0456\u0441\u044F\u0446\u044F",
      singularGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u043C\u0456\u0441\u044F\u0446\u0456\u0432",
      pluralGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u043C\u0456\u0441\u044F\u0446\u0456\u0432"
    },
    future: {
      singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u043C\u0456\u0441\u044F\u0446\u044C",
      singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u043C\u0456\u0441\u044F\u0446\u0456",
      pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u043C\u0456\u0441\u044F\u0446\u0456\u0432"
    }
  }),
  xMonths: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u043C\u0456\u0441\u044F\u0446\u044C",
      singularGenitive: "{{count}} \u043C\u0456\u0441\u044F\u0446\u0456",
      pluralGenitive: "{{count}} \u043C\u0456\u0441\u044F\u0446\u0456\u0432"
    }
  }),
  aboutXYears: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0440\u043E\u043A\u0443",
      singularGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0440\u043E\u043A\u0456\u0432",
      pluralGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0440\u043E\u043A\u0456\u0432"
    },
    future: {
      singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0440\u0456\u043A",
      singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0440\u043E\u043A\u0438",
      pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0440\u043E\u043A\u0456\u0432"
    }
  }),
  xYears: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "{{count}} \u0440\u0456\u043A",
      singularGenitive: "{{count}} \u0440\u043E\u043A\u0438",
      pluralGenitive: "{{count}} \u0440\u043E\u043A\u0456\u0432"
    }
  }),
  overXYears: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u0431\u0456\u043B\u044C\u0448\u0435 {{count}} \u0440\u043E\u043A\u0443",
      singularGenitive: "\u0431\u0456\u043B\u044C\u0448\u0435 {{count}} \u0440\u043E\u043A\u0456\u0432",
      pluralGenitive: "\u0431\u0456\u043B\u044C\u0448\u0435 {{count}} \u0440\u043E\u043A\u0456\u0432"
    },
    future: {
      singularNominative: "\u0431\u0456\u043B\u044C\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0440\u0456\u043A",
      singularGenitive: "\u0431\u0456\u043B\u044C\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0440\u043E\u043A\u0438",
      pluralGenitive: "\u0431\u0456\u043B\u044C\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0440\u043E\u043A\u0456\u0432"
    }
  }),
  almostXYears: uk_lib_formatDistance_buildLocalizeTokenFn({
    regular: {
      singularNominative: "\u043C\u0430\u0439\u0436\u0435 {{count}} \u0440\u0456\u043A",
      singularGenitive: "\u043C\u0430\u0439\u0436\u0435 {{count}} \u0440\u043E\u043A\u0438",
      pluralGenitive: "\u043C\u0430\u0439\u0436\u0435 {{count}} \u0440\u043E\u043A\u0456\u0432"
    },
    future: {
      singularNominative: "\u043C\u0430\u0439\u0436\u0435 \u0437\u0430 {{count}} \u0440\u0456\u043A",
      singularGenitive: "\u043C\u0430\u0439\u0436\u0435 \u0437\u0430 {{count}} \u0440\u043E\u043A\u0438",
      pluralGenitive: "\u043C\u0430\u0439\u0436\u0435 \u0437\u0430 {{count}} \u0440\u043E\u043A\u0456\u0432"
    }
  })
};
var uk_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  options = options || {};
  return uk_lib_formatDistance_formatDistanceLocale[token](count, options);
};
/* harmony default export */ const uk_lib_formatDistance = (uk_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/formatLong/index.js

var uk_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM y '\u0440.'",
  long: "do MMMM y '\u0440.'",
  medium: "d MMM y '\u0440.'",
  short: "dd.MM.y"
};
var uk_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var uk_lib_formatLong_dateTimeFormats = {
  full: "{{date}} '\u043E' {{time}}",
  long: "{{date}} '\u043E' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var uk_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: uk_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: uk_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: uk_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const uk_lib_formatLong = (uk_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/formatRelative/index.js


var uk_lib_formatRelative_accusativeWeekdays = ["\u043D\u0435\u0434\u0456\u043B\u044E", "\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A", "\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A", "\u0441\u0435\u0440\u0435\u0434\u0443", "\u0447\u0435\u0442\u0432\u0435\u0440", "\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044E", "\u0441\u0443\u0431\u043E\u0442\u0443"];
function uk_lib_formatRelative_lastWeek(day) {
  var weekday = uk_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'\u0443 \u043C\u0438\u043D\u0443\u043B\u0443 " + weekday + " \u043E' p";
    case 1:
    case 2:
    case 4:
      return "'\u0443 \u043C\u0438\u043D\u0443\u043B\u0438\u0439 " + weekday + " \u043E' p";
  }
}
function uk_lib_formatRelative_thisWeek(day) {
  var weekday = uk_lib_formatRelative_accusativeWeekdays[day];
  return "'\u0443 " + weekday + " \u043E' p";
}
function uk_lib_formatRelative_nextWeek(day) {
  var weekday = uk_lib_formatRelative_accusativeWeekdays[day];
  switch (day) {
    case 0:
    case 3:
    case 5:
    case 6:
      return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0443 " + weekday + " \u043E' p";
    case 1:
    case 2:
    case 4:
      return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0438\u0439 " + weekday + " \u043E' p";
  }
}
var _lib_formatRelative_lastWeekFormat = function lastWeekFormat2(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return uk_lib_formatRelative_thisWeek(day);
  } else {
    return uk_lib_formatRelative_lastWeek(day);
  }
};
var _lib_formatRelative_nextWeekFormat = function nextWeekFormat2(dirtyDate, baseDate, options) {
  var date = (0,toDate/* default */.Z)(dirtyDate);
  var day = date.getUTCDay();
  if (isSameUTCWeek(date, baseDate, options)) {
    return uk_lib_formatRelative_thisWeek(day);
  } else {
    return uk_lib_formatRelative_nextWeek(day);
  }
};
var uk_lib_formatRelative_formatRelativeLocale = {
  lastWeek: _lib_formatRelative_lastWeekFormat,
  yesterday: "'\u0432\u0447\u043E\u0440\u0430 \u043E' p",
  today: "'\u0441\u044C\u043E\u0433\u043E\u0434\u043D\u0456 \u043E' p",
  tomorrow: "'\u0437\u0430\u0432\u0442\u0440\u0430 \u043E' p",
  nextWeek: _lib_formatRelative_nextWeekFormat,
  other: "P"
};
var uk_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = uk_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const uk_lib_formatRelative = (uk_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/localize/index.js

var uk_lib_localize_eraValues = {
  narrow: ["\u0434\u043E \u043D.\u0435.", "\u043D.\u0435."],
  abbreviated: ["\u0434\u043E \u043D. \u0435.", "\u043D. \u0435."],
  wide: ["\u0434\u043E \u043D\u0430\u0448\u043E\u0457 \u0435\u0440\u0438", "\u043D\u0430\u0448\u043E\u0457 \u0435\u0440\u0438"]
};
var uk_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-\u0439 \u043A\u0432.", "2-\u0439 \u043A\u0432.", "3-\u0439 \u043A\u0432.", "4-\u0439 \u043A\u0432."],
  wide: ["1-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "2-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "3-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B", "4-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B"]
};
var uk_lib_localize_monthValues = {
  // ДСТУ 3582:2013
  narrow: ["\u0421", "\u041B", "\u0411", "\u041A", "\u0422", "\u0427", "\u041B", "\u0421", "\u0412", "\u0416", "\u041B", "\u0413"],
  abbreviated: ["\u0441\u0456\u0447.", "\u043B\u044E\u0442.", "\u0431\u0435\u0440\u0435\u0437.", "\u043A\u0432\u0456\u0442.", "\u0442\u0440\u0430\u0432.", "\u0447\u0435\u0440\u0432.", "\u043B\u0438\u043F.", "\u0441\u0435\u0440\u043F.", "\u0432\u0435\u0440\u0435\u0441.", "\u0436\u043E\u0432\u0442.", "\u043B\u0438\u0441\u0442\u043E\u043F.", "\u0433\u0440\u0443\u0434."],
  wide: ["\u0441\u0456\u0447\u0435\u043D\u044C", "\u043B\u044E\u0442\u0438\u0439", "\u0431\u0435\u0440\u0435\u0437\u0435\u043D\u044C", "\u043A\u0432\u0456\u0442\u0435\u043D\u044C", "\u0442\u0440\u0430\u0432\u0435\u043D\u044C", "\u0447\u0435\u0440\u0432\u0435\u043D\u044C", "\u043B\u0438\u043F\u0435\u043D\u044C", "\u0441\u0435\u0440\u043F\u0435\u043D\u044C", "\u0432\u0435\u0440\u0435\u0441\u0435\u043D\u044C", "\u0436\u043E\u0432\u0442\u0435\u043D\u044C", "\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434", "\u0433\u0440\u0443\u0434\u0435\u043D\u044C"]
};
var uk_lib_localize_formattingMonthValues = {
  narrow: ["\u0421", "\u041B", "\u0411", "\u041A", "\u0422", "\u0427", "\u041B", "\u0421", "\u0412", "\u0416", "\u041B", "\u0413"],
  abbreviated: ["\u0441\u0456\u0447.", "\u043B\u044E\u0442.", "\u0431\u0435\u0440\u0435\u0437.", "\u043A\u0432\u0456\u0442.", "\u0442\u0440\u0430\u0432.", "\u0447\u0435\u0440\u0432.", "\u043B\u0438\u043F.", "\u0441\u0435\u0440\u043F.", "\u0432\u0435\u0440\u0435\u0441.", "\u0436\u043E\u0432\u0442.", "\u043B\u0438\u0441\u0442\u043E\u043F.", "\u0433\u0440\u0443\u0434."],
  wide: ["\u0441\u0456\u0447\u043D\u044F", "\u043B\u044E\u0442\u043E\u0433\u043E", "\u0431\u0435\u0440\u0435\u0437\u043D\u044F", "\u043A\u0432\u0456\u0442\u043D\u044F", "\u0442\u0440\u0430\u0432\u043D\u044F", "\u0447\u0435\u0440\u0432\u043D\u044F", "\u043B\u0438\u043F\u043D\u044F", "\u0441\u0435\u0440\u043F\u043D\u044F", "\u0432\u0435\u0440\u0435\u0441\u043D\u044F", "\u0436\u043E\u0432\u0442\u043D\u044F", "\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430", "\u0433\u0440\u0443\u0434\u043D\u044F"]
};
var uk_lib_localize_dayValues = {
  narrow: ["\u041D", "\u041F", "\u0412", "\u0421", "\u0427", "\u041F", "\u0421"],
  short: ["\u043D\u0434", "\u043F\u043D", "\u0432\u0442", "\u0441\u0440", "\u0447\u0442", "\u043F\u0442", "\u0441\u0431"],
  abbreviated: ["\u043D\u0435\u0434", "\u043F\u043E\u043D", "\u0432\u0456\u0432", "\u0441\u0435\u0440", "\u0447\u0442\u0432", "\u043F\u0442\u043D", "\u0441\u0443\u0431"],
  wide: ["\u043D\u0435\u0434\u0456\u043B\u044F", "\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A", "\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A", "\u0441\u0435\u0440\u0435\u0434\u0430", "\u0447\u0435\u0442\u0432\u0435\u0440", "\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044F", "\u0441\u0443\u0431\u043E\u0442\u0430"]
};
var uk_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u0456\u0432\u043D.",
    noon: "\u043F\u043E\u043B.",
    morning: "\u0440\u0430\u043D\u043E\u043A",
    afternoon: "\u0434\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u0456\u0447"
  },
  abbreviated: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u0456\u0432\u043D.",
    noon: "\u043F\u043E\u043B.",
    morning: "\u0440\u0430\u043D\u043E\u043A",
    afternoon: "\u0434\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u0456\u0447"
  },
  wide: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u0456\u0432\u043D\u0456\u0447",
    noon: "\u043F\u043E\u043B\u0443\u0434\u0435\u043D\u044C",
    morning: "\u0440\u0430\u043D\u043E\u043A",
    afternoon: "\u0434\u0435\u043D\u044C",
    evening: "\u0432\u0435\u0447\u0456\u0440",
    night: "\u043D\u0456\u0447"
  }
};
var uk_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u0456\u0432\u043D.",
    noon: "\u043F\u043E\u043B.",
    morning: "\u0440\u0430\u043D\u043A\u0443",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u0456"
  },
  abbreviated: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u0456\u0432\u043D.",
    noon: "\u043F\u043E\u043B.",
    morning: "\u0440\u0430\u043D\u043A\u0443",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u0456"
  },
  wide: {
    am: "\u0414\u041F",
    pm: "\u041F\u041F",
    midnight: "\u043F\u0456\u0432\u043D\u0456\u0447",
    noon: "\u043F\u043E\u043B\u0443\u0434\u0435\u043D\u044C",
    morning: "\u0440\u0430\u043D\u043A\u0443",
    afternoon: "\u0434\u043D\u044F",
    evening: "\u0432\u0435\u0447.",
    night: "\u043D\u043E\u0447\u0456"
  }
};
var uk_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var unit = String(options === null || options === void 0 ? void 0 : options.unit);
  var number = Number(dirtyNumber);
  var suffix;
  if (unit === "date") {
    if (number === 3 || number === 23) {
      suffix = "-\u0454";
    } else {
      suffix = "-\u0435";
    }
  } else if (unit === "minute" || unit === "second" || unit === "hour") {
    suffix = "-\u0430";
  } else {
    suffix = "-\u0439";
  }
  return number + suffix;
};
var uk_lib_localize_localize = {
  ordinalNumber: uk_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: uk_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: uk_lib_localize_dayPeriodValues,
    defaultWidth: "any",
    formattingValues: uk_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const uk_lib_localize = (uk_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/_lib/match/index.js


var uk_lib_match_matchOrdinalNumberPattern = /^(\d+)(-?(е|й|є|а|я))?/i;
var uk_lib_match_parseOrdinalNumberPattern = /\d+/i;
var uk_lib_match_matchEraPatterns = {
  narrow: /^((до )?н\.?\s?е\.?)/i,
  abbreviated: /^((до )?н\.?\s?е\.?)/i,
  wide: /^(до нашої ери|нашої ери|наша ера)/i
};
var uk_lib_match_parseEraPatterns = {
  any: [/^д/i, /^н/i]
};
var uk_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234](-?[иі]?й?)? кв.?/i,
  wide: /^[1234](-?[иі]?й?)? квартал/i
};
var uk_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var uk_lib_match_matchMonthPatterns = {
  narrow: /^[слбктчвжг]/i,
  abbreviated: /^(січ|лют|бер(ез)?|квіт|трав|черв|лип|серп|вер(ес)?|жовт|лис(топ)?|груд)\.?/i,
  wide: /^(січень|січня|лютий|лютого|березень|березня|квітень|квітня|травень|травня|червня|червень|липень|липня|серпень|серпня|вересень|вересня|жовтень|жовтня|листопад[а]?|грудень|грудня)/i
};
var uk_lib_match_parseMonthPatterns = {
  narrow: [/^с/i, /^л/i, /^б/i, /^к/i, /^т/i, /^ч/i, /^л/i, /^с/i, /^в/i, /^ж/i, /^л/i, /^г/i],
  any: [/^сі/i, /^лю/i, /^б/i, /^к/i, /^т/i, /^ч/i, /^лип/i, /^се/i, /^в/i, /^ж/i, /^лис/i, /^г/i]
};
var uk_lib_match_matchDayPatterns = {
  narrow: /^[нпвсч]/i,
  short: /^(нд|пн|вт|ср|чт|пт|сб)\.?/i,
  abbreviated: /^(нед|пон|вів|сер|че?тв|птн?|суб)\.?/i,
  wide: /^(неділ[яі]|понеділ[ок][ка]|вівтор[ок][ка]|серед[аи]|четвер(га)?|п\W*?ятниц[яі]|субот[аи])/i
};
var uk_lib_match_parseDayPatterns = {
  narrow: [/^н/i, /^п/i, /^в/i, /^с/i, /^ч/i, /^п/i, /^с/i],
  any: [/^н/i, /^п[он]/i, /^в/i, /^с[ер]/i, /^ч/i, /^п\W*?[ят]/i, /^с[уб]/i]
};
var uk_lib_match_matchDayPeriodPatterns = {
  narrow: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
  abbreviated: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
  wide: /^([дп]п|північ|полудень|ранок|ранку|день|дня|вечір|вечора|ніч|ночі)/i
};
var uk_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^дп/i,
    pm: /^пп/i,
    midnight: /^півн/i,
    noon: /^пол/i,
    morning: /^р/i,
    afternoon: /^д[ен]/i,
    evening: /^в/i,
    night: /^н/i
  }
};
var uk_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: uk_lib_match_matchOrdinalNumberPattern,
    parsePattern: uk_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uk_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uk_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uk_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uk_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uk_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uk_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const uk_lib_match = (uk_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uk/index.js





var uk_locale = {
  code: "uk",
  formatDistance: uk_lib_formatDistance,
  formatLong: uk_lib_formatLong,
  formatRelative: uk_lib_formatRelative,
  localize: uk_lib_localize,
  match: uk_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const uk = (uk_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/formatDistance/index.js
var uz_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "sekunddan kam",
    other: "{{count}} sekunddan kam"
  },
  xSeconds: {
    one: "1 sekund",
    other: "{{count}} sekund"
  },
  halfAMinute: "yarim minut",
  lessThanXMinutes: {
    one: "bir minutdan kam",
    other: "{{count}} minutdan kam"
  },
  xMinutes: {
    one: "1 minut",
    other: "{{count}} minut"
  },
  aboutXHours: {
    one: "tahminan 1 soat",
    other: "tahminan {{count}} soat"
  },
  xHours: {
    one: "1 soat",
    other: "{{count}} soat"
  },
  xDays: {
    one: "1 kun",
    other: "{{count}} kun"
  },
  aboutXWeeks: {
    one: "tahminan 1 hafta",
    other: "tahminan {{count}} hafta"
  },
  xWeeks: {
    one: "1 hafta",
    other: "{{count}} hafta"
  },
  aboutXMonths: {
    one: "tahminan 1 oy",
    other: "tahminan {{count}} oy"
  },
  xMonths: {
    one: "1 oy",
    other: "{{count}} oy"
  },
  aboutXYears: {
    one: "tahminan 1 yil",
    other: "tahminan {{count}} yil"
  },
  xYears: {
    one: "1 yil",
    other: "{{count}} yil"
  },
  overXYears: {
    one: "1 yildan ko'p",
    other: "{{count}} yildan ko'p"
  },
  almostXYears: {
    one: "deyarli 1 yil",
    other: "deyarli {{count}} yil"
  }
};
var uz_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = uz_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " dan keyin";
    } else {
      return result + " oldin";
    }
  }
  return result;
};
/* harmony default export */ const uz_lib_formatDistance = (uz_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/formatLong/index.js

var uz_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM, y",
  long: "do MMMM, y",
  medium: "d MMM, y",
  short: "dd/MM/yyyy"
};
var uz_lib_formatLong_timeFormats = {
  full: "h:mm:ss zzzz",
  long: "h:mm:ss z",
  medium: "h:mm:ss",
  short: "h:mm"
};
var uz_lib_formatLong_dateTimeFormats = {
  any: "{{date}}, {{time}}"
};
var uz_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_lib_formatLong_dateTimeFormats,
    defaultWidth: "any"
  })
};
/* harmony default export */ const uz_lib_formatLong = (uz_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/formatRelative/index.js
var uz_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'oldingi' eeee p 'da'",
  yesterday: "'kecha' p 'da'",
  today: "'bugun' p 'da'",
  tomorrow: "'ertaga' p 'da'",
  nextWeek: "eeee p 'da'",
  other: "P"
};
var uz_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return uz_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const uz_lib_formatRelative = (uz_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/localize/index.js

var uz_lib_localize_eraValues = {
  narrow: ["M.A", "M."],
  abbreviated: ["M.A", "M."],
  wide: ["Miloddan Avvalgi", "Milodiy"]
};
var uz_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["CH.1", "CH.2", "CH.3", "CH.4"],
  wide: ["1-chi chorak", "2-chi chorak", "3-chi chorak", "4-chi chorak"]
};
var uz_lib_localize_monthValues = {
  narrow: ["Y", "F", "M", "A", "M", "I", "I", "A", "S", "O", "N", "D"],
  abbreviated: ["Yan", "Fev", "Mar", "Apr", "May", "Iyun", "Iyul", "Avg", "Sen", "Okt", "Noy", "Dek"],
  wide: ["Yanvar", "Fevral", "Mart", "Aprel", "May", "Iyun", "Iyul", "Avgust", "Sentabr", "Oktabr", "Noyabr", "Dekabr"]
};
var uz_lib_localize_dayValues = {
  narrow: ["Y", "D", "S", "CH", "P", "J", "SH"],
  short: ["Ya", "Du", "Se", "Cho", "Pa", "Ju", "Sha"],
  abbreviated: ["Yak", "Dush", "Sesh", "Chor", "Pay", "Jum", "Shan"],
  wide: ["Yakshanba", "Dushanba", "Seshanba", "Chorshanba", "Payshanba", "Juma", "Shanba"]
};
var uz_lib_localize_dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "y.t",
    noon: "p.",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "yarim tun",
    noon: "peshin",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "yarim tun",
    noon: "peshin",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun"
  }
};
var uz_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "y.t",
    noon: "p.",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "yarim tun",
    noon: "peshin",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "yarim tun",
    noon: "peshin",
    morning: "ertalab",
    afternoon: "tushdan keyin",
    evening: "kechqurun",
    night: "tun"
  }
};
var uz_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var uz_lib_localize_localize = {
  ordinalNumber: uz_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: uz_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: uz_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const uz_lib_localize = (uz_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/_lib/match/index.js


var uz_lib_match_matchOrdinalNumberPattern = /^(\d+)(chi)?/i;
var uz_lib_match_parseOrdinalNumberPattern = /\d+/i;
var uz_lib_match_matchEraPatterns = {
  narrow: /^(m\.a|m\.)/i,
  abbreviated: /^(m\.a\.?\s?m\.?)/i,
  wide: /^(miloddan avval|miloddan keyin)/i
};
var uz_lib_match_parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var uz_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](chi)? chorak/i
};
var uz_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var uz_lib_match_matchMonthPatterns = {
  narrow: /^[yfmasond]/i,
  abbreviated: /^(yan|fev|mar|apr|may|iyun|iyul|avg|sen|okt|noy|dek)/i,
  wide: /^(yanvar|fevral|mart|aprel|may|iyun|iyul|avgust|sentabr|oktabr|noyabr|dekabr)/i
};
var uz_lib_match_parseMonthPatterns = {
  narrow: [/^y/i, /^f/i, /^m/i, /^a/i, /^m/i, /^i/i, /^i/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ya/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^iyun/i, /^iyul/i, /^av/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var uz_lib_match_matchDayPatterns = {
  narrow: /^[ydschj]/i,
  short: /^(ya|du|se|cho|pa|ju|sha)/i,
  abbreviated: /^(yak|dush|sesh|chor|pay|jum|shan)/i,
  wide: /^(yakshanba|dushanba|seshanba|chorshanba|payshanba|juma|shanba)/i
};
var uz_lib_match_parseDayPatterns = {
  narrow: [/^y/i, /^d/i, /^s/i, /^ch/i, /^p/i, /^j/i, /^sh/i],
  any: [/^ya/i, /^d/i, /^se/i, /^ch/i, /^p/i, /^j/i, /^sh/i]
};
var uz_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|y\.t|p| (ertalab|tushdan keyin|kechqurun|tun))/i,
  any: /^([ap]\.?\s?m\.?|yarim tun|peshin| (ertalab|tushdan keyin|kechqurun|tun))/i
};
var uz_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^y\.t/i,
    noon: /^pe/i,
    morning: /ertalab/i,
    afternoon: /tushdan keyin/i,
    evening: /kechqurun/i,
    night: /tun/i
  }
};
var uz_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: uz_lib_match_matchOrdinalNumberPattern,
    parsePattern: uz_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uz_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uz_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uz_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uz_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: uz_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const uz_lib_match = (uz_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz/index.js





var uz_locale = {
  code: "uz",
  formatDistance: uz_lib_formatDistance,
  formatLong: uz_lib_formatLong,
  formatRelative: uz_lib_formatRelative,
  localize: uz_lib_localize,
  match: uz_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const uz = (uz_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/formatDistance/index.js
var uz_Cyrl_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "1 \u0441\u043E\u043D\u0438\u044F\u0434\u0430\u043D \u043A\u0430\u043C",
    other: "{{count}} \u0441\u043E\u043D\u0438\u044F\u0434\u0430\u043D \u043A\u0430\u043C"
  },
  xSeconds: {
    one: "1 \u0441\u043E\u043D\u0438\u044F",
    other: "{{count}} \u0441\u043E\u043D\u0438\u044F"
  },
  halfAMinute: "\u044F\u0440\u0438\u043C \u0434\u0430\u049B\u0438\u049B\u0430",
  lessThanXMinutes: {
    one: "1 \u0434\u0430\u049B\u0438\u049B\u0430\u0434\u0430\u043D \u043A\u0430\u043C",
    other: "{{count}} \u0434\u0430\u049B\u0438\u049B\u0430\u0434\u0430\u043D \u043A\u0430\u043C"
  },
  xMinutes: {
    one: "1 \u0434\u0430\u049B\u0438\u049B\u0430",
    other: "{{count}} \u0434\u0430\u049B\u0438\u049B\u0430"
  },
  aboutXHours: {
    one: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D 1 \u0441\u043E\u0430\u0442",
    other: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D {{count}} \u0441\u043E\u0430\u0442"
  },
  xHours: {
    one: "1 \u0441\u043E\u0430\u0442",
    other: "{{count}} \u0441\u043E\u0430\u0442"
  },
  xDays: {
    one: "1 \u043A\u0443\u043D",
    other: "{{count}} \u043A\u0443\u043D"
  },
  aboutXWeeks: {
    one: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D 1 \u0445\u0430\u0444\u0442\u0430",
    other: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D {{count}} \u0445\u0430\u0444\u0442\u0430"
  },
  xWeeks: {
    one: "1 \u0445\u0430\u0444\u0442\u0430",
    other: "{{count}} \u0445\u0430\u0444\u0442\u0430"
  },
  aboutXMonths: {
    one: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D 1 \u043E\u0439",
    other: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D {{count}} \u043E\u0439"
  },
  xMonths: {
    one: "1 \u043E\u0439",
    other: "{{count}} \u043E\u0439"
  },
  aboutXYears: {
    one: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D 1 \u0439\u0438\u043B",
    other: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D {{count}} \u0439\u0438\u043B"
  },
  xYears: {
    one: "1 \u0439\u0438\u043B",
    other: "{{count}} \u0439\u0438\u043B"
  },
  overXYears: {
    one: "1 \u0439\u0438\u043B\u0434\u0430\u043D \u043A\u045E\u043F",
    other: "{{count}} \u0439\u0438\u043B\u0434\u0430\u043D \u043A\u045E\u043F"
  },
  almostXYears: {
    one: "\u0434\u0435\u044F\u0440\u043B\u0438 1 \u0439\u0438\u043B",
    other: "\u0434\u0435\u044F\u0440\u043B\u0438 {{count}} \u0439\u0438\u043B"
  }
};
var uz_Cyrl_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = uz_Cyrl_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "\u0434\u0430\u043D \u043A\u0435\u0439\u0438\u043D";
    } else {
      return result + " \u043E\u043B\u0434\u0438\u043D";
    }
  }
  return result;
};
/* harmony default export */ const uz_Cyrl_lib_formatDistance = (uz_Cyrl_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/formatLong/index.js

var uz_Cyrl_lib_formatLong_dateFormats = {
  full: "EEEE, do MMMM, y",
  long: "do MMMM, y",
  medium: "d MMM, y",
  short: "dd/MM/yyyy"
};
var uz_Cyrl_lib_formatLong_timeFormats = {
  full: "H:mm:ss zzzz",
  long: "H:mm:ss z",
  medium: "H:mm:ss",
  short: "H:mm"
};
var uz_Cyrl_lib_formatLong_dateTimeFormats = {
  any: "{{date}}, {{time}}"
};
var uz_Cyrl_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_Cyrl_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_Cyrl_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: uz_Cyrl_lib_formatLong_dateTimeFormats,
    defaultWidth: "any"
  })
};
/* harmony default export */ const uz_Cyrl_lib_formatLong = (uz_Cyrl_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/formatRelative/index.js
var uz_Cyrl_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u045E\u0442\u0433\u0430\u043D' eeee p '\u0434\u0430'",
  yesterday: "'\u043A\u0435\u0447\u0430' p '\u0434\u0430'",
  today: "'\u0431\u0443\u0433\u0443\u043D' p '\u0434\u0430'",
  tomorrow: "'\u044D\u0440\u0442\u0430\u0433\u0430' p '\u0434\u0430'",
  nextWeek: "eeee p '\u0434\u0430'",
  other: "P"
};
var uz_Cyrl_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return uz_Cyrl_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const uz_Cyrl_lib_formatRelative = (uz_Cyrl_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/localize/index.js

var uz_Cyrl_lib_localize_eraValues = {
  narrow: ["\u041C.\u0410", "\u041C"],
  abbreviated: ["\u041C.\u0410", "\u041C"],
  wide: ["\u041C\u0438\u043B\u043E\u0434\u0434\u0430\u043D \u0410\u0432\u0432\u0430\u043B\u0433\u0438", "\u041C\u0438\u043B\u043E\u0434\u0438\u0439"]
};
var uz_Cyrl_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["1-\u0447\u043E\u0440.", "2-\u0447\u043E\u0440.", "3-\u0447\u043E\u0440.", "4-\u0447\u043E\u0440."],
  wide: ["1-\u0447\u043E\u0440\u0430\u043A", "2-\u0447\u043E\u0440\u0430\u043A", "3-\u0447\u043E\u0440\u0430\u043A", "4-\u0447\u043E\u0440\u0430\u043A"]
};
var uz_Cyrl_lib_localize_monthValues = {
  narrow: ["\u042F", "\u0424", "\u041C", "\u0410", "\u041C", "\u0418", "\u0418", "\u0410", "\u0421", "\u041E", "\u041D", "\u0414"],
  abbreviated: ["\u044F\u043D\u0432", "\u0444\u0435\u0432", "\u043C\u0430\u0440", "\u0430\u043F\u0440", "\u043C\u0430\u0439", "\u0438\u044E\u043D", "\u0438\u044E\u043B", "\u0430\u0432\u0433", "\u0441\u0435\u043D", "\u043E\u043A\u0442", "\u043D\u043E\u044F", "\u0434\u0435\u043A"],
  wide: ["\u044F\u043D\u0432\u0430\u0440", "\u0444\u0435\u0432\u0440\u0430\u043B", "\u043C\u0430\u0440\u0442", "\u0430\u043F\u0440\u0435\u043B", "\u043C\u0430\u0439", "\u0438\u044E\u043D", "\u0438\u044E\u043B", "\u0430\u0432\u0433\u0443\u0441\u0442", "\u0441\u0435\u043D\u0442\u0430\u0431\u0440", "\u043E\u043A\u0442\u0430\u0431\u0440", "\u043D\u043E\u044F\u0431\u0440", "\u0434\u0435\u043A\u0430\u0431\u0440"]
};
var uz_Cyrl_lib_localize_dayValues = {
  narrow: ["\u042F", "\u0414", "\u0421", "\u0427", "\u041F", "\u0416", "\u0428"],
  short: ["\u044F\u043A", "\u0434\u0443", "\u0441\u0435", "\u0447\u043E", "\u043F\u0430", "\u0436\u0443", "\u0448\u0430"],
  abbreviated: ["\u044F\u043A\u0448", "\u0434\u0443\u0448", "\u0441\u0435\u0448", "\u0447\u043E\u0440", "\u043F\u0430\u0439", "\u0436\u0443\u043C", "\u0448\u0430\u043D"],
  wide: ["\u044F\u043A\u0448\u0430\u043D\u0431\u0430", "\u0434\u0443\u0448\u0430\u043D\u0431\u0430", "\u0441\u0435\u0448\u0430\u043D\u0431\u0430", "\u0447\u043E\u0440\u0448\u0430\u043D\u0431\u0430", "\u043F\u0430\u0439\u0448\u0430\u043D\u0431\u0430", "\u0436\u0443\u043C\u0430", "\u0448\u0430\u043D\u0431\u0430"]
};
var uz_Cyrl_lib_localize_dayPeriodValues = {
  any: {
    am: "\u041F.\u041E.",
    pm: "\u041F.\u041A.",
    midnight: "\u044F\u0440\u0438\u043C \u0442\u0443\u043D",
    noon: "\u043F\u0435\u0448\u0438\u043D",
    morning: "\u044D\u0440\u0442\u0430\u043B\u0430\u0431",
    afternoon: "\u043F\u0435\u0448\u0438\u043D\u0434\u0430\u043D \u043A\u0435\u0439\u0438\u043D",
    evening: "\u043A\u0435\u0447\u0430\u0441\u0438",
    night: "\u0442\u0443\u043D"
  }
};
var uz_Cyrl_lib_localize_formattingDayPeriodValues = {
  any: {
    am: "\u041F.\u041E.",
    pm: "\u041F.\u041A.",
    midnight: "\u044F\u0440\u0438\u043C \u0442\u0443\u043D",
    noon: "\u043F\u0435\u0448\u0438\u043D",
    morning: "\u044D\u0440\u0442\u0430\u043B\u0430\u0431",
    afternoon: "\u043F\u0435\u0448\u0438\u043D\u0434\u0430\u043D \u043A\u0435\u0439\u0438\u043D",
    evening: "\u043A\u0435\u0447\u0430\u0441\u0438",
    night: "\u0442\u0443\u043D"
  }
};
var uz_Cyrl_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, _options) {
  return String(dirtyNumber);
};
var uz_Cyrl_lib_localize_localize = {
  ordinalNumber: uz_Cyrl_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: uz_Cyrl_lib_localize_dayPeriodValues,
    defaultWidth: "any",
    formattingValues: uz_Cyrl_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "any"
  })
};
/* harmony default export */ const uz_Cyrl_lib_localize = (uz_Cyrl_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/_lib/match/index.js


var uz_Cyrl_lib_match_matchOrdinalNumberPattern = /^(\d+)(чи)?/i;
var uz_Cyrl_lib_match_parseOrdinalNumberPattern = /\d+/i;
var uz_Cyrl_lib_match_matchEraPatterns = {
  narrow: /^(м\.а|м\.)/i,
  abbreviated: /^(м\.а|м\.)/i,
  wide: /^(милоддан аввал|милоддан кейин)/i
};
var uz_Cyrl_lib_match_parseEraPatterns = {
  any: [/^м/i, /^а/i]
};
var uz_Cyrl_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^[1234]-чор./i,
  wide: /^[1234]-чорак/i
};
var uz_Cyrl_lib_match_parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var uz_Cyrl_lib_match_matchMonthPatterns = {
  narrow: /^[яфмамииасонд]/i,
  abbreviated: /^(янв|фев|мар|апр|май|июн|июл|авг|сен|окт|ноя|дек)/i,
  wide: /^(январ|феврал|март|апрел|май|июн|июл|август|сентабр|октабр|ноябр|декабр)/i
};
var uz_Cyrl_lib_match_parseMonthPatterns = {
  narrow: [/^я/i, /^ф/i, /^м/i, /^а/i, /^м/i, /^и/i, /^и/i, /^а/i, /^с/i, /^о/i, /^н/i, /^д/i],
  any: [/^я/i, /^ф/i, /^мар/i, /^ап/i, /^май/i, /^июн/i, /^июл/i, /^ав/i, /^с/i, /^о/i, /^н/i, /^д/i]
};
var uz_Cyrl_lib_match_matchDayPatterns = {
  narrow: /^[ядсчпжш]/i,
  short: /^(як|ду|се|чо|па|жу|ша)/i,
  abbreviated: /^(якш|душ|сеш|чор|пай|жум|шан)/i,
  wide: /^(якшанба|душанба|сешанба|чоршанба|пайшанба|жума|шанба)/i
};
var uz_Cyrl_lib_match_parseDayPatterns = {
  narrow: [/^я/i, /^д/i, /^с/i, /^ч/i, /^п/i, /^ж/i, /^ш/i],
  any: [/^як/i, /^ду/i, /^се/i, /^чор/i, /^пай/i, /^жу/i, /^шан/i]
};
var uz_Cyrl_lib_match_matchDayPeriodPatterns = {
  any: /^(п\.о\.|п\.к\.|ярим тун|пешиндан кейин|(эрталаб|пешиндан кейин|кечаси|тун))/i
};
var uz_Cyrl_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^п\.о\./i,
    pm: /^п\.к\./i,
    midnight: /^ярим тун/i,
    noon: /^пешиндан кейин/i,
    morning: /эрталаб/i,
    afternoon: /пешиндан кейин/i,
    evening: /кечаси/i,
    night: /тун/i
  }
};
var uz_Cyrl_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: uz_Cyrl_lib_match_matchOrdinalNumberPattern,
    parsePattern: uz_Cyrl_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uz_Cyrl_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uz_Cyrl_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uz_Cyrl_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: uz_Cyrl_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: uz_Cyrl_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: uz_Cyrl_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const uz_Cyrl_lib_match = (uz_Cyrl_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/uz-Cyrl/index.js





var uz_Cyrl_locale = {
  code: "uz-Cyrl",
  formatDistance: uz_Cyrl_lib_formatDistance,
  formatLong: uz_Cyrl_lib_formatLong,
  formatRelative: uz_Cyrl_lib_formatRelative,
  localize: uz_Cyrl_lib_localize,
  match: uz_Cyrl_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const uz_Cyrl = (uz_Cyrl_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/formatDistance/index.js
var vi_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "d\u01B0\u1EDBi 1 gi\xE2y",
    other: "d\u01B0\u1EDBi {{count}} gi\xE2y"
  },
  xSeconds: {
    one: "1 gi\xE2y",
    other: "{{count}} gi\xE2y"
  },
  halfAMinute: "n\u1EEDa ph\xFAt",
  lessThanXMinutes: {
    one: "d\u01B0\u1EDBi 1 ph\xFAt",
    other: "d\u01B0\u1EDBi {{count}} ph\xFAt"
  },
  xMinutes: {
    one: "1 ph\xFAt",
    other: "{{count}} ph\xFAt"
  },
  aboutXHours: {
    one: "kho\u1EA3ng 1 gi\u1EDD",
    other: "kho\u1EA3ng {{count}} gi\u1EDD"
  },
  xHours: {
    one: "1 gi\u1EDD",
    other: "{{count}} gi\u1EDD"
  },
  xDays: {
    one: "1 ng\xE0y",
    other: "{{count}} ng\xE0y"
  },
  aboutXWeeks: {
    one: "kho\u1EA3ng 1 tu\u1EA7n",
    other: "kho\u1EA3ng {{count}} tu\u1EA7n"
  },
  xWeeks: {
    one: "1 tu\u1EA7n",
    other: "{{count}} tu\u1EA7n"
  },
  aboutXMonths: {
    one: "kho\u1EA3ng 1 th\xE1ng",
    other: "kho\u1EA3ng {{count}} th\xE1ng"
  },
  xMonths: {
    one: "1 th\xE1ng",
    other: "{{count}} th\xE1ng"
  },
  aboutXYears: {
    one: "kho\u1EA3ng 1 n\u0103m",
    other: "kho\u1EA3ng {{count}} n\u0103m"
  },
  xYears: {
    one: "1 n\u0103m",
    other: "{{count}} n\u0103m"
  },
  overXYears: {
    one: "h\u01A1n 1 n\u0103m",
    other: "h\u01A1n {{count}} n\u0103m"
  },
  almostXYears: {
    one: "g\u1EA7n 1 n\u0103m",
    other: "g\u1EA7n {{count}} n\u0103m"
  }
};
var vi_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = vi_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + " n\u1EEFa";
    } else {
      return result + " tr\u01B0\u1EDBc";
    }
  }
  return result;
};
/* harmony default export */ const vi_lib_formatDistance = (vi_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/formatLong/index.js

var vi_lib_formatLong_dateFormats = {
  // thứ Sáu, ngày 25 tháng 08 năm 2017
  full: "EEEE, 'ng\xE0y' d MMMM 'n\u0103m' y",
  // ngày 25 tháng 08 năm 2017
  long: "'ng\xE0y' d MMMM 'n\u0103m' y",
  // 25 thg 08 năm 2017
  medium: "d MMM 'n\u0103m' y",
  // 25/08/2017
  short: "dd/MM/y"
};
var vi_lib_formatLong_timeFormats = {
  full: "HH:mm:ss zzzz",
  long: "HH:mm:ss z",
  medium: "HH:mm:ss",
  short: "HH:mm"
};
var vi_lib_formatLong_dateTimeFormats = {
  // thứ Sáu, ngày 25 tháng 08 năm 2017 23:25:59
  full: "{{date}} {{time}}",
  // ngày 25 tháng 08 năm 2017 23:25
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var vi_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: vi_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: vi_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: vi_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const vi_lib_formatLong = (vi_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/formatRelative/index.js
var vi_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "eeee 'tu\u1EA7n tr\u01B0\u1EDBc v\xE0o l\xFAc' p",
  yesterday: "'h\xF4m qua v\xE0o l\xFAc' p",
  today: "'h\xF4m nay v\xE0o l\xFAc' p",
  tomorrow: "'ng\xE0y mai v\xE0o l\xFAc' p",
  nextWeek: "eeee 't\u1EDBi v\xE0o l\xFAc' p",
  other: "P"
};
var vi_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return vi_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const vi_lib_formatRelative = (vi_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/localize/index.js

var vi_lib_localize_eraValues = {
  narrow: ["TCN", "SCN"],
  abbreviated: ["tr\u01B0\u1EDBc CN", "sau CN"],
  wide: ["tr\u01B0\u1EDBc C\xF4ng Nguy\xEAn", "sau C\xF4ng Nguy\xEAn"]
};
var vi_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["Qu\xFD 1", "Qu\xFD 2", "Qu\xFD 3", "Qu\xFD 4"]
};
var vi_lib_localize_formattingQuarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  // I notice many news outlet use this "quý II/2018"
  wide: ["qu\xFD I", "qu\xFD II", "qu\xFD III", "qu\xFD IV"]
};
var vi_lib_localize_monthValues = {
  narrow: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
  abbreviated: ["Thg 1", "Thg 2", "Thg 3", "Thg 4", "Thg 5", "Thg 6", "Thg 7", "Thg 8", "Thg 9", "Thg 10", "Thg 11", "Thg 12"],
  wide: ["Th\xE1ng M\u1ED9t", "Th\xE1ng Hai", "Th\xE1ng Ba", "Th\xE1ng T\u01B0", "Th\xE1ng N\u0103m", "Th\xE1ng S\xE1u", "Th\xE1ng B\u1EA3y", "Th\xE1ng T\xE1m", "Th\xE1ng Ch\xEDn", "Th\xE1ng M\u01B0\u1EDDi", "Th\xE1ng M\u01B0\u1EDDi M\u1ED9t", "Th\xE1ng M\u01B0\u1EDDi Hai"]
};
var vi_lib_localize_formattingMonthValues = {
  narrow: ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"],
  abbreviated: ["thg 1", "thg 2", "thg 3", "thg 4", "thg 5", "thg 6", "thg 7", "thg 8", "thg 9", "thg 10", "thg 11", "thg 12"],
  wide: ["th\xE1ng 01", "th\xE1ng 02", "th\xE1ng 03", "th\xE1ng 04", "th\xE1ng 05", "th\xE1ng 06", "th\xE1ng 07", "th\xE1ng 08", "th\xE1ng 09", "th\xE1ng 10", "th\xE1ng 11", "th\xE1ng 12"]
};
var vi_lib_localize_dayValues = {
  narrow: ["CN", "T2", "T3", "T4", "T5", "T6", "T7"],
  short: ["CN", "Th 2", "Th 3", "Th 4", "Th 5", "Th 6", "Th 7"],
  abbreviated: ["CN", "Th\u1EE9 2", "Th\u1EE9 3", "Th\u1EE9 4", "Th\u1EE9 5", "Th\u1EE9 6", "Th\u1EE9 7"],
  wide: ["Ch\u1EE7 Nh\u1EADt", "Th\u1EE9 Hai", "Th\u1EE9 Ba", "Th\u1EE9 T\u01B0", "Th\u1EE9 N\u0103m", "Th\u1EE9 S\xE1u", "Th\u1EE9 B\u1EA3y"]
};
var vi_lib_localize_dayPeriodValues = {
  // narrow date period is extremely rare in Vietnamese
  // I used abbreviated form for noon, morning and afternoon
  // which are regconizable by Vietnamese, others cannot be any shorter
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "n\u1EEDa \u0111\xEAm",
    noon: "tr",
    morning: "sg",
    afternoon: "ch",
    evening: "t\u1ED1i",
    night: "\u0111\xEAm"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "n\u1EEDa \u0111\xEAm",
    noon: "tr\u01B0a",
    morning: "s\xE1ng",
    afternoon: "chi\u1EC1u",
    evening: "t\u1ED1i",
    night: "\u0111\xEAm"
  },
  wide: {
    am: "SA",
    pm: "CH",
    midnight: "n\u1EEDa \u0111\xEAm",
    noon: "tr\u01B0a",
    morning: "s\xE1ng",
    afternoon: "chi\u1EC1u",
    evening: "t\u1ED1i",
    night: "\u0111\xEAm"
  }
};
var vi_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "am",
    pm: "pm",
    midnight: "n\u1EEDa \u0111\xEAm",
    noon: "tr",
    morning: "sg",
    afternoon: "ch",
    evening: "t\u1ED1i",
    night: "\u0111\xEAm"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "n\u1EEDa \u0111\xEAm",
    noon: "tr\u01B0a",
    morning: "s\xE1ng",
    afternoon: "chi\u1EC1u",
    evening: "t\u1ED1i",
    night: "\u0111\xEAm"
  },
  wide: {
    am: "SA",
    pm: "CH",
    midnight: "n\u1EEDa \u0111\xEAm",
    noon: "gi\u1EEFa tr\u01B0a",
    morning: "v\xE0o bu\u1ED5i s\xE1ng",
    afternoon: "v\xE0o bu\u1ED5i chi\u1EC1u",
    evening: "v\xE0o bu\u1ED5i t\u1ED1i",
    night: "v\xE0o ban \u0111\xEAm"
  }
};
var vi_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  var unit = options === null || options === void 0 ? void 0 : options.unit;
  if (unit === "quarter") {
    switch (number) {
      case 1:
        return "I";
      case 2:
        return "II";
      case 3:
        return "III";
      case 4:
        return "IV";
    }
  } else if (unit === "day") {
    switch (number) {
      case 1:
        return "th\u1EE9 2";
      case 2:
        return "th\u1EE9 3";
      case 3:
        return "th\u1EE9 4";
      case 4:
        return "th\u1EE9 5";
      case 5:
        return "th\u1EE9 6";
      case 6:
        return "th\u1EE9 7";
      case 7:
        return "ch\u1EE7 nh\u1EADt";
    }
  } else if (unit === "week") {
    if (number === 1) {
      return "th\u1EE9 nh\u1EA5t";
    } else {
      return "th\u1EE9 " + number;
    }
  } else if (unit === "dayOfYear") {
    if (number === 1) {
      return "\u0111\u1EA7u ti\xEAn";
    } else {
      return "th\u1EE9 " + number;
    }
  }
  return String(number);
};
var vi_lib_localize_localize = {
  ordinalNumber: vi_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_quarterValues,
    defaultWidth: "wide",
    formattingValues: vi_lib_localize_formattingQuarterValues,
    defaultFormattingWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_monthValues,
    defaultWidth: "wide",
    formattingValues: vi_lib_localize_formattingMonthValues,
    defaultFormattingWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: vi_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: vi_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const vi_lib_localize = (vi_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/_lib/match/index.js


var vi_lib_match_matchOrdinalNumberPattern = /^(\d+)/i;
var vi_lib_match_parseOrdinalNumberPattern = /\d+/i;
var vi_lib_match_matchEraPatterns = {
  narrow: /^(tcn|scn)/i,
  abbreviated: /^(trước CN|sau CN)/i,
  wide: /^(trước Công Nguyên|sau Công Nguyên)/i
};
var vi_lib_match_parseEraPatterns = {
  any: [/^t/i, /^s/i]
};
var vi_lib_match_matchQuarterPatterns = {
  narrow: /^([1234]|i{1,3}v?)/i,
  abbreviated: /^q([1234]|i{1,3}v?)/i,
  wide: /^quý ([1234]|i{1,3}v?)/i
};
var vi_lib_match_parseQuarterPatterns = {
  any: [/(1|i)$/i, /(2|ii)$/i, /(3|iii)$/i, /(4|iv)$/i]
};
var vi_lib_match_matchMonthPatterns = {
  // month number may contain leading 0, 'thg' prefix may have space, underscore or empty before number
  // note the order of '1' since it is a sub-string of '10', so must be lower priority
  narrow: /^(0?[2-9]|10|11|12|0?1)/i,
  // note the order of 'thg 1' since it is sub-string of 'thg 10', so must be lower priority
  abbreviated: /^thg[ _]?(0?[1-9](?!\d)|10|11|12)/i,
  // note the order of 'Mười' since it is sub-string of Mười Một, so must be lower priority
  wide: /^tháng ?(Một|Hai|Ba|Tư|Năm|Sáu|Bảy|Tám|Chín|Mười|Mười ?Một|Mười ?Hai|0?[1-9](?!\d)|10|11|12)/i
};
var vi_lib_match_parseMonthPatterns = {
  narrow: [/0?1$/i, /0?2/i, /3/, /4/, /5/, /6/, /7/, /8/, /9/, /10/, /11/, /12/],
  abbreviated: [/^thg[ _]?0?1(?!\d)/i, /^thg[ _]?0?2/i, /^thg[ _]?0?3/i, /^thg[ _]?0?4/i, /^thg[ _]?0?5/i, /^thg[ _]?0?6/i, /^thg[ _]?0?7/i, /^thg[ _]?0?8/i, /^thg[ _]?0?9/i, /^thg[ _]?10/i, /^thg[ _]?11/i, /^thg[ _]?12/i],
  wide: [/^tháng ?(Một|0?1(?!\d))/i, /^tháng ?(Hai|0?2)/i, /^tháng ?(Ba|0?3)/i, /^tháng ?(Tư|0?4)/i, /^tháng ?(Năm|0?5)/i, /^tháng ?(Sáu|0?6)/i, /^tháng ?(Bảy|0?7)/i, /^tháng ?(Tám|0?8)/i, /^tháng ?(Chín|0?9)/i, /^tháng ?(Mười|10)/i, /^tháng ?(Mười ?Một|11)/i, /^tháng ?(Mười ?Hai|12)/i]
};
var vi_lib_match_matchDayPatterns = {
  narrow: /^(CN|T2|T3|T4|T5|T6|T7)/i,
  short: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  abbreviated: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
  wide: /^(Chủ ?Nhật|Chúa ?Nhật|thứ ?Hai|thứ ?Ba|thứ ?Tư|thứ ?Năm|thứ ?Sáu|thứ ?Bảy)/i
};
var vi_lib_match_parseDayPatterns = {
  narrow: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  short: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  abbreviated: [/CN/i, /2/i, /3/i, /4/i, /5/i, /6/i, /7/i],
  wide: [/(Chủ|Chúa) ?Nhật/i, /Hai/i, /Ba/i, /Tư/i, /Năm/i, /Sáu/i, /Bảy/i]
};
var vi_lib_match_matchDayPeriodPatterns = {
  narrow: /^(a|p|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
  abbreviated: /^(am|pm|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
  wide: /^(ch[^i]*|sa|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i
};
var vi_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^(a|sa)/i,
    pm: /^(p|ch[^i]*)/i,
    midnight: /nửa đêm/i,
    noon: /trưa/i,
    morning: /sáng/i,
    afternoon: /chiều/i,
    evening: /tối/i,
    night: /^đêm/i
  }
};
var vi_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: vi_lib_match_matchOrdinalNumberPattern,
    parsePattern: vi_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: vi_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: vi_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: vi_lib_match_parseMonthPatterns,
    defaultParseWidth: "wide"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: vi_lib_match_parseDayPatterns,
    defaultParseWidth: "wide"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: vi_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: vi_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const vi_lib_match = (vi_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/vi/index.js





var vi_locale = {
  code: "vi",
  formatDistance: vi_lib_formatDistance,
  formatLong: vi_lib_formatLong,
  formatRelative: vi_lib_formatRelative,
  localize: vi_lib_localize,
  match: vi_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 1
    /* First week of new year contains Jan 1st  */
  }
};
/* harmony default export */ const vi = (vi_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/formatDistance/index.js
var zh_CN_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u4E0D\u5230 1 \u79D2",
    other: "\u4E0D\u5230 {{count}} \u79D2"
  },
  xSeconds: {
    one: "1 \u79D2",
    other: "{{count}} \u79D2"
  },
  halfAMinute: "\u534A\u5206\u949F",
  lessThanXMinutes: {
    one: "\u4E0D\u5230 1 \u5206\u949F",
    other: "\u4E0D\u5230 {{count}} \u5206\u949F"
  },
  xMinutes: {
    one: "1 \u5206\u949F",
    other: "{{count}} \u5206\u949F"
  },
  xHours: {
    one: "1 \u5C0F\u65F6",
    other: "{{count}} \u5C0F\u65F6"
  },
  aboutXHours: {
    one: "\u5927\u7EA6 1 \u5C0F\u65F6",
    other: "\u5927\u7EA6 {{count}} \u5C0F\u65F6"
  },
  xDays: {
    one: "1 \u5929",
    other: "{{count}} \u5929"
  },
  aboutXWeeks: {
    one: "\u5927\u7EA6 1 \u4E2A\u661F\u671F",
    other: "\u5927\u7EA6 {{count}} \u4E2A\u661F\u671F"
  },
  xWeeks: {
    one: "1 \u4E2A\u661F\u671F",
    other: "{{count}} \u4E2A\u661F\u671F"
  },
  aboutXMonths: {
    one: "\u5927\u7EA6 1 \u4E2A\u6708",
    other: "\u5927\u7EA6 {{count}} \u4E2A\u6708"
  },
  xMonths: {
    one: "1 \u4E2A\u6708",
    other: "{{count}} \u4E2A\u6708"
  },
  aboutXYears: {
    one: "\u5927\u7EA6 1 \u5E74",
    other: "\u5927\u7EA6 {{count}} \u5E74"
  },
  xYears: {
    one: "1 \u5E74",
    other: "{{count}} \u5E74"
  },
  overXYears: {
    one: "\u8D85\u8FC7 1 \u5E74",
    other: "\u8D85\u8FC7 {{count}} \u5E74"
  },
  almostXYears: {
    one: "\u5C06\u8FD1 1 \u5E74",
    other: "\u5C06\u8FD1 {{count}} \u5E74"
  }
};
var zh_CN_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = zh_CN_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "\u5185";
    } else {
      return result + "\u524D";
    }
  }
  return result;
};
/* harmony default export */ const zh_CN_lib_formatDistance = (zh_CN_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/formatLong/index.js

var zh_CN_lib_formatLong_dateFormats = {
  full: "y'\u5E74'M'\u6708'd'\u65E5' EEEE",
  long: "y'\u5E74'M'\u6708'd'\u65E5'",
  medium: "yyyy-MM-dd",
  short: "yy-MM-dd"
};
var zh_CN_lib_formatLong_timeFormats = {
  full: "zzzz a h:mm:ss",
  long: "z a h:mm:ss",
  medium: "a h:mm:ss",
  short: "a h:mm"
};
var zh_CN_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var zh_CN_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_CN_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_CN_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_CN_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const zh_CN_lib_formatLong = (zh_CN_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/formatRelative/index.js

function checkWeek(date, baseDate, options) {
  var baseFormat = "eeee p";
  if (isSameUTCWeek(date, baseDate, options)) {
    return baseFormat;
  } else if (date.getTime() > baseDate.getTime()) {
    return "'\u4E0B\u4E2A'" + baseFormat;
  }
  return "'\u4E0A\u4E2A'" + baseFormat;
}
var zh_CN_lib_formatRelative_formatRelativeLocale = {
  lastWeek: checkWeek,
  // days before yesterday, maybe in this week or last week
  yesterday: "'\u6628\u5929' p",
  today: "'\u4ECA\u5929' p",
  tomorrow: "'\u660E\u5929' p",
  nextWeek: checkWeek,
  // days after tomorrow, maybe in this week or next week
  other: "PP p"
};
var zh_CN_lib_formatRelative_formatRelative = function formatRelative2(token, date, baseDate, options) {
  var format = zh_CN_lib_formatRelative_formatRelativeLocale[token];
  if (typeof format === "function") {
    return format(date, baseDate, options);
  }
  return format;
};
/* harmony default export */ const zh_CN_lib_formatRelative = (zh_CN_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/localize/index.js

var zh_CN_lib_localize_eraValues = {
  narrow: ["\u524D", "\u516C\u5143"],
  abbreviated: ["\u524D", "\u516C\u5143"],
  wide: ["\u516C\u5143\u524D", "\u516C\u5143"]
};
var zh_CN_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u7B2C\u4E00\u5B63", "\u7B2C\u4E8C\u5B63", "\u7B2C\u4E09\u5B63", "\u7B2C\u56DB\u5B63"],
  wide: ["\u7B2C\u4E00\u5B63\u5EA6", "\u7B2C\u4E8C\u5B63\u5EA6", "\u7B2C\u4E09\u5B63\u5EA6", "\u7B2C\u56DB\u5B63\u5EA6"]
};
var zh_CN_lib_localize_monthValues = {
  narrow: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u4E03", "\u516B", "\u4E5D", "\u5341", "\u5341\u4E00", "\u5341\u4E8C"],
  abbreviated: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"],
  wide: ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"]
};
var zh_CN_lib_localize_dayValues = {
  narrow: ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"],
  short: ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"],
  abbreviated: ["\u5468\u65E5", "\u5468\u4E00", "\u5468\u4E8C", "\u5468\u4E09", "\u5468\u56DB", "\u5468\u4E94", "\u5468\u516D"],
  wide: ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"]
};
var zh_CN_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u4E0A",
    pm: "\u4E0B",
    midnight: "\u51CC\u6668",
    noon: "\u5348",
    morning: "\u65E9",
    afternoon: "\u4E0B\u5348",
    evening: "\u665A",
    night: "\u591C"
  },
  abbreviated: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u51CC\u6668",
    noon: "\u4E2D\u5348",
    morning: "\u65E9\u6668",
    afternoon: "\u4E2D\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u95F4"
  },
  wide: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u51CC\u6668",
    noon: "\u4E2D\u5348",
    morning: "\u65E9\u6668",
    afternoon: "\u4E2D\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u95F4"
  }
};
var zh_CN_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u4E0A",
    pm: "\u4E0B",
    midnight: "\u51CC\u6668",
    noon: "\u5348",
    morning: "\u65E9",
    afternoon: "\u4E0B\u5348",
    evening: "\u665A",
    night: "\u591C"
  },
  abbreviated: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u51CC\u6668",
    noon: "\u4E2D\u5348",
    morning: "\u65E9\u6668",
    afternoon: "\u4E2D\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u95F4"
  },
  wide: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u51CC\u6668",
    noon: "\u4E2D\u5348",
    morning: "\u65E9\u6668",
    afternoon: "\u4E2D\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u95F4"
  }
};
var zh_CN_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  switch (options === null || options === void 0 ? void 0 : options.unit) {
    case "date":
      return number.toString() + "\u65E5";
    case "hour":
      return number.toString() + "\u65F6";
    case "minute":
      return number.toString() + "\u5206";
    case "second":
      return number.toString() + "\u79D2";
    default:
      return "\u7B2C " + number.toString();
  }
};
var zh_CN_lib_localize_localize = {
  ordinalNumber: zh_CN_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: zh_CN_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: zh_CN_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const zh_CN_lib_localize = (zh_CN_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/_lib/match/index.js


var zh_CN_lib_match_matchOrdinalNumberPattern = /^(第\s*)?\d+(日|时|分|秒)?/i;
var zh_CN_lib_match_parseOrdinalNumberPattern = /\d+/i;
var zh_CN_lib_match_matchEraPatterns = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
};
var zh_CN_lib_match_parseEraPatterns = {
  any: [/^(前)/i, /^(公元)/i]
};
var zh_CN_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]刻/i,
  wide: /^第[一二三四]刻钟/i
};
var zh_CN_lib_match_parseQuarterPatterns = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
};
var zh_CN_lib_match_matchMonthPatterns = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
var zh_CN_lib_match_parseMonthPatterns = {
  narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
  any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
};
var zh_CN_lib_match_matchDayPatterns = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^周[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
};
var zh_CN_lib_match_parseDayPatterns = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
};
var zh_CN_lib_match_matchDayPeriodPatterns = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨|)/i
};
var zh_CN_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
};
var zh_CN_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: zh_CN_lib_match_matchOrdinalNumberPattern,
    parsePattern: zh_CN_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_CN_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_CN_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_CN_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_CN_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_CN_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: zh_CN_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const zh_CN_lib_match = (zh_CN_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-CN/index.js





var zh_CN_locale = {
  code: "zh-CN",
  formatDistance: zh_CN_lib_formatDistance,
  formatLong: zh_CN_lib_formatLong,
  formatRelative: zh_CN_lib_formatRelative,
  localize: zh_CN_lib_localize,
  match: zh_CN_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const zh_CN = (zh_CN_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/formatDistance/index.js
var zh_HK_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u5C11\u65BC 1 \u79D2",
    other: "\u5C11\u65BC {{count}} \u79D2"
  },
  xSeconds: {
    one: "1 \u79D2",
    other: "{{count}} \u79D2"
  },
  halfAMinute: "\u534A\u5206\u9418",
  lessThanXMinutes: {
    one: "\u5C11\u65BC 1 \u5206\u9418",
    other: "\u5C11\u65BC {{count}} \u5206\u9418"
  },
  xMinutes: {
    one: "1 \u5206\u9418",
    other: "{{count}} \u5206\u9418"
  },
  xHours: {
    one: "1 \u5C0F\u6642",
    other: "{{count}} \u5C0F\u6642"
  },
  aboutXHours: {
    one: "\u5927\u7D04 1 \u5C0F\u6642",
    other: "\u5927\u7D04 {{count}} \u5C0F\u6642"
  },
  xDays: {
    one: "1 \u5929",
    other: "{{count}} \u5929"
  },
  aboutXWeeks: {
    one: "\u5927\u7D04 1 \u500B\u661F\u671F",
    other: "\u5927\u7D04 {{count}} \u500B\u661F\u671F"
  },
  xWeeks: {
    one: "1 \u500B\u661F\u671F",
    other: "{{count}} \u500B\u661F\u671F"
  },
  aboutXMonths: {
    one: "\u5927\u7D04 1 \u500B\u6708",
    other: "\u5927\u7D04 {{count}} \u500B\u6708"
  },
  xMonths: {
    one: "1 \u500B\u6708",
    other: "{{count}} \u500B\u6708"
  },
  aboutXYears: {
    one: "\u5927\u7D04 1 \u5E74",
    other: "\u5927\u7D04 {{count}} \u5E74"
  },
  xYears: {
    one: "1 \u5E74",
    other: "{{count}} \u5E74"
  },
  overXYears: {
    one: "\u8D85\u904E 1 \u5E74",
    other: "\u8D85\u904E {{count}} \u5E74"
  },
  almostXYears: {
    one: "\u5C07\u8FD1 1 \u5E74",
    other: "\u5C07\u8FD1 {{count}} \u5E74"
  }
};
var zh_HK_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = zh_HK_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "\u5167";
    } else {
      return result + "\u524D";
    }
  }
  return result;
};
/* harmony default export */ const zh_HK_lib_formatDistance = (zh_HK_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/formatLong/index.js

var zh_HK_lib_formatLong_dateFormats = {
  full: "y'\u5E74'M'\u6708'd'\u65E5' EEEE",
  long: "y'\u5E74'M'\u6708'd'\u65E5'",
  medium: "yyyy-MM-dd",
  short: "yy-MM-dd"
};
var zh_HK_lib_formatLong_timeFormats = {
  full: "zzzz a h:mm:ss",
  long: "z a h:mm:ss",
  medium: "a h:mm:ss",
  short: "a h:mm"
};
var zh_HK_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var zh_HK_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_HK_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_HK_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_HK_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const zh_HK_lib_formatLong = (zh_HK_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/formatRelative/index.js
var zh_HK_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u4E0A\u500B'eeee p",
  yesterday: "'\u6628\u5929' p",
  today: "'\u4ECA\u5929' p",
  tomorrow: "'\u660E\u5929' p",
  nextWeek: "'\u4E0B\u500B'eeee p",
  other: "P"
};
var zh_HK_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return zh_HK_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const zh_HK_lib_formatRelative = (zh_HK_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/localize/index.js

var zh_HK_lib_localize_eraValues = {
  narrow: ["\u524D", "\u516C\u5143"],
  abbreviated: ["\u524D", "\u516C\u5143"],
  wide: ["\u516C\u5143\u524D", "\u516C\u5143"]
};
var zh_HK_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u7B2C\u4E00\u5B63", "\u7B2C\u4E8C\u5B63", "\u7B2C\u4E09\u5B63", "\u7B2C\u56DB\u5B63"],
  wide: ["\u7B2C\u4E00\u5B63\u5EA6", "\u7B2C\u4E8C\u5B63\u5EA6", "\u7B2C\u4E09\u5B63\u5EA6", "\u7B2C\u56DB\u5B63\u5EA6"]
};
var zh_HK_lib_localize_monthValues = {
  narrow: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u4E03", "\u516B", "\u4E5D", "\u5341", "\u5341\u4E00", "\u5341\u4E8C"],
  abbreviated: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"],
  wide: ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"]
};
var zh_HK_lib_localize_dayValues = {
  narrow: ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"],
  short: ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"],
  abbreviated: ["\u9031\u65E5", "\u9031\u4E00", "\u9031\u4E8C", "\u9031\u4E09", "\u9031\u56DB", "\u9031\u4E94", "\u9031\u516D"],
  wide: ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"]
};
var zh_HK_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u4E0A",
    pm: "\u4E0B",
    midnight: "\u5348\u591C",
    noon: "\u664C",
    morning: "\u65E9",
    afternoon: "\u5348",
    evening: "\u665A",
    night: "\u591C"
  },
  abbreviated: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u5348\u591C",
    noon: "\u4E2D\u5348",
    morning: "\u4E0A\u5348",
    afternoon: "\u4E0B\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u665A"
  },
  wide: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u5348\u591C",
    noon: "\u4E2D\u5348",
    morning: "\u4E0A\u5348",
    afternoon: "\u4E0B\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u665A"
  }
};
var zh_HK_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u4E0A",
    pm: "\u4E0B",
    midnight: "\u5348\u591C",
    noon: "\u664C",
    morning: "\u65E9",
    afternoon: "\u5348",
    evening: "\u665A",
    night: "\u591C"
  },
  abbreviated: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u5348\u591C",
    noon: "\u4E2D\u5348",
    morning: "\u4E0A\u5348",
    afternoon: "\u4E0B\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u665A"
  },
  wide: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u5348\u591C",
    noon: "\u4E2D\u5348",
    morning: "\u4E0A\u5348",
    afternoon: "\u4E0B\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u665A"
  }
};
var zh_HK_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  switch (options === null || options === void 0 ? void 0 : options.unit) {
    case "date":
      return number + "\u65E5";
    case "hour":
      return number + "\u6642";
    case "minute":
      return number + "\u5206";
    case "second":
      return number + "\u79D2";
    default:
      return "\u7B2C " + number;
  }
};
var zh_HK_lib_localize_localize = {
  ordinalNumber: zh_HK_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: zh_HK_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: zh_HK_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const zh_HK_lib_localize = (zh_HK_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/_lib/match/index.js


var zh_HK_lib_match_matchOrdinalNumberPattern = /^(第\s*)?\d+(日|時|分|秒)?/i;
var zh_HK_lib_match_parseOrdinalNumberPattern = /\d+/i;
var zh_HK_lib_match_matchEraPatterns = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
};
var zh_HK_lib_match_parseEraPatterns = {
  any: [/^(前)/i, /^(公元)/i]
};
var zh_HK_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]季/i,
  wide: /^第[一二三四]季度/i
};
var zh_HK_lib_match_parseQuarterPatterns = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
};
var zh_HK_lib_match_matchMonthPatterns = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
var zh_HK_lib_match_parseMonthPatterns = {
  narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
  any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
};
var zh_HK_lib_match_matchDayPatterns = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^週[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
};
var zh_HK_lib_match_parseDayPatterns = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
};
var zh_HK_lib_match_matchDayPeriodPatterns = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
};
var zh_HK_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
};
var zh_HK_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: zh_HK_lib_match_matchOrdinalNumberPattern,
    parsePattern: zh_HK_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_HK_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_HK_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_HK_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_HK_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_HK_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: zh_HK_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const zh_HK_lib_match = (zh_HK_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-HK/index.js





var zh_HK_locale = {
  code: "zh-HK",
  formatDistance: zh_HK_lib_formatDistance,
  formatLong: zh_HK_lib_formatLong,
  formatRelative: zh_HK_lib_formatRelative,
  localize: zh_HK_lib_localize,
  match: zh_HK_lib_match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
/* harmony default export */ const zh_HK = (zh_HK_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/formatDistance/index.js
var zh_TW_lib_formatDistance_formatDistanceLocale = {
  lessThanXSeconds: {
    one: "\u5C11\u65BC 1 \u79D2",
    other: "\u5C11\u65BC {{count}} \u79D2"
  },
  xSeconds: {
    one: "1 \u79D2",
    other: "{{count}} \u79D2"
  },
  halfAMinute: "\u534A\u5206\u9418",
  lessThanXMinutes: {
    one: "\u5C11\u65BC 1 \u5206\u9418",
    other: "\u5C11\u65BC {{count}} \u5206\u9418"
  },
  xMinutes: {
    one: "1 \u5206\u9418",
    other: "{{count}} \u5206\u9418"
  },
  xHours: {
    one: "1 \u5C0F\u6642",
    other: "{{count}} \u5C0F\u6642"
  },
  aboutXHours: {
    one: "\u5927\u7D04 1 \u5C0F\u6642",
    other: "\u5927\u7D04 {{count}} \u5C0F\u6642"
  },
  xDays: {
    one: "1 \u5929",
    other: "{{count}} \u5929"
  },
  aboutXWeeks: {
    one: "\u5927\u7D04 1 \u500B\u661F\u671F",
    other: "\u5927\u7D04 {{count}} \u500B\u661F\u671F"
  },
  xWeeks: {
    one: "1 \u500B\u661F\u671F",
    other: "{{count}} \u500B\u661F\u671F"
  },
  aboutXMonths: {
    one: "\u5927\u7D04 1 \u500B\u6708",
    other: "\u5927\u7D04 {{count}} \u500B\u6708"
  },
  xMonths: {
    one: "1 \u500B\u6708",
    other: "{{count}} \u500B\u6708"
  },
  aboutXYears: {
    one: "\u5927\u7D04 1 \u5E74",
    other: "\u5927\u7D04 {{count}} \u5E74"
  },
  xYears: {
    one: "1 \u5E74",
    other: "{{count}} \u5E74"
  },
  overXYears: {
    one: "\u8D85\u904E 1 \u5E74",
    other: "\u8D85\u904E {{count}} \u5E74"
  },
  almostXYears: {
    one: "\u5C07\u8FD1 1 \u5E74",
    other: "\u5C07\u8FD1 {{count}} \u5E74"
  }
};
var zh_TW_lib_formatDistance_formatDistance = function formatDistance2(token, count, options) {
  var result;
  var tokenValue = zh_TW_lib_formatDistance_formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", String(count));
  }
  if (options !== null && options !== void 0 && options.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return result + "\u5167";
    } else {
      return result + "\u524D";
    }
  }
  return result;
};
/* harmony default export */ const zh_TW_lib_formatDistance = (zh_TW_lib_formatDistance_formatDistance);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/formatLong/index.js

var zh_TW_lib_formatLong_dateFormats = {
  full: "y'\u5E74'M'\u6708'd'\u65E5' EEEE",
  long: "y'\u5E74'M'\u6708'd'\u65E5'",
  medium: "yyyy-MM-dd",
  short: "yy-MM-dd"
};
var zh_TW_lib_formatLong_timeFormats = {
  full: "zzzz a h:mm:ss",
  long: "z a h:mm:ss",
  medium: "a h:mm:ss",
  short: "a h:mm"
};
var zh_TW_lib_formatLong_dateTimeFormats = {
  full: "{{date}} {{time}}",
  long: "{{date}} {{time}}",
  medium: "{{date}} {{time}}",
  short: "{{date}} {{time}}"
};
var zh_TW_lib_formatLong_formatLong = {
  date: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_TW_lib_formatLong_dateFormats,
    defaultWidth: "full"
  }),
  time: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_TW_lib_formatLong_timeFormats,
    defaultWidth: "full"
  }),
  dateTime: (0,buildFormatLongFn/* default */.Z)({
    formats: zh_TW_lib_formatLong_dateTimeFormats,
    defaultWidth: "full"
  })
};
/* harmony default export */ const zh_TW_lib_formatLong = (zh_TW_lib_formatLong_formatLong);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/formatRelative/index.js
var zh_TW_lib_formatRelative_formatRelativeLocale = {
  lastWeek: "'\u4E0A\u500B'eeee p",
  yesterday: "'\u6628\u5929' p",
  today: "'\u4ECA\u5929' p",
  tomorrow: "'\u660E\u5929' p",
  nextWeek: "'\u4E0B\u500B'eeee p",
  other: "P"
};
var zh_TW_lib_formatRelative_formatRelative = function formatRelative2(token, _date, _baseDate, _options) {
  return zh_TW_lib_formatRelative_formatRelativeLocale[token];
};
/* harmony default export */ const zh_TW_lib_formatRelative = (zh_TW_lib_formatRelative_formatRelative);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/localize/index.js

var zh_TW_lib_localize_eraValues = {
  narrow: ["\u524D", "\u516C\u5143"],
  abbreviated: ["\u524D", "\u516C\u5143"],
  wide: ["\u516C\u5143\u524D", "\u516C\u5143"]
};
var zh_TW_lib_localize_quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["\u7B2C\u4E00\u523B", "\u7B2C\u4E8C\u523B", "\u7B2C\u4E09\u523B", "\u7B2C\u56DB\u523B"],
  wide: ["\u7B2C\u4E00\u523B\u9418", "\u7B2C\u4E8C\u523B\u9418", "\u7B2C\u4E09\u523B\u9418", "\u7B2C\u56DB\u523B\u9418"]
};
var zh_TW_lib_localize_monthValues = {
  narrow: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u4E03", "\u516B", "\u4E5D", "\u5341", "\u5341\u4E00", "\u5341\u4E8C"],
  abbreviated: ["1\u6708", "2\u6708", "3\u6708", "4\u6708", "5\u6708", "6\u6708", "7\u6708", "8\u6708", "9\u6708", "10\u6708", "11\u6708", "12\u6708"],
  wide: ["\u4E00\u6708", "\u4E8C\u6708", "\u4E09\u6708", "\u56DB\u6708", "\u4E94\u6708", "\u516D\u6708", "\u4E03\u6708", "\u516B\u6708", "\u4E5D\u6708", "\u5341\u6708", "\u5341\u4E00\u6708", "\u5341\u4E8C\u6708"]
};
var zh_TW_lib_localize_dayValues = {
  narrow: ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"],
  short: ["\u65E5", "\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D"],
  abbreviated: ["\u9031\u65E5", "\u9031\u4E00", "\u9031\u4E8C", "\u9031\u4E09", "\u9031\u56DB", "\u9031\u4E94", "\u9031\u516D"],
  wide: ["\u661F\u671F\u65E5", "\u661F\u671F\u4E00", "\u661F\u671F\u4E8C", "\u661F\u671F\u4E09", "\u661F\u671F\u56DB", "\u661F\u671F\u4E94", "\u661F\u671F\u516D"]
};
var zh_TW_lib_localize_dayPeriodValues = {
  narrow: {
    am: "\u4E0A",
    pm: "\u4E0B",
    midnight: "\u51CC\u6668",
    noon: "\u5348",
    morning: "\u65E9",
    afternoon: "\u4E0B\u5348",
    evening: "\u665A",
    night: "\u591C"
  },
  abbreviated: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u51CC\u6668",
    noon: "\u4E2D\u5348",
    morning: "\u65E9\u6668",
    afternoon: "\u4E2D\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u9593"
  },
  wide: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u51CC\u6668",
    noon: "\u4E2D\u5348",
    morning: "\u65E9\u6668",
    afternoon: "\u4E2D\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u9593"
  }
};
var zh_TW_lib_localize_formattingDayPeriodValues = {
  narrow: {
    am: "\u4E0A",
    pm: "\u4E0B",
    midnight: "\u51CC\u6668",
    noon: "\u5348",
    morning: "\u65E9",
    afternoon: "\u4E0B\u5348",
    evening: "\u665A",
    night: "\u591C"
  },
  abbreviated: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u51CC\u6668",
    noon: "\u4E2D\u5348",
    morning: "\u65E9\u6668",
    afternoon: "\u4E2D\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u9593"
  },
  wide: {
    am: "\u4E0A\u5348",
    pm: "\u4E0B\u5348",
    midnight: "\u51CC\u6668",
    noon: "\u4E2D\u5348",
    morning: "\u65E9\u6668",
    afternoon: "\u4E2D\u5348",
    evening: "\u665A\u4E0A",
    night: "\u591C\u9593"
  }
};
var zh_TW_lib_localize_ordinalNumber = function ordinalNumber2(dirtyNumber, options) {
  var number = Number(dirtyNumber);
  switch (options === null || options === void 0 ? void 0 : options.unit) {
    case "date":
      return number + "\u65E5";
    case "hour":
      return number + "\u6642";
    case "minute":
      return number + "\u5206";
    case "second":
      return number + "\u79D2";
    default:
      return "\u7B2C " + number;
  }
};
var zh_TW_lib_localize_localize = {
  ordinalNumber: zh_TW_lib_localize_ordinalNumber,
  era: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_eraValues,
    defaultWidth: "wide"
  }),
  quarter: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_quarterValues,
    defaultWidth: "wide",
    argumentCallback: function argumentCallback(quarter) {
      return quarter - 1;
    }
  }),
  month: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_monthValues,
    defaultWidth: "wide"
  }),
  day: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: (0,buildLocalizeFn/* default */.Z)({
    values: zh_TW_lib_localize_dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: zh_TW_lib_localize_formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
/* harmony default export */ const zh_TW_lib_localize = (zh_TW_lib_localize_localize);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/_lib/match/index.js


var zh_TW_lib_match_matchOrdinalNumberPattern = /^(第\s*)?\d+(日|時|分|秒)?/i;
var zh_TW_lib_match_parseOrdinalNumberPattern = /\d+/i;
var zh_TW_lib_match_matchEraPatterns = {
  narrow: /^(前)/i,
  abbreviated: /^(前)/i,
  wide: /^(公元前|公元)/i
};
var zh_TW_lib_match_parseEraPatterns = {
  any: [/^(前)/i, /^(公元)/i]
};
var zh_TW_lib_match_matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^第[一二三四]刻/i,
  wide: /^第[一二三四]刻鐘/i
};
var zh_TW_lib_match_parseQuarterPatterns = {
  any: [/(1|一)/i, /(2|二)/i, /(3|三)/i, /(4|四)/i]
};
var zh_TW_lib_match_matchMonthPatterns = {
  narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
  abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
  wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
var zh_TW_lib_match_parseMonthPatterns = {
  narrow: [/^一/i, /^二/i, /^三/i, /^四/i, /^五/i, /^六/i, /^七/i, /^八/i, /^九/i, /^十(?!(一|二))/i, /^十一/i, /^十二/i],
  any: [/^一|1/i, /^二|2/i, /^三|3/i, /^四|4/i, /^五|5/i, /^六|6/i, /^七|7/i, /^八|8/i, /^九|9/i, /^十(?!(一|二))|10/i, /^十一|11/i, /^十二|12/i]
};
var zh_TW_lib_match_matchDayPatterns = {
  narrow: /^[一二三四五六日]/i,
  short: /^[一二三四五六日]/i,
  abbreviated: /^週[一二三四五六日]/i,
  wide: /^星期[一二三四五六日]/i
};
var zh_TW_lib_match_parseDayPatterns = {
  any: [/日/i, /一/i, /二/i, /三/i, /四/i, /五/i, /六/i]
};
var zh_TW_lib_match_matchDayPeriodPatterns = {
  any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
};
var zh_TW_lib_match_parseDayPeriodPatterns = {
  any: {
    am: /^上午?/i,
    pm: /^下午?/i,
    midnight: /^午夜/i,
    noon: /^[中正]午/i,
    morning: /^早上/i,
    afternoon: /^下午/i,
    evening: /^晚上?/i,
    night: /^凌晨/i
  }
};
var zh_TW_lib_match_match = {
  ordinalNumber: (0,buildMatchPatternFn/* default */.Z)({
    matchPattern: zh_TW_lib_match_matchOrdinalNumberPattern,
    parsePattern: zh_TW_lib_match_parseOrdinalNumberPattern,
    valueCallback: function valueCallback(value) {
      return parseInt(value, 10);
    }
  }),
  era: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_TW_lib_match_parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_TW_lib_match_parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function valueCallback2(index) {
      return index + 1;
    }
  }),
  month: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_TW_lib_match_parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: zh_TW_lib_match_parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: (0,buildMatchFn/* default */.Z)({
    matchPatterns: zh_TW_lib_match_matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: zh_TW_lib_match_parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
/* harmony default export */ const zh_TW_lib_match = (zh_TW_lib_match_match);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/zh-TW/index.js





var zh_TW_locale = {
  code: "zh-TW",
  formatDistance: zh_TW_lib_formatDistance,
  formatLong: zh_TW_lib_formatLong,
  formatRelative: zh_TW_lib_formatRelative,
  localize: zh_TW_lib_localize,
  match: zh_TW_lib_match,
  options: {
    weekStartsOn: 1,
    firstWeekContainsDate: 4
  }
};
/* harmony default export */ const zh_TW = (zh_TW_locale);

;// CONCATENATED MODULE: ./node_modules/date-fns/esm/locale/index.js































































































/***/ }),

/***/ 52565:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Z: () => (/* binding */ v)
/* harmony export */ });
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(74081);

const h = (t) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", width: "1rem", height: "1rem", fill: "none", viewBox: "0 0 24 24", ...t, children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("path", { fill: "#8E8EA9", d: "M17 14h-4.34a6 6 0 1 1 0-4H23v4h-2v4h-4v-4ZM7 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" }) }), v = h;



/***/ })

}]);